/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.mitv;

import android.os.Parcel;
import android.util.Log;

import miui.upnp.typedef.device.urn.DeviceType;
import miui.upnp.manager.ctrlpoint.AbstractDevice;
import miui.upnp.typedef.device.Device;
import miui.upnp.typedef.device.Service;

public class MiTV extends AbstractDevice {

    private static final String TAG = MiTV.class.getSimpleName();

    /**
     * deviceType & serviceType
     */
    public static final DeviceType DEVICE_TYPE = new DeviceType("MiTV", "0.1");

    /**
     * serviceId
     */
    public static final String ID_MiTVSettings = "urn:upnp-org:serviceId:MiTVSettings";
    public static final String ID_BleOperation = "urn:upnp-org:serviceId:BleOperation";
    public static final String ID_MiTVRunning = "urn:upnp-org:serviceId:MiTVRunning";

    /**
     * services
     */

    private MiTVSettings _MiTVSettings;
    private BleOperation _BleOperation;
    private MiTVRunning _MiTVRunning;

    public MiTVSettings getMiTVSettings() {
        return _MiTVSettings;
    }
    public BleOperation getBleOperation() {
        return _BleOperation;
    }
    public MiTVRunning getMiTVRunning() {
        return _MiTVRunning;
    }

    private static final Object classLock = MiTV.class;

    public static MiTV create(Device device) {
        Log.d(TAG, "create");

        synchronized (classLock) {
            MiTV thiz = new MiTV(device);

            do {
                if (! DEVICE_TYPE.equals(device.getDeviceType())) {
                    Log.d(TAG, "deviceType invalid: " + device.getDeviceType());
                    thiz = null;
                    break;
                }

                if (! thiz.initialize()) {
                    Log.d(TAG, "initialize failed");
                    thiz = null;
                    break;
                }
            } while (false);

            return thiz;
        }
    }

    private MiTV(Device device) {
        this.device = device;
    }

    private boolean initialize() {
        boolean ret = false;

        do {
            Service theMiTVSettings = device.getService(ID_MiTVSettings);
            if (theMiTVSettings == null) {
                Log.d(TAG, "service not found: " + ID_MiTVSettings);
                break;
            }

            Service theBleOperation = device.getService(ID_BleOperation);
            if (theBleOperation == null) {
                Log.d(TAG, "service not found: " + ID_BleOperation);
                break;
            }

            Service theMiTVRunning = device.getService(ID_MiTVRunning);
            if (theMiTVRunning == null) {
                Log.d(TAG, "service not found: " + ID_MiTVRunning);
                break;
            }

            _MiTVSettings = new MiTVSettings(theMiTVSettings);
            _BleOperation = new BleOperation(theBleOperation);
            _MiTVRunning = new MiTVRunning(theMiTVRunning);

            ret = true;
        } while (false);

        return ret;
    }

    public static final Creator<MiTV> CREATOR = new Creator<MiTV>() {

        @Override
        public MiTV createFromParcel(Parcel in) {
            return new MiTV(in);
        }

        @Override
        public MiTV[] newArray(int size) {
            return new MiTV[size];
         }
    };

    private MiTV(Parcel in) {
        readFromParcel(in);
    }

    public void readFromParcel(Parcel in) {
        device = in.readParcelable(Device.class.getClassLoader());
        initialize();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel out, int flags) {
        out.writeParcelable(device, flags);
    }
}
