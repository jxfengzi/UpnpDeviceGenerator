/* Automatic generated by DeviceToClazz */

package miot.api.device.xiaomi;

import android.util.Log;

import java.util.List;

import jing.api.ctrlpoint.CtrlPointManager;
import jing.api.ctrlpoint.Manipulator;
import jing.api.ctrlpoint.device.AbstractService;
import jing.typedef.ReturnCode;
import jing.typedef.device.Argument;
import jing.typedef.device.Service;
import jing.typedef.device.PropertyChanged;
import jing.typedef.device.invocation.ActionInvocation;
import jing.typedef.device.invocation.ActionInvocationFactory;
import jing.typedef.property.Property;

public class ConnectionManager extends AbstractService {

    private static final String TAG = "ConnectionManager";

    public ConnectionManager(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (3)
    //-------------------------------------------------------
    public static final String ACTION_GetCurrentConnectionInfo = "GetCurrentConnectionInfo";
    public static final String _GetCurrentConnectionInfo_ARG_ConnectionID = "ConnectionID";
    public static final String _GetCurrentConnectionInfo_ARG_RcsID = "RcsID";
    public static final String _GetCurrentConnectionInfo_ARG_AVTransportID = "AVTransportID";
    public static final String _GetCurrentConnectionInfo_ARG_ProtocolInfo = "ProtocolInfo";
    public static final String _GetCurrentConnectionInfo_ARG_PeerConnectionManager = "PeerConnectionManager";
    public static final String _GetCurrentConnectionInfo_ARG_PeerConnectionID = "PeerConnectionID";
    public static final String _GetCurrentConnectionInfo_ARG_Direction = "Direction";
    public static final String _GetCurrentConnectionInfo_ARG_Status = "Status";
    public static final String ACTION_GetProtocolInfo = "GetProtocolInfo";
    public static final String _GetProtocolInfo_ARG_Source = "Source";
    public static final String _GetProtocolInfo_ARG_Sink = "Sink";
    public static final String ACTION_GetCurrentConnectionIDs = "GetCurrentConnectionIDs";
    public static final String _GetCurrentConnectionIDs_ARG_ConnectionIDs = "ConnectionIDs";

    //-------------------------------------------------------
    // Property Name (10)
    //-------------------------------------------------------
    public static final String PROPERTY_A_ARG_TYPE_Direction = "A_ARG_TYPE_Direction";
    public static final String PROPERTY_SinkProtocolInfo = "SinkProtocolInfo";
    public static final String PROPERTY_A_ARG_TYPE_RcsID = "A_ARG_TYPE_RcsID";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionManager = "A_ARG_TYPE_ConnectionManager";
    public static final String PROPERTY_A_ARG_TYPE_ProtocolInfo = "A_ARG_TYPE_ProtocolInfo";
    public static final String PROPERTY_SourceProtocolInfo = "SourceProtocolInfo";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionID = "A_ARG_TYPE_ConnectionID";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionStatus = "A_ARG_TYPE_ConnectionStatus";
    public static final String PROPERTY_CurrentConnectionIDs = "CurrentConnectionIDs";
    public static final String PROPERTY_A_ARG_TYPE_AVTransportID = "A_ARG_TYPE_AVTransportID";

    //-------------------------------------------------------
    // Property value defined (2)
    //-------------------------------------------------------

    public enum A_ARG_TYPE_Direction {
        UNDEFINED,
        V_Input;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Input = "Input";

        public static A_ARG_TYPE_Direction retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Input)) {
                return V_Input;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Input:
                    value = CONST_V_Input;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_ConnectionStatus {
        UNDEFINED,
        V_OK,
        V_ContentFormatMismatch,
        V_InsufficientBandwidth,
        V_UnreliableChannel,
        V_Unknown;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";
        private static final String CONST_V_ContentFormatMismatch = "ContentFormatMismatch";
        private static final String CONST_V_InsufficientBandwidth = "InsufficientBandwidth";
        private static final String CONST_V_UnreliableChannel = "UnreliableChannel";
        private static final String CONST_V_Unknown = "Unknown";

        public static A_ARG_TYPE_ConnectionStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            if (value.equals(CONST_V_ContentFormatMismatch)) {
                return V_ContentFormatMismatch;
            }

            if (value.equals(CONST_V_InsufficientBandwidth)) {
                return V_InsufficientBandwidth;
            }

            if (value.equals(CONST_V_UnreliableChannel)) {
                return V_UnreliableChannel;
            }

            if (value.equals(CONST_V_Unknown)) {
                return V_Unknown;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                case V_ContentFormatMismatch:
                    value = CONST_V_ContentFormatMismatch;
                    break;

                case V_InsufficientBandwidth:
                    value = CONST_V_InsufficientBandwidth;
                    break;

                case V_UnreliableChannel:
                    value = CONST_V_UnreliableChannel;
                    break;

                case V_Unknown:
                    value = CONST_V_Unknown;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (3)
    //-------------------------------------------------------

    public interface GetCurrentConnectionInfo_CompletedHandler {
        void onSucceed(Integer theRcsID,
                       Integer theAVTransportID,
                       String theProtocolInfo,
                       String thePeerConnectionManager,
                       Integer thePeerConnectionID,
                       A_ARG_TYPE_Direction theDirection,
                       A_ARG_TYPE_ConnectionStatus theStatus);
        void onFailed(int errCode, String description);
    }

    public int GetCurrentConnectionInfo(Integer ConnectionID, final GetCurrentConnectionInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_GetCurrentConnectionInfo);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetCurrentConnectionInfo_ARG_ConnectionID, ConnectionID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {
                        Property pRcsID = invocation.getResult(_GetCurrentConnectionInfo_ARG_RcsID);
                        if (pRcsID == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_RcsID));
                            break;
                        }

                        Property pAVTransportID = invocation.getResult(_GetCurrentConnectionInfo_ARG_AVTransportID);
                        if (pAVTransportID == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_AVTransportID));
                            break;
                        }

                        Property pProtocolInfo = invocation.getResult(_GetCurrentConnectionInfo_ARG_ProtocolInfo);
                        if (pProtocolInfo == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_ProtocolInfo));
                            break;
                        }

                        Property pPeerConnectionManager = invocation.getResult(_GetCurrentConnectionInfo_ARG_PeerConnectionManager);
                        if (pPeerConnectionManager == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_PeerConnectionManager));
                            break;
                        }

                        Property pPeerConnectionID = invocation.getResult(_GetCurrentConnectionInfo_ARG_PeerConnectionID);
                        if (pPeerConnectionID == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_PeerConnectionID));
                            break;
                        }

                        Property pDirection = invocation.getResult(_GetCurrentConnectionInfo_ARG_Direction);
                        if (pDirection == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_Direction));
                            break;
                        }

                        Property pStatus = invocation.getResult(_GetCurrentConnectionInfo_ARG_Status);
                        if (pStatus == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_Status));
                            break;
                        }

                        Integer theRcsID = (Integer) pRcsID.getCurrentValue();
                        Integer theAVTransportID = (Integer) pAVTransportID.getCurrentValue();
                        String theProtocolInfo = (String) pProtocolInfo.getCurrentValue();
                        String thePeerConnectionManager = (String) pPeerConnectionManager.getCurrentValue();
                        Integer thePeerConnectionID = (Integer) pPeerConnectionID.getCurrentValue();
                        A_ARG_TYPE_Direction theDirection = A_ARG_TYPE_Direction.retrieveType(pDirection.getCurrentValue().toString());
                        A_ARG_TYPE_ConnectionStatus theStatus = A_ARG_TYPE_ConnectionStatus.retrieveType(pStatus.getCurrentValue().toString());

                        handler.onSucceed(theRcsID,
                                theAVTransportID,
                                theProtocolInfo,
                                thePeerConnectionManager,
                                thePeerConnectionID,
                                theDirection,
                                theStatus);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetProtocolInfo_CompletedHandler {
        void onSucceed(String theSource,
                       String theSink);
        void onFailed(int errCode, String description);
    }

    public int GetProtocolInfo(final GetProtocolInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_GetProtocolInfo);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {
                        Property pSource = invocation.getResult(_GetProtocolInfo_ARG_Source);
                        if (pSource == null) {
                            Log.d(TAG, String.format("%s not found", _GetProtocolInfo_ARG_Source));
                            break;
                        }

                        Property pSink = invocation.getResult(_GetProtocolInfo_ARG_Sink);
                        if (pSink == null) {
                            Log.d(TAG, String.format("%s not found", _GetProtocolInfo_ARG_Sink));
                            break;
                        }

                        String theSource = (String) pSource.getCurrentValue();
                        String theSink = (String) pSink.getCurrentValue();

                        handler.onSucceed(theSource,
                                theSink);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetCurrentConnectionIDs_CompletedHandler {
        void onSucceed(String theConnectionIDs);
        void onFailed(int errCode, String description);
    }

    public int GetCurrentConnectionIDs(final GetCurrentConnectionIDs_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_GetCurrentConnectionIDs);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {
                        Property pConnectionIDs = invocation.getResult(_GetCurrentConnectionIDs_ARG_ConnectionIDs);
                        if (pConnectionIDs == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentConnectionIDs_ARG_ConnectionIDs));
                            break;
                        }

                        String theConnectionIDs = (String) pConnectionIDs.getCurrentValue();

                        handler.onSucceed(theConnectionIDs);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onSinkProtocolInfoChanged(String currentValue);
        void onSourceProtocolInfoChanged(String currentValue);
        void onCurrentConnectionIDsChanged(String currentValue);
    }

    public int subscribe(final CompletionHandler handler, final EventListener listener) {
        int ret = ReturnCode.OK;

        do {
            if (this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            if (listener == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }


            ret = CtrlPointManager.getManipulator().subscribe(this.service,
                    new Manipulator.GenericCompletionHandler() {

                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    },
                    new Manipulator.EventListener() {
                        @Override
                        public void onSubscriptionExpired(String serviceId) {
                                listener.onSubscriptionExpired();
                        }

                        @Override
                        public void onEvent(String serviceId, List<PropertyChanged> list) {
                            for (PropertyChanged c : list) {
                                if (c.getName().equals(PROPERTY_SinkProtocolInfo)) {
                                    listener.onSinkProtocolInfoChanged(c.getValue());
                                }
                                if (c.getName().equals(PROPERTY_SourceProtocolInfo)) {
                                    listener.onSourceProtocolInfoChanged(c.getValue());
                                }
                                if (c.getName().equals(PROPERTY_CurrentConnectionIDs)) {
                                    listener.onCurrentConnectionIDsChanged(c.getValue());
                                }
                            }
                        }
                    });
        } while (false);

        return ret;
    }

    public int unsubscribe(final CompletionHandler handler) {
        int ret = ReturnCode.OK;

        do {
            if (! this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            ret = CtrlPointManager.getManipulator().unsubscribe(this.service,
                    new Manipulator.GenericCompletionHandler() {
                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    });
        } while (false);

        return ret;
    }

}
