/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.binarylight;

import android.util.Log;

import java.util.List;

import upnp.typedef.ReturnCode;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.PropertyChanged;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.ActionInfoCreator;
import upnp.typedef.property.DataType;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.ctrlpoint.device.AbstractService;
import upnps.api.manager.handler.MyCompletionHandler;
import upnps.api.manager.handler.MyEventListener;
import upnps.api.manager.handler.MyInvokeCompletionHandler;

public class SwitchPower extends AbstractService {

    private static final String TAG = "SwitchPower";

    public SwitchPower(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (3)
    //-------------------------------------------------------
    public static final String ACTION_GetTarget = "GetTarget";
    public static final String _GetTarget_ARG_RetTargetValue = "RetTargetValue";
    public static final String ACTION_SetTarget = "SetTarget";
    public static final String _SetTarget_ARG_newTargetValue = "newTargetValue";
    public static final String ACTION_GetStatus = "GetStatus";
    public static final String _GetStatus_ARG_ResultStatus = "ResultStatus";

    //-------------------------------------------------------
    // Property Name (2)
    //-------------------------------------------------------
    public static final String PROPERTY_Status = "Status";
    public static final String PROPERTY_Target = "Target";

    //-------------------------------------------------------
    // Property value defined (0)
    //-------------------------------------------------------

    //-------------------------------------------------------
    // ActionList (3)
    //-------------------------------------------------------

    public interface GetTarget_CompletedHandler {
        void onSucceed(Boolean theRetTargetValue);
        void onFailed(int errCode, String description);
    }

    public int GetTarget(final GetTarget_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetTarget);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pRetTargetValue = invocation.getResult(_GetTarget_ARG_RetTargetValue);
                        if (pRetTargetValue == null) {
                            Log.d(TAG, String.format("%s not found", _GetTarget_ARG_RetTargetValue));
                            break;
                        }

                        Boolean theRetTargetValue = (Boolean) pRetTargetValue.getCurrentValue();

                        handler.onSucceed(theRetTargetValue);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetTarget_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetTarget(Boolean newTargetValue, final SetTarget_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetTarget);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetTarget_ARG_newTargetValue, newTargetValue, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetStatus_CompletedHandler {
        void onSucceed(Boolean theResultStatus);
        void onFailed(int errCode, String description);
    }

    public int GetStatus(final GetStatus_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetStatus);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pResultStatus = invocation.getResult(_GetStatus_ARG_ResultStatus);
                        if (pResultStatus == null) {
                            Log.d(TAG, String.format("%s not found", _GetStatus_ARG_ResultStatus));
                            break;
                        }

                        Boolean theResultStatus = (Boolean) pResultStatus.getCurrentValue();

                        handler.onSucceed(theResultStatus);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onStatusChanged(Boolean currentValue);
    }

    public int subscribe(final CompletionHandler handler, final EventListener listener) {
        int ret = ReturnCode.OK;

        do {
            if (this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            if (listener == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }


            ret = UpnpManager.getUpnp().subscribe(this.service,
                    new MyCompletionHandler() {

                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    },
                    new MyEventListener() {
                        @Override
                        public void onSubscriptionExpired(String serviceId) {
                            listener.onSubscriptionExpired();
                        }

                        @Override
                        public void onEvent(String serviceId, List<PropertyChanged> list) {
                            for (PropertyChanged c : list) {
                                if (c.getName().equals(PROPERTY_Status)) {
                                    PropertyDefinition def = service.getPropertyDefinition(PROPERTY_Status);
                                    listener.onStatusChanged((Boolean)def.getDataType().toObjectValue(c.getValue()));
                                }
                            }
                        }
                    });
        } while (false);

        return ret;
    }

    public int unsubscribe(final CompletionHandler handler) {
        int ret = ReturnCode.OK;

        do {
            if (! this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            ret = UpnpManager.getUpnp().unsubscribe(this.service,
                    new MyCompletionHandler() {
                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    });
        } while (false);

        return ret;
    }

}
