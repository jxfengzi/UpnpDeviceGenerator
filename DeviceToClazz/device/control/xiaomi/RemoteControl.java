/* Automatic generated by DeviceToClazz */

package miot.api.device.xiaomi;

import android.util.Log;

import java.util.List;

import jing.api.ctrlpoint.CtrlPointManager;
import jing.api.ctrlpoint.Manipulator;
import jing.api.ctrlpoint.device.AbstractService;
import jing.typedef.ReturnCode;
import jing.typedef.device.Argument;
import jing.typedef.device.Service;
import jing.typedef.device.PropertyChanged;
import jing.typedef.device.invocation.ActionInvocation;
import jing.typedef.device.invocation.ActionInvocationFactory;
import jing.typedef.property.Property;

public class RemoteControl extends AbstractService {

    private static final String TAG = "RemoteControl";

    public RemoteControl(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (5)
    //-------------------------------------------------------
    public static final String ACTION_PptControl = "PptControl";
    public static final String _PptControl_ARG_PptCommand = "PptCommand";
    public static final String _PptControl_ARG_Result = "Result";
    public static final String ACTION_GetShutdownState = "GetShutdownState";
    public static final String _GetShutdownState_ARG_Time = "Time";
    public static final String _GetShutdownState_ARG_ShutdownState = "ShutdownState";
    public static final String _GetShutdownState_ARG_Result = "Result";
    public static final String ACTION_Shutdown = "Shutdown";
    public static final String _Shutdown_ARG_Time = "Time";
    public static final String _Shutdown_ARG_Result = "Result";
    public static final String ACTION_LockScreen = "LockScreen";
    public static final String _LockScreen_ARG_Result = "Result";
    public static final String ACTION_CancelShutdown = "CancelShutdown";
    public static final String _CancelShutdown_ARG_Result = "Result";

    //-------------------------------------------------------
    // Property Name (1)
    //-------------------------------------------------------
    public static final String PROPERTY_ShutdownState = "ShutdownState";

    //-------------------------------------------------------
    // Property value defined (1)
    //-------------------------------------------------------

    public enum ShutdownState {
        UNDEFINED,
        V_NoSchedule,
        V_Shutdowning;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NoSchedule = "NoSchedule";
        private static final String CONST_V_Shutdowning = "Shutdowning";

        public static ShutdownState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NoSchedule)) {
                return V_NoSchedule;
            }

            if (value.equals(CONST_V_Shutdowning)) {
                return V_Shutdowning;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NoSchedule:
                    value = CONST_V_NoSchedule;
                    break;

                case V_Shutdowning:
                    value = CONST_V_Shutdowning;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (5)
    //-------------------------------------------------------

    public interface PptControl_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int PptControl(final PptControl_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_PptControl);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {

                        handler.onSucceed(null);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetShutdownState_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int GetShutdownState(final GetShutdownState_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_GetShutdownState);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {

                        handler.onSucceed(null,
                                null,
                                null);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Shutdown_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Shutdown(final Shutdown_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_Shutdown);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {

                        handler.onSucceed(null);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface LockScreen_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int LockScreen(final LockScreen_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_LockScreen);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {

                        handler.onSucceed(null);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface CancelShutdown_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int CancelShutdown(final CancelShutdown_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_CancelShutdown);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {

                        handler.onSucceed(null);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

}
