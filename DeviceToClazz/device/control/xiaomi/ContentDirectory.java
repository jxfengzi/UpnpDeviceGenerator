/* Automatic generated by DeviceToClazz */

package miot.api.device.xiaomi;

import android.util.Log;

import java.util.List;

import jing.api.ctrlpoint.CtrlPointManager;
import jing.api.ctrlpoint.Manipulator;
import jing.api.ctrlpoint.device.AbstractService;
import jing.typedef.ReturnCode;
import jing.typedef.device.Argument;
import jing.typedef.device.Service;
import jing.typedef.device.PropertyChanged;
import jing.typedef.device.invocation.ActionInvocation;
import jing.typedef.device.invocation.ActionInvocationFactory;
import jing.typedef.property.Property;

public class ContentDirectory extends AbstractService {

    private static final String TAG = "ContentDirectory";

    public ContentDirectory(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (6)
    //-------------------------------------------------------
    public static final String ACTION_DestroyObject = "DestroyObject";
    public static final String _DestroyObject_ARG_ObjectID = "ObjectID";
    public static final String ACTION_UpdateObject = "UpdateObject";
    public static final String _UpdateObject_ARG_ObjectID = "ObjectID";
    public static final String _UpdateObject_ARG_CurrentTagValue = "CurrentTagValue";
    public static final String _UpdateObject_ARG_NewTagValue = "NewTagValue";
    public static final String ACTION_GetSearchCapabilities = "GetSearchCapabilities";
    public static final String _GetSearchCapabilities_ARG_SearchCaps = "SearchCaps";
    public static final String ACTION_GetSortCapabilities = "GetSortCapabilities";
    public static final String _GetSortCapabilities_ARG_SortCaps = "SortCaps";
    public static final String ACTION_GetSystemUpdateID = "GetSystemUpdateID";
    public static final String _GetSystemUpdateID_ARG_Id = "Id";
    public static final String ACTION_Browse = "Browse";
    public static final String _Browse_ARG_ObjectID = "ObjectID";
    public static final String _Browse_ARG_BrowseFlag = "BrowseFlag";
    public static final String _Browse_ARG_Filter = "Filter";
    public static final String _Browse_ARG_StartingIndex = "StartingIndex";
    public static final String _Browse_ARG_RequestedCount = "RequestedCount";
    public static final String _Browse_ARG_SortCriteria = "SortCriteria";
    public static final String _Browse_ARG_ForceRefresh = "ForceRefresh";
    public static final String _Browse_ARG_Result = "Result";
    public static final String _Browse_ARG_NumberReturned = "NumberReturned";
    public static final String _Browse_ARG_TotalMatches = "TotalMatches";
    public static final String _Browse_ARG_UpdateID = "UpdateID";

    //-------------------------------------------------------
    // Property Name (13)
    //-------------------------------------------------------
    public static final String PROPERTY_SystemUpdateID = "SystemUpdateID";
    public static final String PROPERTY_A_ARG_TYPE_BrowseFlag = "A_ARG_TYPE_BrowseFlag";
    public static final String PROPERTY_A_ARG_TYPE_Filter = "A_ARG_TYPE_Filter";
    public static final String PROPERTY_A_ARG_TYPE_SortCriteria = "A_ARG_TYPE_SortCriteria";
    public static final String PROPERTY_SortCapabilities = "SortCapabilities";
    public static final String PROPERTY_A_ARG_TYPE_Refresh = "A_ARG_TYPE_Refresh";
    public static final String PROPERTY_SearchCapabilities = "SearchCapabilities";
    public static final String PROPERTY_A_ARG_TYPE_TagValueList = "A_ARG_TYPE_TagValueList";
    public static final String PROPERTY_A_ARG_TYPE_ObjectID = "A_ARG_TYPE_ObjectID";
    public static final String PROPERTY_A_ARG_TYPE_Count = "A_ARG_TYPE_Count";
    public static final String PROPERTY_A_ARG_TYPE_Index = "A_ARG_TYPE_Index";
    public static final String PROPERTY_A_ARG_TYPE_UpdateID = "A_ARG_TYPE_UpdateID";
    public static final String PROPERTY_A_ARG_TYPE_Result = "A_ARG_TYPE_Result";

    //-------------------------------------------------------
    // Property value defined (1)
    //-------------------------------------------------------

    public enum A_ARG_TYPE_BrowseFlag {
        UNDEFINED,
        V_BrowseMetadata,
        V_BrowseDirectChildren;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_BrowseMetadata = "BrowseMetadata";
        private static final String CONST_V_BrowseDirectChildren = "BrowseDirectChildren";

        public static A_ARG_TYPE_BrowseFlag retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_BrowseMetadata)) {
                return V_BrowseMetadata;
            }

            if (value.equals(CONST_V_BrowseDirectChildren)) {
                return V_BrowseDirectChildren;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_BrowseMetadata:
                    value = CONST_V_BrowseMetadata;
                    break;

                case V_BrowseDirectChildren:
                    value = CONST_V_BrowseDirectChildren;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (6)
    //-------------------------------------------------------

    public interface DestroyObject_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int DestroyObject(String ObjectID, final DestroyObject_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_DestroyObject);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_DestroyObject_ARG_ObjectID, ObjectID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface UpdateObject_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int UpdateObject(String ObjectID, String CurrentTagValue, String NewTagValue, final UpdateObject_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_UpdateObject);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_UpdateObject_ARG_ObjectID, ObjectID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_UpdateObject_ARG_CurrentTagValue, CurrentTagValue, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_UpdateObject_ARG_NewTagValue, NewTagValue, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetSearchCapabilities_CompletedHandler {
        void onSucceed(String theSearchCaps);
        void onFailed(int errCode, String description);
    }

    public int GetSearchCapabilities(final GetSearchCapabilities_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_GetSearchCapabilities);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {
                        Property pSearchCaps = invocation.getResult(_GetSearchCapabilities_ARG_SearchCaps);
                        if (pSearchCaps == null) {
                            Log.d(TAG, String.format("%s not found", _GetSearchCapabilities_ARG_SearchCaps));
                            break;
                        }

                        String theSearchCaps = (String) pSearchCaps.getCurrentValue();

                        handler.onSucceed(theSearchCaps);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetSortCapabilities_CompletedHandler {
        void onSucceed(String theSortCaps);
        void onFailed(int errCode, String description);
    }

    public int GetSortCapabilities(final GetSortCapabilities_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_GetSortCapabilities);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {
                        Property pSortCaps = invocation.getResult(_GetSortCapabilities_ARG_SortCaps);
                        if (pSortCaps == null) {
                            Log.d(TAG, String.format("%s not found", _GetSortCapabilities_ARG_SortCaps));
                            break;
                        }

                        String theSortCaps = (String) pSortCaps.getCurrentValue();

                        handler.onSucceed(theSortCaps);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetSystemUpdateID_CompletedHandler {
        void onSucceed(Long theId);
        void onFailed(int errCode, String description);
    }

    public int GetSystemUpdateID(final GetSystemUpdateID_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_GetSystemUpdateID);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {
                        Property pId = invocation.getResult(_GetSystemUpdateID_ARG_Id);
                        if (pId == null) {
                            Log.d(TAG, String.format("%s not found", _GetSystemUpdateID_ARG_Id));
                            break;
                        }

                        Long theId = (Long) pId.getCurrentValue();

                        handler.onSucceed(theId);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Browse_CompletedHandler {
        void onSucceed(String theResult,
                       Long theNumberReturned,
                       Long theTotalMatches,
                       Long theUpdateID);
        void onFailed(int errCode, String description);
    }

    public int Browse(String ObjectID, A_ARG_TYPE_BrowseFlag BrowseFlag, String Filter, Long StartingIndex, Long RequestedCount, String SortCriteria, Long ForceRefresh, final Browse_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInvocation action = ActionInvocationFactory.create(service, ACTION_Browse);;
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Browse_ARG_ObjectID, ObjectID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Browse_ARG_BrowseFlag, BrowseFlag.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Browse_ARG_Filter, Filter, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Browse_ARG_StartingIndex, StartingIndex, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Browse_ARG_RequestedCount, RequestedCount, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Browse_ARG_SortCriteria, SortCriteria, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Browse_ARG_ForceRefresh, ForceRefresh, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = CtrlPointManager.getManipulator().invoke(action, new Manipulator.InvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInvocation invocation) {
                    do {
                        Property pResult = invocation.getResult(_Browse_ARG_Result);
                        if (pResult == null) {
                            Log.d(TAG, String.format("%s not found", _Browse_ARG_Result));
                            break;
                        }

                        Property pNumberReturned = invocation.getResult(_Browse_ARG_NumberReturned);
                        if (pNumberReturned == null) {
                            Log.d(TAG, String.format("%s not found", _Browse_ARG_NumberReturned));
                            break;
                        }

                        Property pTotalMatches = invocation.getResult(_Browse_ARG_TotalMatches);
                        if (pTotalMatches == null) {
                            Log.d(TAG, String.format("%s not found", _Browse_ARG_TotalMatches));
                            break;
                        }

                        Property pUpdateID = invocation.getResult(_Browse_ARG_UpdateID);
                        if (pUpdateID == null) {
                            Log.d(TAG, String.format("%s not found", _Browse_ARG_UpdateID));
                            break;
                        }

                        String theResult = (String) pResult.getCurrentValue();
                        Long theNumberReturned = (Long) pNumberReturned.getCurrentValue();
                        Long theTotalMatches = (Long) pTotalMatches.getCurrentValue();
                        Long theUpdateID = (Long) pUpdateID.getCurrentValue();

                        handler.onSucceed(theResult,
                                theNumberReturned,
                                theTotalMatches,
                                theUpdateID);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onSystemUpdateIDChanged(Long currentValue);
    }

    public int subscribe(final CompletionHandler handler, final EventListener listener) {
        int ret = ReturnCode.OK;

        do {
            if (this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            if (listener == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }


            ret = CtrlPointManager.getManipulator().subscribe(this.service,
                    new Manipulator.GenericCompletionHandler() {

                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    },
                    new Manipulator.EventListener() {
                        @Override
                        public void onSubscriptionExpired(String serviceId) {
                                listener.onSubscriptionExpired();
                        }

                        @Override
                        public void onEvent(String serviceId, List<PropertyChanged> list) {
                    //            listener.on
                        }
                    });
        } while (false);

        return ret;
    }

    public int unsubscribe(final CompletionHandler handler) {
        int ret = ReturnCode.OK;

        do {
            if (! this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            ret = CtrlPointManager.getManipulator().unsubscribe(this.service,
                    new Manipulator.GenericCompletionHandler() {
                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    });
        } while (false);

        return ret;
    }

}
