/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.robot;

import android.util.Log;

import java.util.List;

import miui.upnp.typedef.device.urn.ServiceType;
import miui.upnp.typedef.error.UpnpError;
import miui.upnp.typedef.device.Argument;
import miui.upnp.typedef.device.Service;
import miui.upnp.typedef.device.PropertyChanged;
import miui.upnp.typedef.device.invocation.ActionInfo;
import miui.upnp.typedef.device.invocation.ActionInfoCreator;
import miui.upnp.typedef.exception.UpnpException;
import miui.upnp.typedef.datatype.DataType;
import miui.upnp.typedef.property.Property;
import miui.upnp.typedef.property.PropertyDefinition;

import miui.upnp.manager.UpnpManager;
import miui.upnp.manager.ctrlpoint.AbstractService;
import miui.upnp.manager.handler.UpnpCompletionHandler;
import miui.upnp.manager.handler.UpnpEventListener;
import miui.upnp.manager.handler.UpnpInvokeCompletionHandler;

public class RobotBind extends AbstractService {

    private static final String TAG = "RobotBind";
    private static final ServiceType SERVICE_TYPE =  new ServiceType("RobotBind", "0.1");

    public RobotBind(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (1)
    //-------------------------------------------------------
    public static final String ACTION_RB_setBindState = "RB_setBindState";
    public static final String _RB_setBindState_ARG_BindState = "BindState";

    //-------------------------------------------------------
    // Property Name (2)
    //-------------------------------------------------------
    public static final String PROPERTY_RB_BindToken = "RB_BindToken";
    public static final String PROPERTY_A_ARG_TYPE_BindState = "A_ARG_TYPE_BindState";

    //-------------------------------------------------------
    // Property value defined (0)
    //-------------------------------------------------------

    //-------------------------------------------------------
    // ActionList (1)
    //-------------------------------------------------------

    public interface RB_setBindState_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void RB_setBindState(Integer BindState, final RB_setBindState_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_RB_setBindState);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_RB_setBindState_ARG_BindState, BindState, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onRB_BindTokenChanged(String currentValue);
    }

    public void subscribe(final CompletionHandler handler, final EventListener listener) throws UpnpException {
        if (this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_SUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (listener == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }


        UpnpManager.getInstance().getControlPoint().subscribe(this.service,
            new UpnpCompletionHandler() {

                 @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            },
            new UpnpEventListener() {
                @Override
                public void onSubscriptionExpired(String serviceId) {
                    listener.onSubscriptionExpired();
                }

                @Override
                public void onEvent(String serviceId, List<PropertyChanged> list) {
                    for (PropertyChanged c : list) {
                        if (c.getName().equals(PROPERTY_RB_BindToken)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_RB_BindToken);
                            listener.onRB_BindTokenChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                    }
                }
            });
    }

    public void unsubscribe(final CompletionHandler handler) throws UpnpException {
        if (! this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_UNSUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().unsubscribe(this.service,
            new UpnpCompletionHandler() {
                @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            });
    }

}
