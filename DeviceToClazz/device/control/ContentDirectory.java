/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.mediaserver;

import android.util.Log;

import java.util.List;

import upnp.typedef.error.UpnpError;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.PropertyChanged;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.ActionInfoCreator;
import upnp.typedef.exception.UpnpException;
import upnp.typedef.datatype.DataType;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;

import upnps.manager.UpnpManager;
import upnps.manager.ctrlpoint.device.AbstractService;
import upnps.manager.handler.MyCompletionHandler;
import upnps.manager.handler.MyEventListener;
import upnps.manager.handler.MyInvokeCompletionHandler;

public class ContentDirectory extends AbstractService {

    private static final String TAG = "ContentDirectory";

    public ContentDirectory(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (7)
    //-------------------------------------------------------
    public static final String ACTION_UpdateObject = "UpdateObject";
    public static final String _UpdateObject_ARG_ObjectID = "ObjectID";
    public static final String _UpdateObject_ARG_CurrentTagValue = "CurrentTagValue";
    public static final String _UpdateObject_ARG_NewTagValue = "NewTagValue";
    public static final String ACTION_GetSearchCapabilities = "GetSearchCapabilities";
    public static final String _GetSearchCapabilities_ARG_SearchCaps = "SearchCaps";
    public static final String ACTION_Search = "Search";
    public static final String _Search_ARG_ContainerID = "ContainerID";
    public static final String _Search_ARG_SearchCriteria = "SearchCriteria";
    public static final String _Search_ARG_Filter = "Filter";
    public static final String _Search_ARG_StartingIndex = "StartingIndex";
    public static final String _Search_ARG_RequestedCount = "RequestedCount";
    public static final String _Search_ARG_SortCriteria = "SortCriteria";
    public static final String _Search_ARG_Result = "Result";
    public static final String _Search_ARG_NumberReturned = "NumberReturned";
    public static final String _Search_ARG_TotalMatches = "TotalMatches";
    public static final String _Search_ARG_UpdateID = "UpdateID";
    public static final String ACTION_X_GetRemoteSharingStatus = "X_GetRemoteSharingStatus";
    public static final String _X_GetRemoteSharingStatus_ARG_Status = "Status";
    public static final String ACTION_GetSortCapabilities = "GetSortCapabilities";
    public static final String _GetSortCapabilities_ARG_SortCaps = "SortCaps";
    public static final String ACTION_GetSystemUpdateID = "GetSystemUpdateID";
    public static final String _GetSystemUpdateID_ARG_Id = "Id";
    public static final String ACTION_Browse = "Browse";
    public static final String _Browse_ARG_ObjectID = "ObjectID";
    public static final String _Browse_ARG_BrowseFlag = "BrowseFlag";
    public static final String _Browse_ARG_Filter = "Filter";
    public static final String _Browse_ARG_StartingIndex = "StartingIndex";
    public static final String _Browse_ARG_RequestedCount = "RequestedCount";
    public static final String _Browse_ARG_SortCriteria = "SortCriteria";
    public static final String _Browse_ARG_Result = "Result";
    public static final String _Browse_ARG_NumberReturned = "NumberReturned";
    public static final String _Browse_ARG_TotalMatches = "TotalMatches";
    public static final String _Browse_ARG_UpdateID = "UpdateID";

    //-------------------------------------------------------
    // Property Name (15)
    //-------------------------------------------------------
    public static final String PROPERTY_SystemUpdateID = "SystemUpdateID";
    public static final String PROPERTY_ContainerUpdateIDs = "ContainerUpdateIDs";
    public static final String PROPERTY_A_ARG_TYPE_BrowseFlag = "A_ARG_TYPE_BrowseFlag";
    public static final String PROPERTY_SearchCapabilities = "SearchCapabilities";
    public static final String PROPERTY_A_ARG_TYPE_Filter = "A_ARG_TYPE_Filter";
    public static final String PROPERTY_A_ARG_TYPE_TagValueList = "A_ARG_TYPE_TagValueList";
    public static final String PROPERTY_A_ARG_TYPE_ObjectID = "A_ARG_TYPE_ObjectID";
    public static final String PROPERTY_X_RemoteSharingEnabled = "X_RemoteSharingEnabled";
    public static final String PROPERTY_A_ARG_TYPE_Count = "A_ARG_TYPE_Count";
    public static final String PROPERTY_A_ARG_TYPE_Index = "A_ARG_TYPE_Index";
    public static final String PROPERTY_A_ARG_TYPE_SortCriteria = "A_ARG_TYPE_SortCriteria";
    public static final String PROPERTY_SortCapabilities = "SortCapabilities";
    public static final String PROPERTY_A_ARG_TYPE_UpdateID = "A_ARG_TYPE_UpdateID";
    public static final String PROPERTY_A_ARG_TYPE_SearchCriteria = "A_ARG_TYPE_SearchCriteria";
    public static final String PROPERTY_A_ARG_TYPE_Result = "A_ARG_TYPE_Result";

    //-------------------------------------------------------
    // Property value defined (1)
    //-------------------------------------------------------

    public enum A_ARG_TYPE_BrowseFlag {
        UNDEFINED,
        V_BrowseMetadata,
        V_BrowseDirectChildren;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_BrowseMetadata = "BrowseMetadata";
        private static final String CONST_V_BrowseDirectChildren = "BrowseDirectChildren";

        public static A_ARG_TYPE_BrowseFlag retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_BrowseMetadata)) {
                return V_BrowseMetadata;
            }

            if (value.equals(CONST_V_BrowseDirectChildren)) {
                return V_BrowseDirectChildren;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_BrowseMetadata:
                    value = CONST_V_BrowseMetadata;
                    break;

                case V_BrowseDirectChildren:
                    value = CONST_V_BrowseDirectChildren;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (7)
    //-------------------------------------------------------

    public interface UpdateObject_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void UpdateObject(String ObjectID, String CurrentTagValue, String NewTagValue, final UpdateObject_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_UpdateObject);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_UpdateObject_ARG_ObjectID, ObjectID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_UpdateObject_ARG_CurrentTagValue, CurrentTagValue, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_UpdateObject_ARG_NewTagValue, NewTagValue, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface GetSearchCapabilities_CompletedHandler {
        void onSucceed(String theSearchCaps);
        void onFailed(UpnpError error);
    }

    public void GetSearchCapabilities(final GetSearchCapabilities_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetSearchCapabilities);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pSearchCaps = invocation.getResult(_GetSearchCapabilities_ARG_SearchCaps);
                    if (pSearchCaps == null) {
                        Log.d(TAG, String.format("%s not found", _GetSearchCapabilities_ARG_SearchCaps));
                        break;
                    }

                    String theSearchCaps = (String) pSearchCaps.getCurrentValue();

                    handler.onSucceed(theSearchCaps);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface Search_CompletedHandler {
        void onSucceed(String theResult,
                       Long theNumberReturned,
                       Long theTotalMatches,
                       Long theUpdateID);
        void onFailed(UpnpError error);
    }

    public void Search(String ContainerID, String SearchCriteria, String Filter, Long StartingIndex, Long RequestedCount, String SortCriteria, final Search_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_Search);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_Search_ARG_ContainerID, ContainerID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Search_ARG_SearchCriteria, SearchCriteria, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Search_ARG_Filter, Filter, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Search_ARG_StartingIndex, StartingIndex, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Search_ARG_RequestedCount, RequestedCount, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Search_ARG_SortCriteria, SortCriteria, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pResult = invocation.getResult(_Search_ARG_Result);
                    if (pResult == null) {
                        Log.d(TAG, String.format("%s not found", _Search_ARG_Result));
                        break;
                    }

                    Property pNumberReturned = invocation.getResult(_Search_ARG_NumberReturned);
                    if (pNumberReturned == null) {
                        Log.d(TAG, String.format("%s not found", _Search_ARG_NumberReturned));
                        break;
                    }

                    Property pTotalMatches = invocation.getResult(_Search_ARG_TotalMatches);
                    if (pTotalMatches == null) {
                        Log.d(TAG, String.format("%s not found", _Search_ARG_TotalMatches));
                        break;
                    }

                    Property pUpdateID = invocation.getResult(_Search_ARG_UpdateID);
                    if (pUpdateID == null) {
                        Log.d(TAG, String.format("%s not found", _Search_ARG_UpdateID));
                        break;
                    }

                    String theResult = (String) pResult.getCurrentValue();
                    Long theNumberReturned = (Long) pNumberReturned.getCurrentValue();
                    Long theTotalMatches = (Long) pTotalMatches.getCurrentValue();
                    Long theUpdateID = (Long) pUpdateID.getCurrentValue();

                    handler.onSucceed(theResult,
                            theNumberReturned,
                            theTotalMatches,
                            theUpdateID);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface X_GetRemoteSharingStatus_CompletedHandler {
        void onSucceed(Boolean theStatus);
        void onFailed(UpnpError error);
    }

    public void X_GetRemoteSharingStatus(final X_GetRemoteSharingStatus_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_X_GetRemoteSharingStatus);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pStatus = invocation.getResult(_X_GetRemoteSharingStatus_ARG_Status);
                    if (pStatus == null) {
                        Log.d(TAG, String.format("%s not found", _X_GetRemoteSharingStatus_ARG_Status));
                        break;
                    }

                    Boolean theStatus = (Boolean) pStatus.getCurrentValue();

                    handler.onSucceed(theStatus);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface GetSortCapabilities_CompletedHandler {
        void onSucceed(String theSortCaps);
        void onFailed(UpnpError error);
    }

    public void GetSortCapabilities(final GetSortCapabilities_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetSortCapabilities);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pSortCaps = invocation.getResult(_GetSortCapabilities_ARG_SortCaps);
                    if (pSortCaps == null) {
                        Log.d(TAG, String.format("%s not found", _GetSortCapabilities_ARG_SortCaps));
                        break;
                    }

                    String theSortCaps = (String) pSortCaps.getCurrentValue();

                    handler.onSucceed(theSortCaps);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface GetSystemUpdateID_CompletedHandler {
        void onSucceed(Long theId);
        void onFailed(UpnpError error);
    }

    public void GetSystemUpdateID(final GetSystemUpdateID_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetSystemUpdateID);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pId = invocation.getResult(_GetSystemUpdateID_ARG_Id);
                    if (pId == null) {
                        Log.d(TAG, String.format("%s not found", _GetSystemUpdateID_ARG_Id));
                        break;
                    }

                    Long theId = (Long) pId.getCurrentValue();

                    handler.onSucceed(theId);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface Browse_CompletedHandler {
        void onSucceed(String theResult,
                       Long theNumberReturned,
                       Long theTotalMatches,
                       Long theUpdateID);
        void onFailed(UpnpError error);
    }

    public void Browse(String ObjectID, A_ARG_TYPE_BrowseFlag BrowseFlag, String Filter, Long StartingIndex, Long RequestedCount, String SortCriteria, final Browse_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_Browse);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_Browse_ARG_ObjectID, ObjectID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Browse_ARG_BrowseFlag, BrowseFlag.getValue(), Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Browse_ARG_Filter, Filter, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Browse_ARG_StartingIndex, StartingIndex, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Browse_ARG_RequestedCount, RequestedCount, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_Browse_ARG_SortCriteria, SortCriteria, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pResult = invocation.getResult(_Browse_ARG_Result);
                    if (pResult == null) {
                        Log.d(TAG, String.format("%s not found", _Browse_ARG_Result));
                        break;
                    }

                    Property pNumberReturned = invocation.getResult(_Browse_ARG_NumberReturned);
                    if (pNumberReturned == null) {
                        Log.d(TAG, String.format("%s not found", _Browse_ARG_NumberReturned));
                        break;
                    }

                    Property pTotalMatches = invocation.getResult(_Browse_ARG_TotalMatches);
                    if (pTotalMatches == null) {
                        Log.d(TAG, String.format("%s not found", _Browse_ARG_TotalMatches));
                        break;
                    }

                    Property pUpdateID = invocation.getResult(_Browse_ARG_UpdateID);
                    if (pUpdateID == null) {
                        Log.d(TAG, String.format("%s not found", _Browse_ARG_UpdateID));
                        break;
                    }

                    String theResult = (String) pResult.getCurrentValue();
                    Long theNumberReturned = (Long) pNumberReturned.getCurrentValue();
                    Long theTotalMatches = (Long) pTotalMatches.getCurrentValue();
                    Long theUpdateID = (Long) pUpdateID.getCurrentValue();

                    handler.onSucceed(theResult,
                            theNumberReturned,
                            theTotalMatches,
                            theUpdateID);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onSystemUpdateIDChanged(Long currentValue);
        void onContainerUpdateIDsChanged(String currentValue);
        void onX_RemoteSharingEnabledChanged(Boolean currentValue);
    }

    public void subscribe(final CompletionHandler handler, final EventListener listener) throws UpnpException {
        if (this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_SUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (listener == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }


        UpnpManager.getControlPoint().subscribe(this.service,
            new MyCompletionHandler() {

                 @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            },
            new MyEventListener() {
                @Override
                public void onSubscriptionExpired(String serviceId) {
                    listener.onSubscriptionExpired();
                }

                @Override
                public void onEvent(String serviceId, List<PropertyChanged> list) {
                    for (PropertyChanged c : list) {
                        if (c.getName().equals(PROPERTY_SystemUpdateID)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_SystemUpdateID);
                            listener.onSystemUpdateIDChanged((Long)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_ContainerUpdateIDs)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_ContainerUpdateIDs);
                            listener.onContainerUpdateIDsChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_X_RemoteSharingEnabled)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_X_RemoteSharingEnabled);
                            listener.onX_RemoteSharingEnabledChanged((Boolean)def.getDataType().toObjectValue(c.getValue()));
                        }
                    }
                }
            });
    }

    public void unsubscribe(final CompletionHandler handler) throws UpnpException {
        if (! this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_UNSUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().unsubscribe(this.service,
            new MyCompletionHandler() {
                @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            });
    }

}
