/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.avplayer;

import android.util.Log;

import java.util.List;

import upnp.typedef.error.UpnpError;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.PropertyChanged;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.ActionInfoCreator;
import upnp.typedef.exception.UpnpException;
import upnp.typedef.datatype.DataType;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;

import upnps.manager.UpnpManager;
import upnps.manager.ctrlpoint.device.AbstractService;
import upnps.manager.handler.MyCompletionHandler;
import upnps.manager.handler.MyEventListener;
import upnps.manager.handler.MyInvokeCompletionHandler;

public class RenderingControl extends AbstractService {

    private static final String TAG = "RenderingControl";

    public RenderingControl(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (6)
    //-------------------------------------------------------
    public static final String ACTION_ListPresets = "ListPresets";
    public static final String _ListPresets_ARG_InstanceID = "InstanceID";
    public static final String _ListPresets_ARG_CurrentPresetNameList = "CurrentPresetNameList";
    public static final String ACTION_SetVolume = "SetVolume";
    public static final String _SetVolume_ARG_InstanceID = "InstanceID";
    public static final String _SetVolume_ARG_Channel = "Channel";
    public static final String _SetVolume_ARG_DesiredVolume = "DesiredVolume";
    public static final String ACTION_SetMute = "SetMute";
    public static final String _SetMute_ARG_InstanceID = "InstanceID";
    public static final String _SetMute_ARG_Channel = "Channel";
    public static final String _SetMute_ARG_DesiredMute = "DesiredMute";
    public static final String ACTION_GetVolume = "GetVolume";
    public static final String _GetVolume_ARG_InstanceID = "InstanceID";
    public static final String _GetVolume_ARG_Channel = "Channel";
    public static final String _GetVolume_ARG_CurrentVolume = "CurrentVolume";
    public static final String ACTION_GetMute = "GetMute";
    public static final String _GetMute_ARG_InstanceID = "InstanceID";
    public static final String _GetMute_ARG_Channel = "Channel";
    public static final String _GetMute_ARG_CurrentMute = "CurrentMute";
    public static final String ACTION_SelectPreset = "SelectPreset";
    public static final String _SelectPreset_ARG_InstanceID = "InstanceID";
    public static final String _SelectPreset_ARG_PresetName = "PresetName";

    //-------------------------------------------------------
    // Property Name (7)
    //-------------------------------------------------------
    public static final String PROPERTY_PresetNameList = "PresetNameList";
    public static final String PROPERTY_Volume = "Volume";
    public static final String PROPERTY_Mute = "Mute";
    public static final String PROPERTY_A_ARG_TYPE_PresetName = "A_ARG_TYPE_PresetName";
    public static final String PROPERTY_A_ARG_TYPE_InstanceID = "A_ARG_TYPE_InstanceID";
    public static final String PROPERTY_A_ARG_TYPE_Channel = "A_ARG_TYPE_Channel";
    public static final String PROPERTY_LastChange = "LastChange";

    //-------------------------------------------------------
    // Property value defined (3)
    //-------------------------------------------------------

    public enum PresetNameList {
        UNDEFINED,
        V_FactoryDefaults;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_FactoryDefaults = "FactoryDefaults";

        public static PresetNameList retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_FactoryDefaults)) {
                return V_FactoryDefaults;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_FactoryDefaults:
                    value = CONST_V_FactoryDefaults;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_PresetName {
        UNDEFINED,
        V_FactoryDefaults;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_FactoryDefaults = "FactoryDefaults";

        public static A_ARG_TYPE_PresetName retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_FactoryDefaults)) {
                return V_FactoryDefaults;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_FactoryDefaults:
                    value = CONST_V_FactoryDefaults;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_Channel {
        UNDEFINED,
        V_Master;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Master = "Master";

        public static A_ARG_TYPE_Channel retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Master)) {
                return V_Master;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Master:
                    value = CONST_V_Master;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (6)
    //-------------------------------------------------------

    public interface ListPresets_CompletedHandler {
        void onSucceed(PresetNameList theCurrentPresetNameList);
        void onFailed(UpnpError error);
    }

    public void ListPresets(Long InstanceID, final ListPresets_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_ListPresets);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_ListPresets_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pCurrentPresetNameList = invocation.getResult(_ListPresets_ARG_CurrentPresetNameList);
                    if (pCurrentPresetNameList == null) {
                        Log.d(TAG, String.format("%s not found", _ListPresets_ARG_CurrentPresetNameList));
                        break;
                    }

                    PresetNameList theCurrentPresetNameList = PresetNameList.retrieveType(pCurrentPresetNameList.getCurrentValue().toString());

                    handler.onSucceed(theCurrentPresetNameList);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface SetVolume_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void SetVolume(Long InstanceID, A_ARG_TYPE_Channel Channel, Integer DesiredVolume, final SetVolume_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_SetVolume);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_SetVolume_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_SetVolume_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_SetVolume_ARG_DesiredVolume, DesiredVolume, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface SetMute_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void SetMute(Long InstanceID, A_ARG_TYPE_Channel Channel, Boolean DesiredMute, final SetMute_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_SetMute);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_SetMute_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_SetMute_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_SetMute_ARG_DesiredMute, DesiredMute, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface GetVolume_CompletedHandler {
        void onSucceed(Integer theCurrentVolume);
        void onFailed(UpnpError error);
    }

    public void GetVolume(Long InstanceID, A_ARG_TYPE_Channel Channel, final GetVolume_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetVolume);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_GetVolume_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_GetVolume_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pCurrentVolume = invocation.getResult(_GetVolume_ARG_CurrentVolume);
                    if (pCurrentVolume == null) {
                        Log.d(TAG, String.format("%s not found", _GetVolume_ARG_CurrentVolume));
                        break;
                    }

                    Integer theCurrentVolume = (Integer) pCurrentVolume.getCurrentValue();

                    handler.onSucceed(theCurrentVolume);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface GetMute_CompletedHandler {
        void onSucceed(Boolean theCurrentMute);
        void onFailed(UpnpError error);
    }

    public void GetMute(Long InstanceID, A_ARG_TYPE_Channel Channel, final GetMute_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetMute);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_GetMute_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_GetMute_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pCurrentMute = invocation.getResult(_GetMute_ARG_CurrentMute);
                    if (pCurrentMute == null) {
                        Log.d(TAG, String.format("%s not found", _GetMute_ARG_CurrentMute));
                        break;
                    }

                    Boolean theCurrentMute = (Boolean) pCurrentMute.getCurrentValue();

                    handler.onSucceed(theCurrentMute);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface SelectPreset_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void SelectPreset(Long InstanceID, A_ARG_TYPE_PresetName PresetName, final SelectPreset_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_SelectPreset);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_SelectPreset_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_SelectPreset_ARG_PresetName, PresetName.getValue(), Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getControlPoint().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

}
