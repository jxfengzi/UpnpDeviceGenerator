/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.mediarenderer;

import android.os.Parcel;
import android.util.Log;

import upnps.api.manager.ctrlpoint.device.AbstractDevice;
import upnp.typedef.device.Device;
import upnp.typedef.device.Service;

public class MediaRenderer extends AbstractDevice {

    private static final String TAG = MediaRenderer.class.getSimpleName();
    /**
     * deviceType & serviceType
     */
    public static final String DEVICE_TYPE = "MediaRenderer";
    public static final String SERVICE_AVTransport = "AVTransport";
    public static final String SERVICE_ConnectionManager = "ConnectionManager";
    public static final String SERVICE_RenderingControl = "RenderingControl";

    /**
     * serviceId
     */
    private static final String ID_AVTransport = "urn:upnp-org:serviceId:AVTransport";
    private static final String ID_ConnectionManager = "urn:upnp-org:serviceId:ConnectionManager";
    private static final String ID_RenderingControl = "urn:upnp-org:serviceId:RenderingControl";

    /**
     * services
     */

    private AVTransport _AVTransport;
    private ConnectionManager _ConnectionManager;
    private RenderingControl _RenderingControl;

    public AVTransport getAVTransport() {
        return _AVTransport;
    }
    public ConnectionManager getConnectionManager() {
        return _ConnectionManager;
    }
    public RenderingControl getRenderingControl() {
        return _RenderingControl;
    }

    private static final Object classLock = MediaRenderer.class;

    public static MediaRenderer create(Device device) {
        Log.d(TAG, "create");

        synchronized (classLock) {
            MediaRenderer thiz = new MediaRenderer(device);

            do {
                if (! DEVICE_TYPE.equals(device.getDeviceType().getName())) {
                    Log.d(TAG, "deviceType invalid: " + device.getDeviceType());
                    thiz = null;
                    break;
                }

                if (! thiz.initialize()) {
                    Log.d(TAG, "initialize failed");
                    thiz = null;
                    break;
                }
            } while (false);

            return thiz;
        }
    }

    private MediaRenderer(Device device) {
        this.device = device;
    }

    private boolean initialize() {
        boolean ret = false;

        do {
            Service theAVTransport = device.getService(ID_AVTransport);
            if (theAVTransport == null) {
                Log.d(TAG, "service not found: " + ID_AVTransport);
                break;
            }

            Service theConnectionManager = device.getService(ID_ConnectionManager);
            if (theConnectionManager == null) {
                Log.d(TAG, "service not found: " + ID_ConnectionManager);
                break;
            }

            Service theRenderingControl = device.getService(ID_RenderingControl);
            if (theRenderingControl == null) {
                Log.d(TAG, "service not found: " + ID_RenderingControl);
                break;
            }

            _AVTransport = new AVTransport(theAVTransport);
            _ConnectionManager = new ConnectionManager(theConnectionManager);
            _RenderingControl = new RenderingControl(theRenderingControl);

            ret = true;
        } while (false);

        return ret;
    }

    public static final Creator<MediaRenderer> CREATOR = new Creator<MediaRenderer>() {

        @Override
        public MediaRenderer createFromParcel(Parcel in) {
            return new MediaRenderer(in);
        }

        @Override
        public MediaRenderer[] newArray(int size) {
            return new MediaRenderer[size];
         }
    };

    private MediaRenderer(Parcel in) {
        readFromParcel(in);
    }

    public void readFromParcel(Parcel in) {
        device = in.readParcelable(Device.class.getClassLoader());
        initialize();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel out, int flags) {
        out.writeParcelable(device, flags);
    }
}
