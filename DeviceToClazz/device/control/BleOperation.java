/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.mitv;

import android.util.Log;

import java.util.List;

import miui.upnp.typedef.device.urn.ServiceType;
import miui.upnp.typedef.error.UpnpError;
import miui.upnp.typedef.device.Argument;
import miui.upnp.typedef.device.Service;
import miui.upnp.typedef.device.PropertyChanged;
import miui.upnp.typedef.device.invocation.ActionInfo;
import miui.upnp.typedef.device.invocation.ActionInfoCreator;
import miui.upnp.typedef.exception.UpnpException;
import miui.upnp.typedef.datatype.DataType;
import miui.upnp.typedef.property.Property;
import miui.upnp.typedef.property.PropertyDefinition;

import miui.upnp.manager.UpnpManager;
import miui.upnp.manager.ctrlpoint.AbstractService;
import miui.upnp.manager.handler.UpnpCompletionHandler;
import miui.upnp.manager.handler.UpnpEventListener;
import miui.upnp.manager.handler.UpnpInvokeCompletionHandler;

public class BleOperation extends AbstractService {

    private static final String TAG = "BleOperation";
    private static final ServiceType SERVICE_TYPE =  new ServiceType("BleOperation", "0.1");

    public BleOperation(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (10)
    //-------------------------------------------------------
    public static final String ACTION_BW_EnableCharacteristicNotification = "BW_EnableCharacteristicNotification";
    public static final String _BW_EnableCharacteristicNotification_ARG_BleDevice = "BleDevice";
    public static final String _BW_EnableCharacteristicNotification_ARG_BleService = "BleService";
    public static final String _BW_EnableCharacteristicNotification_ARG_BleCharacteristic = "BleCharacteristic";
    public static final String ACTION_BW_GetConnectedDevices = "BW_GetConnectedDevices";
    public static final String _BW_GetConnectedDevices_ARG_RetConnectedDevices = "RetConnectedDevices";
    public static final String ACTION_BW_StartScan = "BW_StartScan";
    public static final String _BW_StartScan_ARG_Filter = "Filter";
    public static final String ACTION_BW_KeepAlive = "BW_KeepAlive";
    public static final String _BW_KeepAlive_ARG_BleDevice = "BleDevice";
    public static final String _BW_KeepAlive_ARG_IsAlive = "IsAlive";
    public static final String ACTION_BW_WriteCharacteristic = "BW_WriteCharacteristic";
    public static final String _BW_WriteCharacteristic_ARG_BleDevice = "BleDevice";
    public static final String _BW_WriteCharacteristic_ARG_BleService = "BleService";
    public static final String _BW_WriteCharacteristic_ARG_BleCharacteristic = "BleCharacteristic";
    public static final String _BW_WriteCharacteristic_ARG_Data = "Data";
    public static final String ACTION_BW_DisableCharacteristicNotification = "BW_DisableCharacteristicNotification";
    public static final String _BW_DisableCharacteristicNotification_ARG_BleDevice = "BleDevice";
    public static final String _BW_DisableCharacteristicNotification_ARG_BleService = "BleService";
    public static final String _BW_DisableCharacteristicNotification_ARG_BleCharacteristic = "BleCharacteristic";
    public static final String ACTION_BW_ReadCharacteristic = "BW_ReadCharacteristic";
    public static final String _BW_ReadCharacteristic_ARG_BleDevice = "BleDevice";
    public static final String _BW_ReadCharacteristic_ARG_BleService = "BleService";
    public static final String _BW_ReadCharacteristic_ARG_BleCharacteristic = "BleCharacteristic";
    public static final String ACTION_BW_DiscoverServices = "BW_DiscoverServices";
    public static final String _BW_DiscoverServices_ARG_BleDevice = "BleDevice";
    public static final String ACTION_BW_GetAvaliableDevices = "BW_GetAvaliableDevices";
    public static final String _BW_GetAvaliableDevices_ARG_RetAvaliableDevices = "RetAvaliableDevices";
    public static final String ACTION_BW_StopScan = "BW_StopScan";

    //-------------------------------------------------------
    // Property Name (13)
    //-------------------------------------------------------
    public static final String PROPERTY_A_ARG_TYPE_BleService = "A_ARG_TYPE_BleService";
    public static final String PROPERTY_A_ARG_TYPE_IsAlive = "A_ARG_TYPE_IsAlive";
    public static final String PROPERTY_A_ARG_TYPE_Filter = "A_ARG_TYPE_Filter";
    public static final String PROPERTY_BW_CharacteristicReaded = "BW_CharacteristicReaded";
    public static final String PROPERTY_A_ARG_TYPE_Data = "A_ARG_TYPE_Data";
    public static final String PROPERTY_BW_ScanResult = "BW_ScanResult";
    public static final String PROPERTY_BW_DiscoveredServices = "BW_DiscoveredServices";
    public static final String PROPERTY_A_ARG_TYPE_BleCharacteristic = "A_ARG_TYPE_BleCharacteristic";
    public static final String PROPERTY_BW_CharacteristicWrited = "BW_CharacteristicWrited";
    public static final String PROPERTY_A_ARG_TYPE_BleDevices = "A_ARG_TYPE_BleDevices";
    public static final String PROPERTY_BW_ConnectionState = "BW_ConnectionState";
    public static final String PROPERTY_A_ARG_TYPE_BleDevice = "A_ARG_TYPE_BleDevice";
    public static final String PROPERTY_BW_CharacteristicNotified = "BW_CharacteristicNotified";

    //-------------------------------------------------------
    // Property value defined (0)
    //-------------------------------------------------------

    //-------------------------------------------------------
    // ActionList (10)
    //-------------------------------------------------------

    public interface BW_EnableCharacteristicNotification_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_EnableCharacteristicNotification(String BleDevice, String BleService, String BleCharacteristic, final BW_EnableCharacteristicNotification_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_EnableCharacteristicNotification);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_BW_EnableCharacteristicNotification_ARG_BleDevice, BleDevice, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_EnableCharacteristicNotification_ARG_BleService, BleService, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_EnableCharacteristicNotification_ARG_BleCharacteristic, BleCharacteristic, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_GetConnectedDevices_CompletedHandler {
        void onSucceed(String theRetConnectedDevices);
        void onFailed(UpnpError error);
    }

    public void BW_GetConnectedDevices(final BW_GetConnectedDevices_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_GetConnectedDevices);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pRetConnectedDevices = invocation.getResult(_BW_GetConnectedDevices_ARG_RetConnectedDevices);
                    if (pRetConnectedDevices == null) {
                        Log.d(TAG, String.format("%s not found", _BW_GetConnectedDevices_ARG_RetConnectedDevices));
                        break;
                    }

                    String theRetConnectedDevices = (String) pRetConnectedDevices.getCurrentValue();

                    handler.onSucceed(theRetConnectedDevices);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_StartScan_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_StartScan(String Filter, final BW_StartScan_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_StartScan);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_BW_StartScan_ARG_Filter, Filter, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_KeepAlive_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_KeepAlive(String BleDevice, Boolean IsAlive, final BW_KeepAlive_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_KeepAlive);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_BW_KeepAlive_ARG_BleDevice, BleDevice, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_KeepAlive_ARG_IsAlive, IsAlive, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_WriteCharacteristic_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_WriteCharacteristic(String BleDevice, String BleService, String BleCharacteristic, String Data, final BW_WriteCharacteristic_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_WriteCharacteristic);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_BW_WriteCharacteristic_ARG_BleDevice, BleDevice, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_WriteCharacteristic_ARG_BleService, BleService, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_WriteCharacteristic_ARG_BleCharacteristic, BleCharacteristic, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_WriteCharacteristic_ARG_Data, Data, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_DisableCharacteristicNotification_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_DisableCharacteristicNotification(String BleDevice, String BleService, String BleCharacteristic, final BW_DisableCharacteristicNotification_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_DisableCharacteristicNotification);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_BW_DisableCharacteristicNotification_ARG_BleDevice, BleDevice, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_DisableCharacteristicNotification_ARG_BleService, BleService, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_DisableCharacteristicNotification_ARG_BleCharacteristic, BleCharacteristic, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_ReadCharacteristic_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_ReadCharacteristic(String BleDevice, String BleService, String BleCharacteristic, final BW_ReadCharacteristic_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_ReadCharacteristic);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_BW_ReadCharacteristic_ARG_BleDevice, BleDevice, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_ReadCharacteristic_ARG_BleService, BleService, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (!action.setArgumentValue(_BW_ReadCharacteristic_ARG_BleCharacteristic, BleCharacteristic, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_DiscoverServices_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_DiscoverServices(String BleDevice, final BW_DiscoverServices_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_DiscoverServices);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_BW_DiscoverServices_ARG_BleDevice, BleDevice, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_GetAvaliableDevices_CompletedHandler {
        void onSucceed(String theRetAvaliableDevices);
        void onFailed(UpnpError error);
    }

    public void BW_GetAvaliableDevices(final BW_GetAvaliableDevices_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_GetAvaliableDevices);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pRetAvaliableDevices = invocation.getResult(_BW_GetAvaliableDevices_ARG_RetAvaliableDevices);
                    if (pRetAvaliableDevices == null) {
                        Log.d(TAG, String.format("%s not found", _BW_GetAvaliableDevices_ARG_RetAvaliableDevices));
                        break;
                    }

                    String theRetAvaliableDevices = (String) pRetAvaliableDevices.getCurrentValue();

                    handler.onSucceed(theRetAvaliableDevices);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface BW_StopScan_CompletedHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public void BW_StopScan(final BW_StopScan_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_BW_StopScan);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getInstance().getControlPoint().invoke(action, new UpnpInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                handler.onSucceed();
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onBW_CharacteristicReadedChanged(String currentValue);
        void onBW_ScanResultChanged(String currentValue);
        void onBW_DiscoveredServicesChanged(String currentValue);
        void onBW_CharacteristicWritedChanged(String currentValue);
        void onBW_ConnectionStateChanged(String currentValue);
        void onBW_CharacteristicNotifiedChanged(String currentValue);
    }

    public void subscribe(final CompletionHandler handler, final EventListener listener) throws UpnpException {
        if (this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_SUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (listener == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }


        UpnpManager.getInstance().getControlPoint().subscribe(this.service,
            new UpnpCompletionHandler() {

                 @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            },
            new UpnpEventListener() {
                @Override
                public void onSubscriptionExpired(String serviceId) {
                    listener.onSubscriptionExpired();
                }

                @Override
                public void onEvent(String serviceId, List<PropertyChanged> list) {
                    for (PropertyChanged c : list) {
                        if (c.getName().equals(PROPERTY_BW_CharacteristicReaded)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_BW_CharacteristicReaded);
                            listener.onBW_CharacteristicReadedChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_BW_ScanResult)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_BW_ScanResult);
                            listener.onBW_ScanResultChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_BW_DiscoveredServices)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_BW_DiscoveredServices);
                            listener.onBW_DiscoveredServicesChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_BW_CharacteristicWrited)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_BW_CharacteristicWrited);
                            listener.onBW_CharacteristicWritedChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_BW_ConnectionState)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_BW_ConnectionState);
                            listener.onBW_ConnectionStateChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_BW_CharacteristicNotified)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_BW_CharacteristicNotified);
                            listener.onBW_CharacteristicNotifiedChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                    }
                }
            });
    }

    public void unsubscribe(final CompletionHandler handler) throws UpnpException {
        if (! this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_UNSUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getInstance().getControlPoint().unsubscribe(this.service,
            new UpnpCompletionHandler() {
                @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            });
    }

}
