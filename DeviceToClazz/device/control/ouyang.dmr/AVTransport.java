/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.mediarenderer;

import android.util.Log;

import java.util.List;

import upnp.typedef.ReturnCode;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.PropertyChanged;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.ActionInfoCreator;
import upnp.typedef.property.DataType;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.ctrlpoint.device.AbstractService;
import upnps.api.manager.handler.MyCompletionHandler;
import upnps.api.manager.handler.MyEventListener;
import upnps.api.manager.handler.MyInvokeCompletionHandler;

public class AVTransport extends AbstractService {

    private static final String TAG = "AVTransport";

    public AVTransport(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (13)
    //-------------------------------------------------------
    public static final String ACTION_Next = "Next";
    public static final String _Next_ARG_InstanceID = "InstanceID";
    public static final String ACTION_Seek = "Seek";
    public static final String _Seek_ARG_InstanceID = "InstanceID";
    public static final String _Seek_ARG_Unit = "Unit";
    public static final String _Seek_ARG_Target = "Target";
    public static final String ACTION_Play = "Play";
    public static final String _Play_ARG_InstanceID = "InstanceID";
    public static final String _Play_ARG_Speed = "Speed";
    public static final String ACTION_GetTransportInfo = "GetTransportInfo";
    public static final String _GetTransportInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportInfo_ARG_CurrentTransportState = "CurrentTransportState";
    public static final String _GetTransportInfo_ARG_CurrentTransportStatus = "CurrentTransportStatus";
    public static final String _GetTransportInfo_ARG_CurrentSpeed = "CurrentSpeed";
    public static final String ACTION_Previous = "Previous";
    public static final String _Previous_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetMediaInfo = "GetMediaInfo";
    public static final String _GetMediaInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetMediaInfo_ARG_NrTracks = "NrTracks";
    public static final String _GetMediaInfo_ARG_MediaDuration = "MediaDuration";
    public static final String _GetMediaInfo_ARG_CurrentURI = "CurrentURI";
    public static final String _GetMediaInfo_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String _GetMediaInfo_ARG_NextURI = "NextURI";
    public static final String _GetMediaInfo_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String _GetMediaInfo_ARG_PlayMedium = "PlayMedium";
    public static final String _GetMediaInfo_ARG_RecordMedium = "RecordMedium";
    public static final String _GetMediaInfo_ARG_WriteStatus = "WriteStatus";
    public static final String ACTION_GetDeviceCapabilities = "GetDeviceCapabilities";
    public static final String _GetDeviceCapabilities_ARG_InstanceID = "InstanceID";
    public static final String _GetDeviceCapabilities_ARG_PlayMedia = "PlayMedia";
    public static final String _GetDeviceCapabilities_ARG_RecMedia = "RecMedia";
    public static final String _GetDeviceCapabilities_ARG_RecQualityModes = "RecQualityModes";
    public static final String ACTION_Pause = "Pause";
    public static final String _Pause_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetCurrentTransportActions = "GetCurrentTransportActions";
    public static final String _GetCurrentTransportActions_ARG_InstanceID = "InstanceID";
    public static final String _GetCurrentTransportActions_ARG_Actions = "Actions";
    public static final String ACTION_SetAVTransportURI = "SetAVTransportURI";
    public static final String _SetAVTransportURI_ARG_InstanceID = "InstanceID";
    public static final String _SetAVTransportURI_ARG_CurrentURI = "CurrentURI";
    public static final String _SetAVTransportURI_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String ACTION_GetPositionInfo = "GetPositionInfo";
    public static final String _GetPositionInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetPositionInfo_ARG_Track = "Track";
    public static final String _GetPositionInfo_ARG_TrackDuration = "TrackDuration";
    public static final String _GetPositionInfo_ARG_TrackMetaData = "TrackMetaData";
    public static final String _GetPositionInfo_ARG_TrackURI = "TrackURI";
    public static final String _GetPositionInfo_ARG_RelTime = "RelTime";
    public static final String _GetPositionInfo_ARG_AbsTime = "AbsTime";
    public static final String _GetPositionInfo_ARG_RelCount = "RelCount";
    public static final String _GetPositionInfo_ARG_AbsCount = "AbsCount";
    public static final String ACTION_Stop = "Stop";
    public static final String _Stop_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetTransportSettings = "GetTransportSettings";
    public static final String _GetTransportSettings_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportSettings_ARG_PlayMode = "PlayMode";
    public static final String _GetTransportSettings_ARG_RecQualityMode = "RecQualityMode";

    //-------------------------------------------------------
    // Property Name (30)
    //-------------------------------------------------------
    public static final String PROPERTY_PossibleRecordStorageMedia = "PossibleRecordStorageMedia";
    public static final String PROPERTY_AbsoluteTimePosition = "AbsoluteTimePosition";
    public static final String PROPERTY_NextAVTransportURI = "NextAVTransportURI";
    public static final String PROPERTY_CurrentTrackDuration = "CurrentTrackDuration";
    public static final String PROPERTY_TransportPlaySpeed = "TransportPlaySpeed";
    public static final String PROPERTY_TransportState = "TransportState";
    public static final String PROPERTY_PossiblePlaybackStorageMedia = "PossiblePlaybackStorageMedia";
    public static final String PROPERTY_A_ARG_TYPE_SeekTarget = "A_ARG_TYPE_SeekTarget";
    public static final String PROPERTY_AVTransportURIMetaData = "AVTransportURIMetaData";
    public static final String PROPERTY_A_ARG_TYPE_InstanceID = "A_ARG_TYPE_InstanceID";
    public static final String PROPERTY_CurrentTrackURI = "CurrentTrackURI";
    public static final String PROPERTY_NumberOfTracks = "NumberOfTracks";
    public static final String PROPERTY_CurrentPlayMode = "CurrentPlayMode";
    public static final String PROPERTY_RecordStorageMedium = "RecordStorageMedium";
    public static final String PROPERTY_TransportStatus = "TransportStatus";
    public static final String PROPERTY_AVTransportURI = "AVTransportURI";
    public static final String PROPERTY_RecordMediumWriteStatus = "RecordMediumWriteStatus";
    public static final String PROPERTY_CurrentTransportActions = "CurrentTransportActions";
    public static final String PROPERTY_PlaybackStorageMedium = "PlaybackStorageMedium";
    public static final String PROPERTY_CurrentTrack = "CurrentTrack";
    public static final String PROPERTY_RelativeTimePosition = "RelativeTimePosition";
    public static final String PROPERTY_AbsoluteCounterPosition = "AbsoluteCounterPosition";
    public static final String PROPERTY_CurrentMediaDuration = "CurrentMediaDuration";
    public static final String PROPERTY_CurrentTrackMetaData = "CurrentTrackMetaData";
    public static final String PROPERTY_NextAVTransportURIMetaData = "NextAVTransportURIMetaData";
    public static final String PROPERTY_RelativeCounterPosition = "RelativeCounterPosition";
    public static final String PROPERTY_PossibleRecordQualityModes = "PossibleRecordQualityModes";
    public static final String PROPERTY_A_ARG_TYPE_SeekMode = "A_ARG_TYPE_SeekMode";
    public static final String PROPERTY_CurrentRecordQualityMode = "CurrentRecordQualityMode";
    public static final String PROPERTY_LastChange = "LastChange";

    //-------------------------------------------------------
    // Property value defined (12)
    //-------------------------------------------------------

    public enum PossibleRecordStorageMedia {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static PossibleRecordStorageMedia retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportPlaySpeed {
        UNDEFINED,
        V_1;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_1 = "1";

        public static TransportPlaySpeed retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_1)) {
                return V_1;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_1:
                    value = CONST_V_1;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportState {
        UNDEFINED,
        V_STOPPED,
        V_PAUSED_PLAYBACK,
        V_PLAYING,
        V_TRANSITIONING,
        V_NO_MEDIA_PRESENT;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_STOPPED = "STOPPED";
        private static final String CONST_V_PAUSED_PLAYBACK = "PAUSED_PLAYBACK";
        private static final String CONST_V_PLAYING = "PLAYING";
        private static final String CONST_V_TRANSITIONING = "TRANSITIONING";
        private static final String CONST_V_NO_MEDIA_PRESENT = "NO_MEDIA_PRESENT";

        public static TransportState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_STOPPED)) {
                return V_STOPPED;
            }

            if (value.equals(CONST_V_PAUSED_PLAYBACK)) {
                return V_PAUSED_PLAYBACK;
            }

            if (value.equals(CONST_V_PLAYING)) {
                return V_PLAYING;
            }

            if (value.equals(CONST_V_TRANSITIONING)) {
                return V_TRANSITIONING;
            }

            if (value.equals(CONST_V_NO_MEDIA_PRESENT)) {
                return V_NO_MEDIA_PRESENT;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_STOPPED:
                    value = CONST_V_STOPPED;
                    break;

                case V_PAUSED_PLAYBACK:
                    value = CONST_V_PAUSED_PLAYBACK;
                    break;

                case V_PLAYING:
                    value = CONST_V_PLAYING;
                    break;

                case V_TRANSITIONING:
                    value = CONST_V_TRANSITIONING;
                    break;

                case V_NO_MEDIA_PRESENT:
                    value = CONST_V_NO_MEDIA_PRESENT;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum PossiblePlaybackStorageMedia {
        UNDEFINED,
        V_UNKNOWN,
        V_CD_DA,
        V_DVD_VIDEO,
        V_HDD,
        V_NETWORK;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_UNKNOWN = "UNKNOWN";
        private static final String CONST_V_CD_DA = "CD-DA";
        private static final String CONST_V_DVD_VIDEO = "DVD-VIDEO";
        private static final String CONST_V_HDD = "HDD";
        private static final String CONST_V_NETWORK = "NETWORK";

        public static PossiblePlaybackStorageMedia retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_UNKNOWN)) {
                return V_UNKNOWN;
            }

            if (value.equals(CONST_V_CD_DA)) {
                return V_CD_DA;
            }

            if (value.equals(CONST_V_DVD_VIDEO)) {
                return V_DVD_VIDEO;
            }

            if (value.equals(CONST_V_HDD)) {
                return V_HDD;
            }

            if (value.equals(CONST_V_NETWORK)) {
                return V_NETWORK;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_UNKNOWN:
                    value = CONST_V_UNKNOWN;
                    break;

                case V_CD_DA:
                    value = CONST_V_CD_DA;
                    break;

                case V_DVD_VIDEO:
                    value = CONST_V_DVD_VIDEO;
                    break;

                case V_HDD:
                    value = CONST_V_HDD;
                    break;

                case V_NETWORK:
                    value = CONST_V_NETWORK;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentPlayMode {
        UNDEFINED,
        V_NORMAL,
        V_SHUFFLE,
        V_REPEAT_ALL;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NORMAL = "NORMAL";
        private static final String CONST_V_SHUFFLE = "SHUFFLE";
        private static final String CONST_V_REPEAT_ALL = "REPEAT_ALL";

        public static CurrentPlayMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NORMAL)) {
                return V_NORMAL;
            }

            if (value.equals(CONST_V_SHUFFLE)) {
                return V_SHUFFLE;
            }

            if (value.equals(CONST_V_REPEAT_ALL)) {
                return V_REPEAT_ALL;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NORMAL:
                    value = CONST_V_NORMAL;
                    break;

                case V_SHUFFLE:
                    value = CONST_V_SHUFFLE;
                    break;

                case V_REPEAT_ALL:
                    value = CONST_V_REPEAT_ALL;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum RecordStorageMedium {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static RecordStorageMedium retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportStatus {
        UNDEFINED,
        V_OK,
        V_ERROR_OCCURRED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";
        private static final String CONST_V_ERROR_OCCURRED = "ERROR_OCCURRED";

        public static TransportStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            if (value.equals(CONST_V_ERROR_OCCURRED)) {
                return V_ERROR_OCCURRED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                case V_ERROR_OCCURRED:
                    value = CONST_V_ERROR_OCCURRED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum RecordMediumWriteStatus {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static RecordMediumWriteStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum PlaybackStorageMedium {
        UNDEFINED,
        V_UNKNOWN,
        V_CD_DA,
        V_DVD_VIDEO,
        V_HDD,
        V_NETWORK;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_UNKNOWN = "UNKNOWN";
        private static final String CONST_V_CD_DA = "CD-DA";
        private static final String CONST_V_DVD_VIDEO = "DVD-VIDEO";
        private static final String CONST_V_HDD = "HDD";
        private static final String CONST_V_NETWORK = "NETWORK";

        public static PlaybackStorageMedium retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_UNKNOWN)) {
                return V_UNKNOWN;
            }

            if (value.equals(CONST_V_CD_DA)) {
                return V_CD_DA;
            }

            if (value.equals(CONST_V_DVD_VIDEO)) {
                return V_DVD_VIDEO;
            }

            if (value.equals(CONST_V_HDD)) {
                return V_HDD;
            }

            if (value.equals(CONST_V_NETWORK)) {
                return V_NETWORK;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_UNKNOWN:
                    value = CONST_V_UNKNOWN;
                    break;

                case V_CD_DA:
                    value = CONST_V_CD_DA;
                    break;

                case V_DVD_VIDEO:
                    value = CONST_V_DVD_VIDEO;
                    break;

                case V_HDD:
                    value = CONST_V_HDD;
                    break;

                case V_NETWORK:
                    value = CONST_V_NETWORK;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum PossibleRecordQualityModes {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static PossibleRecordQualityModes retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_SeekMode {
        UNDEFINED,
        V_ABS_COUNT,
        V_TRACK_NR,
        V_REL_TIME;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_ABS_COUNT = "ABS_COUNT";
        private static final String CONST_V_TRACK_NR = "TRACK_NR";
        private static final String CONST_V_REL_TIME = "REL_TIME";

        public static A_ARG_TYPE_SeekMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_ABS_COUNT)) {
                return V_ABS_COUNT;
            }

            if (value.equals(CONST_V_TRACK_NR)) {
                return V_TRACK_NR;
            }

            if (value.equals(CONST_V_REL_TIME)) {
                return V_REL_TIME;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_ABS_COUNT:
                    value = CONST_V_ABS_COUNT;
                    break;

                case V_TRACK_NR:
                    value = CONST_V_TRACK_NR;
                    break;

                case V_REL_TIME:
                    value = CONST_V_REL_TIME;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentRecordQualityMode {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static CurrentRecordQualityMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (13)
    //-------------------------------------------------------

    public interface Next_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Next(Long InstanceID, final Next_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Next);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Next_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Seek_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Seek(Long InstanceID, A_ARG_TYPE_SeekMode Unit, String Target, final Seek_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Seek);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Seek_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Seek_ARG_Unit, Unit.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Seek_ARG_Target, Target, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Play_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Play(Long InstanceID, TransportPlaySpeed Speed, final Play_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Play);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Play_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Play_ARG_Speed, Speed.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetTransportInfo_CompletedHandler {
        void onSucceed(TransportState theCurrentTransportState,
                       TransportStatus theCurrentTransportStatus,
                       TransportPlaySpeed theCurrentSpeed);
        void onFailed(int errCode, String description);
    }

    public int GetTransportInfo(Long InstanceID, final GetTransportInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetTransportInfo);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetTransportInfo_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentTransportState = invocation.getResult(_GetTransportInfo_ARG_CurrentTransportState);
                        if (pCurrentTransportState == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportInfo_ARG_CurrentTransportState));
                            break;
                        }

                        Property pCurrentTransportStatus = invocation.getResult(_GetTransportInfo_ARG_CurrentTransportStatus);
                        if (pCurrentTransportStatus == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportInfo_ARG_CurrentTransportStatus));
                            break;
                        }

                        Property pCurrentSpeed = invocation.getResult(_GetTransportInfo_ARG_CurrentSpeed);
                        if (pCurrentSpeed == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportInfo_ARG_CurrentSpeed));
                            break;
                        }

                        TransportState theCurrentTransportState = TransportState.retrieveType(pCurrentTransportState.getCurrentValue().toString());
                        TransportStatus theCurrentTransportStatus = TransportStatus.retrieveType(pCurrentTransportStatus.getCurrentValue().toString());
                        TransportPlaySpeed theCurrentSpeed = TransportPlaySpeed.retrieveType(pCurrentSpeed.getCurrentValue().toString());

                        handler.onSucceed(theCurrentTransportState,
                                theCurrentTransportStatus,
                                theCurrentSpeed);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Previous_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Previous(Long InstanceID, final Previous_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Previous);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Previous_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetMediaInfo_CompletedHandler {
        void onSucceed(Long theNrTracks,
                       String theMediaDuration,
                       String theCurrentURI,
                       String theCurrentURIMetaData,
                       String theNextURI,
                       String theNextURIMetaData,
                       PlaybackStorageMedium thePlayMedium,
                       RecordStorageMedium theRecordMedium,
                       RecordMediumWriteStatus theWriteStatus);
        void onFailed(int errCode, String description);
    }

    public int GetMediaInfo(Long InstanceID, final GetMediaInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetMediaInfo);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetMediaInfo_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pNrTracks = invocation.getResult(_GetMediaInfo_ARG_NrTracks);
                        if (pNrTracks == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_NrTracks));
                            break;
                        }

                        Property pMediaDuration = invocation.getResult(_GetMediaInfo_ARG_MediaDuration);
                        if (pMediaDuration == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_MediaDuration));
                            break;
                        }

                        Property pCurrentURI = invocation.getResult(_GetMediaInfo_ARG_CurrentURI);
                        if (pCurrentURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_CurrentURI));
                            break;
                        }

                        Property pCurrentURIMetaData = invocation.getResult(_GetMediaInfo_ARG_CurrentURIMetaData);
                        if (pCurrentURIMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_CurrentURIMetaData));
                            break;
                        }

                        Property pNextURI = invocation.getResult(_GetMediaInfo_ARG_NextURI);
                        if (pNextURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_NextURI));
                            break;
                        }

                        Property pNextURIMetaData = invocation.getResult(_GetMediaInfo_ARG_NextURIMetaData);
                        if (pNextURIMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_NextURIMetaData));
                            break;
                        }

                        Property pPlayMedium = invocation.getResult(_GetMediaInfo_ARG_PlayMedium);
                        if (pPlayMedium == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_PlayMedium));
                            break;
                        }

                        Property pRecordMedium = invocation.getResult(_GetMediaInfo_ARG_RecordMedium);
                        if (pRecordMedium == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_RecordMedium));
                            break;
                        }

                        Property pWriteStatus = invocation.getResult(_GetMediaInfo_ARG_WriteStatus);
                        if (pWriteStatus == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_WriteStatus));
                            break;
                        }

                        Long theNrTracks = (Long) pNrTracks.getCurrentValue();
                        String theMediaDuration = (String) pMediaDuration.getCurrentValue();
                        String theCurrentURI = (String) pCurrentURI.getCurrentValue();
                        String theCurrentURIMetaData = (String) pCurrentURIMetaData.getCurrentValue();
                        String theNextURI = (String) pNextURI.getCurrentValue();
                        String theNextURIMetaData = (String) pNextURIMetaData.getCurrentValue();
                        PlaybackStorageMedium thePlayMedium = PlaybackStorageMedium.retrieveType(pPlayMedium.getCurrentValue().toString());
                        RecordStorageMedium theRecordMedium = RecordStorageMedium.retrieveType(pRecordMedium.getCurrentValue().toString());
                        RecordMediumWriteStatus theWriteStatus = RecordMediumWriteStatus.retrieveType(pWriteStatus.getCurrentValue().toString());

                        handler.onSucceed(theNrTracks,
                                theMediaDuration,
                                theCurrentURI,
                                theCurrentURIMetaData,
                                theNextURI,
                                theNextURIMetaData,
                                thePlayMedium,
                                theRecordMedium,
                                theWriteStatus);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetDeviceCapabilities_CompletedHandler {
        void onSucceed(PossiblePlaybackStorageMedia thePlayMedia,
                       PossibleRecordStorageMedia theRecMedia,
                       PossibleRecordQualityModes theRecQualityModes);
        void onFailed(int errCode, String description);
    }

    public int GetDeviceCapabilities(Long InstanceID, final GetDeviceCapabilities_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetDeviceCapabilities);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetDeviceCapabilities_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pPlayMedia = invocation.getResult(_GetDeviceCapabilities_ARG_PlayMedia);
                        if (pPlayMedia == null) {
                            Log.d(TAG, String.format("%s not found", _GetDeviceCapabilities_ARG_PlayMedia));
                            break;
                        }

                        Property pRecMedia = invocation.getResult(_GetDeviceCapabilities_ARG_RecMedia);
                        if (pRecMedia == null) {
                            Log.d(TAG, String.format("%s not found", _GetDeviceCapabilities_ARG_RecMedia));
                            break;
                        }

                        Property pRecQualityModes = invocation.getResult(_GetDeviceCapabilities_ARG_RecQualityModes);
                        if (pRecQualityModes == null) {
                            Log.d(TAG, String.format("%s not found", _GetDeviceCapabilities_ARG_RecQualityModes));
                            break;
                        }

                        PossiblePlaybackStorageMedia thePlayMedia = PossiblePlaybackStorageMedia.retrieveType(pPlayMedia.getCurrentValue().toString());
                        PossibleRecordStorageMedia theRecMedia = PossibleRecordStorageMedia.retrieveType(pRecMedia.getCurrentValue().toString());
                        PossibleRecordQualityModes theRecQualityModes = PossibleRecordQualityModes.retrieveType(pRecQualityModes.getCurrentValue().toString());

                        handler.onSucceed(thePlayMedia,
                                theRecMedia,
                                theRecQualityModes);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Pause_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Pause(Long InstanceID, final Pause_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Pause);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Pause_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetCurrentTransportActions_CompletedHandler {
        void onSucceed(String theActions);
        void onFailed(int errCode, String description);
    }

    public int GetCurrentTransportActions(Long InstanceID, final GetCurrentTransportActions_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetCurrentTransportActions);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetCurrentTransportActions_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pActions = invocation.getResult(_GetCurrentTransportActions_ARG_Actions);
                        if (pActions == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentTransportActions_ARG_Actions));
                            break;
                        }

                        String theActions = (String) pActions.getCurrentValue();

                        handler.onSucceed(theActions);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetAVTransportURI_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetAVTransportURI(Long InstanceID, String CurrentURI, String CurrentURIMetaData, final SetAVTransportURI_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetAVTransportURI);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetAVTransportURI_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetAVTransportURI_ARG_CurrentURI, CurrentURI, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetAVTransportURI_ARG_CurrentURIMetaData, CurrentURIMetaData, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetPositionInfo_CompletedHandler {
        void onSucceed(Long theTrack,
                       String theTrackDuration,
                       String theTrackMetaData,
                       String theTrackURI,
                       String theRelTime,
                       String theAbsTime,
                       Integer theRelCount,
                       Integer theAbsCount);
        void onFailed(int errCode, String description);
    }

    public int GetPositionInfo(Long InstanceID, final GetPositionInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetPositionInfo);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetPositionInfo_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pTrack = invocation.getResult(_GetPositionInfo_ARG_Track);
                        if (pTrack == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_Track));
                            break;
                        }

                        Property pTrackDuration = invocation.getResult(_GetPositionInfo_ARG_TrackDuration);
                        if (pTrackDuration == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_TrackDuration));
                            break;
                        }

                        Property pTrackMetaData = invocation.getResult(_GetPositionInfo_ARG_TrackMetaData);
                        if (pTrackMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_TrackMetaData));
                            break;
                        }

                        Property pTrackURI = invocation.getResult(_GetPositionInfo_ARG_TrackURI);
                        if (pTrackURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_TrackURI));
                            break;
                        }

                        Property pRelTime = invocation.getResult(_GetPositionInfo_ARG_RelTime);
                        if (pRelTime == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_RelTime));
                            break;
                        }

                        Property pAbsTime = invocation.getResult(_GetPositionInfo_ARG_AbsTime);
                        if (pAbsTime == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_AbsTime));
                            break;
                        }

                        Property pRelCount = invocation.getResult(_GetPositionInfo_ARG_RelCount);
                        if (pRelCount == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_RelCount));
                            break;
                        }

                        Property pAbsCount = invocation.getResult(_GetPositionInfo_ARG_AbsCount);
                        if (pAbsCount == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_AbsCount));
                            break;
                        }

                        Long theTrack = (Long) pTrack.getCurrentValue();
                        String theTrackDuration = (String) pTrackDuration.getCurrentValue();
                        String theTrackMetaData = (String) pTrackMetaData.getCurrentValue();
                        String theTrackURI = (String) pTrackURI.getCurrentValue();
                        String theRelTime = (String) pRelTime.getCurrentValue();
                        String theAbsTime = (String) pAbsTime.getCurrentValue();
                        Integer theRelCount = (Integer) pRelCount.getCurrentValue();
                        Integer theAbsCount = (Integer) pAbsCount.getCurrentValue();

                        handler.onSucceed(theTrack,
                                theTrackDuration,
                                theTrackMetaData,
                                theTrackURI,
                                theRelTime,
                                theAbsTime,
                                theRelCount,
                                theAbsCount);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Stop_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Stop(Long InstanceID, final Stop_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Stop);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Stop_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetTransportSettings_CompletedHandler {
        void onSucceed(CurrentPlayMode thePlayMode,
                       CurrentRecordQualityMode theRecQualityMode);
        void onFailed(int errCode, String description);
    }

    public int GetTransportSettings(Long InstanceID, final GetTransportSettings_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetTransportSettings);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetTransportSettings_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pPlayMode = invocation.getResult(_GetTransportSettings_ARG_PlayMode);
                        if (pPlayMode == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportSettings_ARG_PlayMode));
                            break;
                        }

                        Property pRecQualityMode = invocation.getResult(_GetTransportSettings_ARG_RecQualityMode);
                        if (pRecQualityMode == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportSettings_ARG_RecQualityMode));
                            break;
                        }

                        CurrentPlayMode thePlayMode = CurrentPlayMode.retrieveType(pPlayMode.getCurrentValue().toString());
                        CurrentRecordQualityMode theRecQualityMode = CurrentRecordQualityMode.retrieveType(pRecQualityMode.getCurrentValue().toString());

                        handler.onSucceed(thePlayMode,
                                theRecQualityMode);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onLastChangeChanged(String currentValue);
    }

    public int subscribe(final CompletionHandler handler, final EventListener listener) {
        int ret = ReturnCode.OK;

        do {
            if (this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            if (listener == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }


            ret = UpnpManager.getUpnp().subscribe(this.service,
                    new MyCompletionHandler() {

                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    },
                    new MyEventListener() {
                        @Override
                        public void onSubscriptionExpired(String serviceId) {
                            listener.onSubscriptionExpired();
                        }

                        @Override
                        public void onEvent(String serviceId, List<PropertyChanged> list) {
                            for (PropertyChanged c : list) {
                                if (c.getName().equals(PROPERTY_LastChange)) {
                                    PropertyDefinition def = service.getPropertyDefinition(PROPERTY_LastChange);
                                    listener.onLastChangeChanged((String)def.getDataType().toObjectValue(c.getValue()));
                                }
                            }
                        }
                    });
        } while (false);

        return ret;
    }

    public int unsubscribe(final CompletionHandler handler) {
        int ret = ReturnCode.OK;

        do {
            if (! this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            ret = UpnpManager.getUpnp().unsubscribe(this.service,
                    new MyCompletionHandler() {
                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    });
        } while (false);

        return ret;
    }

}
