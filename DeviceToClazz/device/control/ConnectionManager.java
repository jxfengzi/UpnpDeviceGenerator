/* Automatic generated by DeviceToClazz */

package upnps.api.ctrlpoint.device.mediaserver;

import android.util.Log;

import java.util.List;

import upnp.typedef.error.UpnpError;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.PropertyChanged;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.ActionInfoCreator;
import upnp.typedef.exception.UpnpException;
import upnp.typedef.property.DataType;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.ctrlpoint.device.AbstractService;
import upnps.api.manager.handler.MyCompletionHandler;
import upnps.api.manager.handler.MyEventListener;
import upnps.api.manager.handler.MyInvokeCompletionHandler;

public class ConnectionManager extends AbstractService {

    private static final String TAG = "ConnectionManager";

    public ConnectionManager(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (3)
    //-------------------------------------------------------
    public static final String ACTION_GetCurrentConnectionInfo = "GetCurrentConnectionInfo";
    public static final String _GetCurrentConnectionInfo_ARG_ConnectionID = "ConnectionID";
    public static final String _GetCurrentConnectionInfo_ARG_RcsID = "RcsID";
    public static final String _GetCurrentConnectionInfo_ARG_AVTransportID = "AVTransportID";
    public static final String _GetCurrentConnectionInfo_ARG_ProtocolInfo = "ProtocolInfo";
    public static final String _GetCurrentConnectionInfo_ARG_PeerConnectionManager = "PeerConnectionManager";
    public static final String _GetCurrentConnectionInfo_ARG_PeerConnectionID = "PeerConnectionID";
    public static final String _GetCurrentConnectionInfo_ARG_Direction = "Direction";
    public static final String _GetCurrentConnectionInfo_ARG_Status = "Status";
    public static final String ACTION_GetProtocolInfo = "GetProtocolInfo";
    public static final String _GetProtocolInfo_ARG_Source = "Source";
    public static final String _GetProtocolInfo_ARG_Sink = "Sink";
    public static final String ACTION_GetCurrentConnectionIDs = "GetCurrentConnectionIDs";
    public static final String _GetCurrentConnectionIDs_ARG_ConnectionIDs = "ConnectionIDs";

    //-------------------------------------------------------
    // Property Name (10)
    //-------------------------------------------------------
    public static final String PROPERTY_A_ARG_TYPE_Direction = "A_ARG_TYPE_Direction";
    public static final String PROPERTY_SinkProtocolInfo = "SinkProtocolInfo";
    public static final String PROPERTY_A_ARG_TYPE_RcsID = "A_ARG_TYPE_RcsID";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionManager = "A_ARG_TYPE_ConnectionManager";
    public static final String PROPERTY_A_ARG_TYPE_ProtocolInfo = "A_ARG_TYPE_ProtocolInfo";
    public static final String PROPERTY_SourceProtocolInfo = "SourceProtocolInfo";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionID = "A_ARG_TYPE_ConnectionID";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionStatus = "A_ARG_TYPE_ConnectionStatus";
    public static final String PROPERTY_CurrentConnectionIDs = "CurrentConnectionIDs";
    public static final String PROPERTY_A_ARG_TYPE_AVTransportID = "A_ARG_TYPE_AVTransportID";

    //-------------------------------------------------------
    // Property value defined (2)
    //-------------------------------------------------------

    public enum A_ARG_TYPE_Direction {
        UNDEFINED,
        V_Input,
        V_Output;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Input = "Input";
        private static final String CONST_V_Output = "Output";

        public static A_ARG_TYPE_Direction retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Input)) {
                return V_Input;
            }

            if (value.equals(CONST_V_Output)) {
                return V_Output;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Input:
                    value = CONST_V_Input;
                    break;

                case V_Output:
                    value = CONST_V_Output;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_ConnectionStatus {
        UNDEFINED,
        V_OK,
        V_ContentFormatMismatch,
        V_InsufficientBandwidth,
        V_UnreliableChannel,
        V_Unknown;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";
        private static final String CONST_V_ContentFormatMismatch = "ContentFormatMismatch";
        private static final String CONST_V_InsufficientBandwidth = "InsufficientBandwidth";
        private static final String CONST_V_UnreliableChannel = "UnreliableChannel";
        private static final String CONST_V_Unknown = "Unknown";

        public static A_ARG_TYPE_ConnectionStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            if (value.equals(CONST_V_ContentFormatMismatch)) {
                return V_ContentFormatMismatch;
            }

            if (value.equals(CONST_V_InsufficientBandwidth)) {
                return V_InsufficientBandwidth;
            }

            if (value.equals(CONST_V_UnreliableChannel)) {
                return V_UnreliableChannel;
            }

            if (value.equals(CONST_V_Unknown)) {
                return V_Unknown;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                case V_ContentFormatMismatch:
                    value = CONST_V_ContentFormatMismatch;
                    break;

                case V_InsufficientBandwidth:
                    value = CONST_V_InsufficientBandwidth;
                    break;

                case V_UnreliableChannel:
                    value = CONST_V_UnreliableChannel;
                    break;

                case V_Unknown:
                    value = CONST_V_Unknown;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (3)
    //-------------------------------------------------------

    public interface GetCurrentConnectionInfo_CompletedHandler {
        void onSucceed(Integer theRcsID,
                       Integer theAVTransportID,
                       String theProtocolInfo,
                       String thePeerConnectionManager,
                       Integer thePeerConnectionID,
                       A_ARG_TYPE_Direction theDirection,
                       A_ARG_TYPE_ConnectionStatus theStatus);
        void onFailed(UpnpError error);
    }

    public void GetCurrentConnectionInfo(Integer ConnectionID, final GetCurrentConnectionInfo_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetCurrentConnectionInfo);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        if (!action.setArgumentValue(_GetCurrentConnectionInfo_ARG_ConnectionID, ConnectionID, Argument.Direction.IN)) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pRcsID = invocation.getResult(_GetCurrentConnectionInfo_ARG_RcsID);
                    if (pRcsID == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_RcsID));
                        break;
                    }

                    Property pAVTransportID = invocation.getResult(_GetCurrentConnectionInfo_ARG_AVTransportID);
                    if (pAVTransportID == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_AVTransportID));
                        break;
                    }

                    Property pProtocolInfo = invocation.getResult(_GetCurrentConnectionInfo_ARG_ProtocolInfo);
                    if (pProtocolInfo == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_ProtocolInfo));
                        break;
                    }

                    Property pPeerConnectionManager = invocation.getResult(_GetCurrentConnectionInfo_ARG_PeerConnectionManager);
                    if (pPeerConnectionManager == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_PeerConnectionManager));
                        break;
                    }

                    Property pPeerConnectionID = invocation.getResult(_GetCurrentConnectionInfo_ARG_PeerConnectionID);
                    if (pPeerConnectionID == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_PeerConnectionID));
                        break;
                    }

                    Property pDirection = invocation.getResult(_GetCurrentConnectionInfo_ARG_Direction);
                    if (pDirection == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_Direction));
                        break;
                    }

                    Property pStatus = invocation.getResult(_GetCurrentConnectionInfo_ARG_Status);
                    if (pStatus == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionInfo_ARG_Status));
                        break;
                    }

                    Integer theRcsID = (Integer) pRcsID.getCurrentValue();
                    Integer theAVTransportID = (Integer) pAVTransportID.getCurrentValue();
                    String theProtocolInfo = (String) pProtocolInfo.getCurrentValue();
                    String thePeerConnectionManager = (String) pPeerConnectionManager.getCurrentValue();
                    Integer thePeerConnectionID = (Integer) pPeerConnectionID.getCurrentValue();
                    A_ARG_TYPE_Direction theDirection = A_ARG_TYPE_Direction.retrieveType(pDirection.getCurrentValue().toString());
                    A_ARG_TYPE_ConnectionStatus theStatus = A_ARG_TYPE_ConnectionStatus.retrieveType(pStatus.getCurrentValue().toString());

                    handler.onSucceed(theRcsID,
                            theAVTransportID,
                            theProtocolInfo,
                            thePeerConnectionManager,
                            thePeerConnectionID,
                            theDirection,
                            theStatus);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface GetProtocolInfo_CompletedHandler {
        void onSucceed(String theSource,
                       String theSink);
        void onFailed(UpnpError error);
    }

    public void GetProtocolInfo(final GetProtocolInfo_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetProtocolInfo);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pSource = invocation.getResult(_GetProtocolInfo_ARG_Source);
                    if (pSource == null) {
                        Log.d(TAG, String.format("%s not found", _GetProtocolInfo_ARG_Source));
                        break;
                    }

                    Property pSink = invocation.getResult(_GetProtocolInfo_ARG_Sink);
                    if (pSink == null) {
                        Log.d(TAG, String.format("%s not found", _GetProtocolInfo_ARG_Sink));
                        break;
                    }

                    String theSource = (String) pSource.getCurrentValue();
                    String theSink = (String) pSink.getCurrentValue();

                    handler.onSucceed(theSource,
                            theSink);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    public interface GetCurrentConnectionIDs_CompletedHandler {
        void onSucceed(String theConnectionIDs);
        void onFailed(UpnpError error);
    }

    public void GetCurrentConnectionIDs(final GetCurrentConnectionIDs_CompletedHandler handler) throws UpnpException {
        ActionInfo action = ActionInfoCreator.create(service, ACTION_GetCurrentConnectionIDs);
        if (action == null) {
            throw new UpnpException(UpnpError.INVALID_OPERATION, "action not found");
        }

        UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

            @Override
            public void onSucceed(ActionInfo invocation) {
                do {
                    Property pConnectionIDs = invocation.getResult(_GetCurrentConnectionIDs_ARG_ConnectionIDs);
                    if (pConnectionIDs == null) {
                        Log.d(TAG, String.format("%s not found", _GetCurrentConnectionIDs_ARG_ConnectionIDs));
                        break;
                    }

                    String theConnectionIDs = (String) pConnectionIDs.getCurrentValue();

                    handler.onSucceed(theConnectionIDs);
                } while (false);
            }

            @Override
            public void onFailed(UpnpError error) {
                handler.onFailed(error);
            }
        });
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(UpnpError error);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onSinkProtocolInfoChanged(String currentValue);
        void onSourceProtocolInfoChanged(String currentValue);
        void onCurrentConnectionIDsChanged(String currentValue);
    }

    public void subscribe(final CompletionHandler handler, final EventListener listener) throws UpnpException {
        if (this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_SUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        if (listener == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }


        UpnpManager.getUpnp().subscribe(this.service,
            new MyCompletionHandler() {

                 @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            },
            new MyEventListener() {
                @Override
                public void onSubscriptionExpired(String serviceId) {
                    listener.onSubscriptionExpired();
                }

                @Override
                public void onEvent(String serviceId, List<PropertyChanged> list) {
                    for (PropertyChanged c : list) {
                        if (c.getName().equals(PROPERTY_SinkProtocolInfo)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_SinkProtocolInfo);
                            listener.onSinkProtocolInfoChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_SourceProtocolInfo)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_SourceProtocolInfo);
                            listener.onSourceProtocolInfoChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                        if (c.getName().equals(PROPERTY_CurrentConnectionIDs)) {
                            PropertyDefinition def = service.getPropertyDefinition(PROPERTY_CurrentConnectionIDs);
                            listener.onCurrentConnectionIDsChanged((String)def.getDataType().toObjectValue(c.getValue()));
                        }
                    }
                }
            });
    }

    public void unsubscribe(final CompletionHandler handler) throws UpnpException {
        if (! this.service.isSubscribed()) {
            throw new UpnpException(UpnpError.SERVICE_UNSUBSCRIBED);
        }

        if (handler == null) {
            throw new UpnpException(UpnpError.INVALID_ARGUMENT);
        }

        UpnpManager.getUpnp().unsubscribe(this.service,
            new MyCompletionHandler() {
                @Override
                public void onSucceed() {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(UpnpError error) {
                    handler.onFailed(error);
                }
            });
    }

}
