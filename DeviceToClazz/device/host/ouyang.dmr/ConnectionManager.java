/* Automatic generated by DeviceToClazz */

package upnps.api.host.device.mediarenderer;

import android.util.Log;

import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.EventInfo;
import upnp.typedef.device.invocation.EventInfoCreator;
import upnp.typedef.exception.UpnpException;
import upnp.typedef.property.Property;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.host.ServiceActionHandler;

public class ConnectionManager implements ServiceActionHandler {
    private static final String TAG = "ConnectionManager";

    //-------------------------------------------------------
    // Action Names (6)
    //-------------------------------------------------------
    public static final String ACTION_GetCurrentConnectionInfo = "GetCurrentConnectionInfo";
    public static final String _GetCurrentConnectionInfo_ARG_ConnectionID = "ConnectionID";
    public static final String _GetCurrentConnectionInfo_ARG_RcsID = "RcsID";
    public static final String _GetCurrentConnectionInfo_ARG_AVTransportID = "AVTransportID";
    public static final String _GetCurrentConnectionInfo_ARG_ProtocolInfo = "ProtocolInfo";
    public static final String _GetCurrentConnectionInfo_ARG_PeerConnectionManager = "PeerConnectionManager";
    public static final String _GetCurrentConnectionInfo_ARG_PeerConnectionID = "PeerConnectionID";
    public static final String _GetCurrentConnectionInfo_ARG_Direction = "Direction";
    public static final String _GetCurrentConnectionInfo_ARG_Status = "Status";
    public static final String ACTION_GetRendererItemInfo = "GetRendererItemInfo";
    public static final String _GetRendererItemInfo_ARG_ItemInfoFilter = "ItemInfoFilter";
    public static final String _GetRendererItemInfo_ARG_ItemMetadataList = "ItemMetadataList";
    public static final String _GetRendererItemInfo_ARG_ItemRenderingInfoList = "ItemRenderingInfoList";
    public static final String ACTION_PrepareForConnection = "PrepareForConnection";
    public static final String _PrepareForConnection_ARG_RemoteProtocolInfo = "RemoteProtocolInfo";
    public static final String _PrepareForConnection_ARG_PeerConnectionManager = "PeerConnectionManager";
    public static final String _PrepareForConnection_ARG_PeerConnectionID = "PeerConnectionID";
    public static final String _PrepareForConnection_ARG_Direction = "Direction";
    public static final String _PrepareForConnection_ARG_ConnectionID = "ConnectionID";
    public static final String _PrepareForConnection_ARG_AVTransportID = "AVTransportID";
    public static final String _PrepareForConnection_ARG_RcsID = "RcsID";
    public static final String ACTION_GetProtocolInfo = "GetProtocolInfo";
    public static final String _GetProtocolInfo_ARG_Source = "Source";
    public static final String _GetProtocolInfo_ARG_Sink = "Sink";
    public static final String ACTION_ConnectionComplete = "ConnectionComplete";
    public static final String _ConnectionComplete_ARG_ConnectionID = "ConnectionID";
    public static final String ACTION_GetCurrentConnectionIDs = "GetCurrentConnectionIDs";
    public static final String _GetCurrentConnectionIDs_ARG_ConnectionIDs = "ConnectionIDs";

    //-------------------------------------------------------
    // Property Name (15)
    //-------------------------------------------------------
    public static final String PROPERTY_A_ARG_TYPE_Direction = "A_ARG_TYPE_Direction";
    public static final String PROPERTY_DeviceClockInfoUpdates = "DeviceClockInfoUpdates";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionManager = "A_ARG_TYPE_ConnectionManager";
    public static final String PROPERTY_A_ARG_TYPE_ItemInfoFilter = "A_ARG_TYPE_ItemInfoFilter";
    public static final String PROPERTY_CurrentConnectionIDs = "CurrentConnectionIDs";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionStatus = "A_ARG_TYPE_ConnectionStatus";
    public static final String PROPERTY_A_ARG_TYPE_AVTransportID = "A_ARG_TYPE_AVTransportID";
    public static final String PROPERTY_SinkProtocolInfo = "SinkProtocolInfo";
    public static final String PROPERTY_A_ARG_TYPE_RcsID = "A_ARG_TYPE_RcsID";
    public static final String PROPERTY_SourceProtocolInfo = "SourceProtocolInfo";
    public static final String PROPERTY_A_ARG_TYPE_ProtocolInfo = "A_ARG_TYPE_ProtocolInfo";
    public static final String PROPERTY_A_ARG_TYPE_RenderingInfoList = "A_ARG_TYPE_RenderingInfoList";
    public static final String PROPERTY_A_ARG_TYPE_ConnectionID = "A_ARG_TYPE_ConnectionID";
    public static final String PROPERTY_ClockUpdateID = "ClockUpdateID";
    public static final String PROPERTY_A_ARG_TYPE_Result = "A_ARG_TYPE_Result";

    //-------------------------------------------------------
    // Property value defined (2)
    //-------------------------------------------------------

    public enum A_ARG_TYPE_Direction {
        UNDEFINED,
        V_Input,
        V_Output;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Input = "Input";
        private static final String CONST_V_Output = "Output";

        public static A_ARG_TYPE_Direction retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Input)) {
                return V_Input;
            }

            if (value.equals(CONST_V_Output)) {
                return V_Output;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Input:
                    value = CONST_V_Input;
                    break;

                case V_Output:
                    value = CONST_V_Output;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_ConnectionStatus {
        UNDEFINED,
        V_OK,
        V_ContentFormatMismatch,
        V_InsufficientBandwidth,
        V_UnreliableChannel,
        V_Unknown;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";
        private static final String CONST_V_ContentFormatMismatch = "ContentFormatMismatch";
        private static final String CONST_V_InsufficientBandwidth = "InsufficientBandwidth";
        private static final String CONST_V_UnreliableChannel = "UnreliableChannel";
        private static final String CONST_V_Unknown = "Unknown";

        public static A_ARG_TYPE_ConnectionStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            if (value.equals(CONST_V_ContentFormatMismatch)) {
                return V_ContentFormatMismatch;
            }

            if (value.equals(CONST_V_InsufficientBandwidth)) {
                return V_InsufficientBandwidth;
            }

            if (value.equals(CONST_V_UnreliableChannel)) {
                return V_UnreliableChannel;
            }

            if (value.equals(CONST_V_Unknown)) {
                return V_Unknown;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                case V_ContentFormatMismatch:
                    value = CONST_V_ContentFormatMismatch;
                    break;

                case V_InsufficientBandwidth:
                    value = CONST_V_InsufficientBandwidth;
                    break;

                case V_UnreliableChannel:
                    value = CONST_V_UnreliableChannel;
                    break;

                case V_Unknown:
                    value = CONST_V_Unknown;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // Action Result (6)
    //-------------------------------------------------------

    public class GetCurrentConnectionInfo_Result {
        public Integer theRcsID;
        public Integer theAVTransportID;
        public String theProtocolInfo;
        public String thePeerConnectionManager;
        public Integer thePeerConnectionID;
        public A_ARG_TYPE_Direction theDirection;
        public A_ARG_TYPE_ConnectionStatus theStatus;
    }

    public class GetRendererItemInfo_Result {
        public String theItemRenderingInfoList;
    }

    public class PrepareForConnection_Result {
        public Integer theConnectionID;
        public Integer theAVTransportID;
        public Integer theRcsID;
    }

    public class GetProtocolInfo_Result {
        public String theSource;
        public String theSink;
    }

    // ConnectionComplete has no Result

    public class GetCurrentConnectionIDs_Result {
        public String theConnectionIDs;
    }


    //-------------------------------------------------------
    // Action Handler (6)
    //-------------------------------------------------------

    public interface Handler {
        boolean onGetCurrentConnectionInfo(Integer theConnectionID, GetCurrentConnectionInfo_Result result);
        boolean onGetRendererItemInfo(String theItemInfoFilter, String theItemMetadataList, GetRendererItemInfo_Result result);
        boolean onPrepareForConnection(String theRemoteProtocolInfo, String thePeerConnectionManager, Integer thePeerConnectionID, A_ARG_TYPE_Direction theDirection, PrepareForConnection_Result result);
        boolean onGetProtocolInfo(GetProtocolInfo_Result result);
        boolean onConnectionComplete(Integer theConnectionID);
        boolean onGetCurrentConnectionIDs(GetCurrentConnectionIDs_Result result);
    }

    private boolean handle_GetCurrentConnectionInfo(ActionInfo info) {
        Integer theConnectionID = (Integer)info.getArgumentValue(_GetCurrentConnectionInfo_ARG_ConnectionID);
        GetCurrentConnectionInfo_Result result = new GetCurrentConnectionInfo_Result();

        if (_handler.onGetCurrentConnectionInfo(theConnectionID, result)) {
            if (! info.setArgumentValue(_GetCurrentConnectionInfo_ARG_RcsID, result.theRcsID, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_GetCurrentConnectionInfo_ARG_AVTransportID, result.theAVTransportID, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_GetCurrentConnectionInfo_ARG_ProtocolInfo, result.theProtocolInfo, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_GetCurrentConnectionInfo_ARG_PeerConnectionManager, result.thePeerConnectionManager, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_GetCurrentConnectionInfo_ARG_PeerConnectionID, result.thePeerConnectionID, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_GetCurrentConnectionInfo_ARG_Direction, result.theDirection.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_GetCurrentConnectionInfo_ARG_Status, result.theStatus.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            return true;
        }

        return false;
    }

    private boolean handle_GetRendererItemInfo(ActionInfo info) {
        String theItemInfoFilter = (String)info.getArgumentValue(_GetRendererItemInfo_ARG_ItemInfoFilter);
        String theItemMetadataList = (String)info.getArgumentValue(_GetRendererItemInfo_ARG_ItemMetadataList);
        GetRendererItemInfo_Result result = new GetRendererItemInfo_Result();

        if (_handler.onGetRendererItemInfo(theItemInfoFilter, theItemMetadataList, result)) {
            if (! info.setArgumentValue(_GetRendererItemInfo_ARG_ItemRenderingInfoList, result.theItemRenderingInfoList, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            return true;
        }

        return false;
    }

    private boolean handle_PrepareForConnection(ActionInfo info) {
        String theRemoteProtocolInfo = (String)info.getArgumentValue(_PrepareForConnection_ARG_RemoteProtocolInfo);
        String thePeerConnectionManager = (String)info.getArgumentValue(_PrepareForConnection_ARG_PeerConnectionManager);
        Integer thePeerConnectionID = (Integer)info.getArgumentValue(_PrepareForConnection_ARG_PeerConnectionID);
        A_ARG_TYPE_Direction theDirection = A_ARG_TYPE_Direction.retrieveType((String)info.getArgumentValue(_PrepareForConnection_ARG_Direction));
        PrepareForConnection_Result result = new PrepareForConnection_Result();

        if (_handler.onPrepareForConnection(theRemoteProtocolInfo, thePeerConnectionManager, thePeerConnectionID, theDirection, result)) {
            if (! info.setArgumentValue(_PrepareForConnection_ARG_ConnectionID, result.theConnectionID, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_PrepareForConnection_ARG_AVTransportID, result.theAVTransportID, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_PrepareForConnection_ARG_RcsID, result.theRcsID, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            return true;
        }

        return false;
    }

    private boolean handle_GetProtocolInfo(ActionInfo info) {
        GetProtocolInfo_Result result = new GetProtocolInfo_Result();

        if (_handler.onGetProtocolInfo(result)) {
            if (! info.setArgumentValue(_GetProtocolInfo_ARG_Source, result.theSource, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            if (! info.setArgumentValue(_GetProtocolInfo_ARG_Sink, result.theSink, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            return true;
        }

        return false;
    }

    private boolean handle_ConnectionComplete(ActionInfo info) {
        Integer theConnectionID = (Integer)info.getArgumentValue(_ConnectionComplete_ARG_ConnectionID);

        if (_handler.onConnectionComplete(theConnectionID)) {
            return true;
        }

        return false;
    }

    private boolean handle_GetCurrentConnectionIDs(ActionInfo info) {
        GetCurrentConnectionIDs_Result result = new GetCurrentConnectionIDs_Result();

        if (_handler.onGetCurrentConnectionIDs(result)) {
            if (! info.setArgumentValue(_GetCurrentConnectionIDs_ARG_ConnectionIDs, result.theConnectionIDs, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return false;
            }

            return true;
        }

        return false;
    }

    //-------------------------------------------------------
    // Method
    //-------------------------------------------------------

    private Service _service;
    private Handler _handler;

    public ConnectionManager(Service service) {
        _service = service;
    }

    public void setHandler(Handler handler) {
        _handler = handler;
    }

    @Override
    public boolean onAction(ActionInfo info) {
        if (_handler == null) {
           Log.e(TAG, "handler is null");
           return false;
        }

        if (info.getAction().getName().equals(ACTION_GetCurrentConnectionInfo)) {
            return handle_GetCurrentConnectionInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_GetRendererItemInfo)) {
            return handle_GetRendererItemInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_PrepareForConnection)) {
            return handle_PrepareForConnection(info);
        }

        if (info.getAction().getName().equals(ACTION_GetProtocolInfo)) {
            return handle_GetProtocolInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_ConnectionComplete)) {
            return handle_ConnectionComplete(info);
        }

        if (info.getAction().getName().equals(ACTION_GetCurrentConnectionIDs)) {
            return handle_GetCurrentConnectionIDs(info);
        }

        return false;
    }

    public void sendEvents() {
        EventInfo info = EventInfoCreator.create(_service);

        try {
            UpnpManager.getUpnp().publishEvent(info);
        } catch (UpnpException e) {
            e.printStackTrace();
        }
    }

    public void setDeviceClockInfoUpdates(String theDeviceClockInfoUpdates) {
         _service.setPropertyValue(PROPERTY_DeviceClockInfoUpdates, theDeviceClockInfoUpdates);
    }

    public void setCurrentConnectionIDs(String theCurrentConnectionIDs) {
         _service.setPropertyValue(PROPERTY_CurrentConnectionIDs, theCurrentConnectionIDs);
    }

    public void setSinkProtocolInfo(String theSinkProtocolInfo) {
         _service.setPropertyValue(PROPERTY_SinkProtocolInfo, theSinkProtocolInfo);
    }

    public void setSourceProtocolInfo(String theSourceProtocolInfo) {
         _service.setPropertyValue(PROPERTY_SourceProtocolInfo, theSourceProtocolInfo);
    }

}
