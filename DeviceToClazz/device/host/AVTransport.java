/* Automatic generated by DeviceToClazz */

package upnps.api.host.device.avplayer;

import android.util.Log;

import upnp.typedef.error.UpnpError;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.EventInfo;
import upnp.typedef.device.invocation.EventInfoCreator;
import upnp.typedef.exception.UpnpException;

import upnps.manager.UpnpManager;
import upnps.manager.host.ServiceStub;

public class AVTransport implements ServiceStub {
    private static final String TAG = "AVTransport";

    //-------------------------------------------------------
    // Action Names (13)
    //-------------------------------------------------------
    public static final String ACTION_Next = "Next";
    public static final String _Next_ARG_InstanceID = "InstanceID";
    public static final String ACTION_Seek = "Seek";
    public static final String _Seek_ARG_InstanceID = "InstanceID";
    public static final String _Seek_ARG_Unit = "Unit";
    public static final String _Seek_ARG_Target = "Target";
    public static final String ACTION_Play = "Play";
    public static final String _Play_ARG_InstanceID = "InstanceID";
    public static final String _Play_ARG_Speed = "Speed";
    public static final String ACTION_GetTransportInfo = "GetTransportInfo";
    public static final String _GetTransportInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportInfo_ARG_CurrentTransportState = "CurrentTransportState";
    public static final String _GetTransportInfo_ARG_CurrentTransportStatus = "CurrentTransportStatus";
    public static final String _GetTransportInfo_ARG_CurrentSpeed = "CurrentSpeed";
    public static final String ACTION_Previous = "Previous";
    public static final String _Previous_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetMediaInfo = "GetMediaInfo";
    public static final String _GetMediaInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetMediaInfo_ARG_NrTracks = "NrTracks";
    public static final String _GetMediaInfo_ARG_MediaDuration = "MediaDuration";
    public static final String _GetMediaInfo_ARG_CurrentURI = "CurrentURI";
    public static final String _GetMediaInfo_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String _GetMediaInfo_ARG_NextURI = "NextURI";
    public static final String _GetMediaInfo_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String _GetMediaInfo_ARG_PlayMedium = "PlayMedium";
    public static final String _GetMediaInfo_ARG_RecordMedium = "RecordMedium";
    public static final String _GetMediaInfo_ARG_WriteStatus = "WriteStatus";
    public static final String ACTION_GetDeviceCapabilities = "GetDeviceCapabilities";
    public static final String _GetDeviceCapabilities_ARG_InstanceID = "InstanceID";
    public static final String _GetDeviceCapabilities_ARG_PlayMedia = "PlayMedia";
    public static final String _GetDeviceCapabilities_ARG_RecMedia = "RecMedia";
    public static final String _GetDeviceCapabilities_ARG_RecQualityModes = "RecQualityModes";
    public static final String ACTION_Pause = "Pause";
    public static final String _Pause_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetCurrentTransportActions = "GetCurrentTransportActions";
    public static final String _GetCurrentTransportActions_ARG_InstanceID = "InstanceID";
    public static final String _GetCurrentTransportActions_ARG_Actions = "Actions";
    public static final String ACTION_SetAVTransportURI = "SetAVTransportURI";
    public static final String _SetAVTransportURI_ARG_InstanceID = "InstanceID";
    public static final String _SetAVTransportURI_ARG_CurrentURI = "CurrentURI";
    public static final String _SetAVTransportURI_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String ACTION_GetPositionInfo = "GetPositionInfo";
    public static final String _GetPositionInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetPositionInfo_ARG_Track = "Track";
    public static final String _GetPositionInfo_ARG_TrackDuration = "TrackDuration";
    public static final String _GetPositionInfo_ARG_TrackMetaData = "TrackMetaData";
    public static final String _GetPositionInfo_ARG_TrackURI = "TrackURI";
    public static final String _GetPositionInfo_ARG_RelTime = "RelTime";
    public static final String _GetPositionInfo_ARG_AbsTime = "AbsTime";
    public static final String _GetPositionInfo_ARG_RelCount = "RelCount";
    public static final String _GetPositionInfo_ARG_AbsCount = "AbsCount";
    public static final String ACTION_Stop = "Stop";
    public static final String _Stop_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetTransportSettings = "GetTransportSettings";
    public static final String _GetTransportSettings_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportSettings_ARG_PlayMode = "PlayMode";
    public static final String _GetTransportSettings_ARG_RecQualityMode = "RecQualityMode";

    //-------------------------------------------------------
    // Property Name (30)
    //-------------------------------------------------------
    public static final String PROPERTY_PossibleRecordStorageMedia = "PossibleRecordStorageMedia";
    public static final String PROPERTY_AbsoluteTimePosition = "AbsoluteTimePosition";
    public static final String PROPERTY_NextAVTransportURI = "NextAVTransportURI";
    public static final String PROPERTY_CurrentTrackDuration = "CurrentTrackDuration";
    public static final String PROPERTY_TransportPlaySpeed = "TransportPlaySpeed";
    public static final String PROPERTY_TransportState = "TransportState";
    public static final String PROPERTY_PossiblePlaybackStorageMedia = "PossiblePlaybackStorageMedia";
    public static final String PROPERTY_A_ARG_TYPE_SeekTarget = "A_ARG_TYPE_SeekTarget";
    public static final String PROPERTY_AVTransportURIMetaData = "AVTransportURIMetaData";
    public static final String PROPERTY_A_ARG_TYPE_InstanceID = "A_ARG_TYPE_InstanceID";
    public static final String PROPERTY_CurrentTrackURI = "CurrentTrackURI";
    public static final String PROPERTY_NumberOfTracks = "NumberOfTracks";
    public static final String PROPERTY_CurrentPlayMode = "CurrentPlayMode";
    public static final String PROPERTY_RecordStorageMedium = "RecordStorageMedium";
    public static final String PROPERTY_TransportStatus = "TransportStatus";
    public static final String PROPERTY_AVTransportURI = "AVTransportURI";
    public static final String PROPERTY_RecordMediumWriteStatus = "RecordMediumWriteStatus";
    public static final String PROPERTY_CurrentTransportActions = "CurrentTransportActions";
    public static final String PROPERTY_PlaybackStorageMedium = "PlaybackStorageMedium";
    public static final String PROPERTY_CurrentTrack = "CurrentTrack";
    public static final String PROPERTY_RelativeTimePosition = "RelativeTimePosition";
    public static final String PROPERTY_AbsoluteCounterPosition = "AbsoluteCounterPosition";
    public static final String PROPERTY_CurrentMediaDuration = "CurrentMediaDuration";
    public static final String PROPERTY_CurrentTrackMetaData = "CurrentTrackMetaData";
    public static final String PROPERTY_NextAVTransportURIMetaData = "NextAVTransportURIMetaData";
    public static final String PROPERTY_RelativeCounterPosition = "RelativeCounterPosition";
    public static final String PROPERTY_PossibleRecordQualityModes = "PossibleRecordQualityModes";
    public static final String PROPERTY_A_ARG_TYPE_SeekMode = "A_ARG_TYPE_SeekMode";
    public static final String PROPERTY_CurrentRecordQualityMode = "CurrentRecordQualityMode";
    public static final String PROPERTY_LastChange = "LastChange";

    //-------------------------------------------------------
    // Property value defined (12)
    //-------------------------------------------------------

    public enum PossibleRecordStorageMedia {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static PossibleRecordStorageMedia retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportPlaySpeed {
        UNDEFINED,
        V_1;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_1 = "1";

        public static TransportPlaySpeed retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_1)) {
                return V_1;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_1:
                    value = CONST_V_1;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportState {
        UNDEFINED,
        V_STOPPED,
        V_PAUSED_PLAYBACK,
        V_PLAYING,
        V_TRANSITIONING,
        V_NO_MEDIA_PRESENT;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_STOPPED = "STOPPED";
        private static final String CONST_V_PAUSED_PLAYBACK = "PAUSED_PLAYBACK";
        private static final String CONST_V_PLAYING = "PLAYING";
        private static final String CONST_V_TRANSITIONING = "TRANSITIONING";
        private static final String CONST_V_NO_MEDIA_PRESENT = "NO_MEDIA_PRESENT";

        public static TransportState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_STOPPED)) {
                return V_STOPPED;
            }

            if (value.equals(CONST_V_PAUSED_PLAYBACK)) {
                return V_PAUSED_PLAYBACK;
            }

            if (value.equals(CONST_V_PLAYING)) {
                return V_PLAYING;
            }

            if (value.equals(CONST_V_TRANSITIONING)) {
                return V_TRANSITIONING;
            }

            if (value.equals(CONST_V_NO_MEDIA_PRESENT)) {
                return V_NO_MEDIA_PRESENT;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_STOPPED:
                    value = CONST_V_STOPPED;
                    break;

                case V_PAUSED_PLAYBACK:
                    value = CONST_V_PAUSED_PLAYBACK;
                    break;

                case V_PLAYING:
                    value = CONST_V_PLAYING;
                    break;

                case V_TRANSITIONING:
                    value = CONST_V_TRANSITIONING;
                    break;

                case V_NO_MEDIA_PRESENT:
                    value = CONST_V_NO_MEDIA_PRESENT;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum PossiblePlaybackStorageMedia {
        UNDEFINED,
        V_UNKNOWN,
        V_CD_DA,
        V_DVD_VIDEO,
        V_HDD,
        V_NETWORK;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_UNKNOWN = "UNKNOWN";
        private static final String CONST_V_CD_DA = "CD-DA";
        private static final String CONST_V_DVD_VIDEO = "DVD-VIDEO";
        private static final String CONST_V_HDD = "HDD";
        private static final String CONST_V_NETWORK = "NETWORK";

        public static PossiblePlaybackStorageMedia retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_UNKNOWN)) {
                return V_UNKNOWN;
            }

            if (value.equals(CONST_V_CD_DA)) {
                return V_CD_DA;
            }

            if (value.equals(CONST_V_DVD_VIDEO)) {
                return V_DVD_VIDEO;
            }

            if (value.equals(CONST_V_HDD)) {
                return V_HDD;
            }

            if (value.equals(CONST_V_NETWORK)) {
                return V_NETWORK;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_UNKNOWN:
                    value = CONST_V_UNKNOWN;
                    break;

                case V_CD_DA:
                    value = CONST_V_CD_DA;
                    break;

                case V_DVD_VIDEO:
                    value = CONST_V_DVD_VIDEO;
                    break;

                case V_HDD:
                    value = CONST_V_HDD;
                    break;

                case V_NETWORK:
                    value = CONST_V_NETWORK;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentPlayMode {
        UNDEFINED,
        V_NORMAL,
        V_SHUFFLE,
        V_REPEAT_ALL;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NORMAL = "NORMAL";
        private static final String CONST_V_SHUFFLE = "SHUFFLE";
        private static final String CONST_V_REPEAT_ALL = "REPEAT_ALL";

        public static CurrentPlayMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NORMAL)) {
                return V_NORMAL;
            }

            if (value.equals(CONST_V_SHUFFLE)) {
                return V_SHUFFLE;
            }

            if (value.equals(CONST_V_REPEAT_ALL)) {
                return V_REPEAT_ALL;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NORMAL:
                    value = CONST_V_NORMAL;
                    break;

                case V_SHUFFLE:
                    value = CONST_V_SHUFFLE;
                    break;

                case V_REPEAT_ALL:
                    value = CONST_V_REPEAT_ALL;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum RecordStorageMedium {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static RecordStorageMedium retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportStatus {
        UNDEFINED,
        V_OK,
        V_ERROR_OCCURRED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";
        private static final String CONST_V_ERROR_OCCURRED = "ERROR_OCCURRED";

        public static TransportStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            if (value.equals(CONST_V_ERROR_OCCURRED)) {
                return V_ERROR_OCCURRED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                case V_ERROR_OCCURRED:
                    value = CONST_V_ERROR_OCCURRED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum RecordMediumWriteStatus {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static RecordMediumWriteStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum PlaybackStorageMedium {
        UNDEFINED,
        V_UNKNOWN,
        V_CD_DA,
        V_DVD_VIDEO,
        V_HDD,
        V_NETWORK;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_UNKNOWN = "UNKNOWN";
        private static final String CONST_V_CD_DA = "CD-DA";
        private static final String CONST_V_DVD_VIDEO = "DVD-VIDEO";
        private static final String CONST_V_HDD = "HDD";
        private static final String CONST_V_NETWORK = "NETWORK";

        public static PlaybackStorageMedium retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_UNKNOWN)) {
                return V_UNKNOWN;
            }

            if (value.equals(CONST_V_CD_DA)) {
                return V_CD_DA;
            }

            if (value.equals(CONST_V_DVD_VIDEO)) {
                return V_DVD_VIDEO;
            }

            if (value.equals(CONST_V_HDD)) {
                return V_HDD;
            }

            if (value.equals(CONST_V_NETWORK)) {
                return V_NETWORK;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_UNKNOWN:
                    value = CONST_V_UNKNOWN;
                    break;

                case V_CD_DA:
                    value = CONST_V_CD_DA;
                    break;

                case V_DVD_VIDEO:
                    value = CONST_V_DVD_VIDEO;
                    break;

                case V_HDD:
                    value = CONST_V_HDD;
                    break;

                case V_NETWORK:
                    value = CONST_V_NETWORK;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum PossibleRecordQualityModes {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static PossibleRecordQualityModes retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_SeekMode {
        UNDEFINED,
        V_ABS_COUNT,
        V_TRACK_NR,
        V_REL_TIME;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_ABS_COUNT = "ABS_COUNT";
        private static final String CONST_V_TRACK_NR = "TRACK_NR";
        private static final String CONST_V_REL_TIME = "REL_TIME";

        public static A_ARG_TYPE_SeekMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_ABS_COUNT)) {
                return V_ABS_COUNT;
            }

            if (value.equals(CONST_V_TRACK_NR)) {
                return V_TRACK_NR;
            }

            if (value.equals(CONST_V_REL_TIME)) {
                return V_REL_TIME;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_ABS_COUNT:
                    value = CONST_V_ABS_COUNT;
                    break;

                case V_TRACK_NR:
                    value = CONST_V_TRACK_NR;
                    break;

                case V_REL_TIME:
                    value = CONST_V_REL_TIME;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentRecordQualityMode {
        UNDEFINED,
        V_NOT_IMPLEMENTED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NOT_IMPLEMENTED = "NOT_IMPLEMENTED";

        public static CurrentRecordQualityMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NOT_IMPLEMENTED)) {
                return V_NOT_IMPLEMENTED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NOT_IMPLEMENTED:
                    value = CONST_V_NOT_IMPLEMENTED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // Action Result (13)
    //-------------------------------------------------------

    // Next has no Result

    // Seek has no Result

    // Play has no Result

    public class GetTransportInfo_Result {
        public TransportState theCurrentTransportState;
        public TransportStatus theCurrentTransportStatus;
        public TransportPlaySpeed theCurrentSpeed;
    }

    // Previous has no Result

    public class GetMediaInfo_Result {
        public Long theNrTracks;
        public String theMediaDuration;
        public String theCurrentURI;
        public String theCurrentURIMetaData;
        public String theNextURI;
        public String theNextURIMetaData;
        public PlaybackStorageMedium thePlayMedium;
        public RecordStorageMedium theRecordMedium;
        public RecordMediumWriteStatus theWriteStatus;
    }

    public class GetDeviceCapabilities_Result {
        public PossiblePlaybackStorageMedia thePlayMedia;
        public PossibleRecordStorageMedia theRecMedia;
        public PossibleRecordQualityModes theRecQualityModes;
    }

    // Pause has no Result

    public class GetCurrentTransportActions_Result {
        public String theActions;
    }

    // SetAVTransportURI has no Result

    public class GetPositionInfo_Result {
        public Long theTrack;
        public String theTrackDuration;
        public String theTrackMetaData;
        public String theTrackURI;
        public String theRelTime;
        public String theAbsTime;
        public Integer theRelCount;
        public Integer theAbsCount;
    }

    // Stop has no Result

    public class GetTransportSettings_Result {
        public CurrentPlayMode thePlayMode;
        public CurrentRecordQualityMode theRecQualityMode;
    }


    //-------------------------------------------------------
    // Action Handler (13)
    //-------------------------------------------------------

    public interface Handler {
        UpnpError onNext(Long theInstanceID);
        UpnpError onSeek(Long theInstanceID, A_ARG_TYPE_SeekMode theUnit, String theTarget);
        UpnpError onPlay(Long theInstanceID, TransportPlaySpeed theSpeed);
        UpnpError onGetTransportInfo(Long theInstanceID, GetTransportInfo_Result result);
        UpnpError onPrevious(Long theInstanceID);
        UpnpError onGetMediaInfo(Long theInstanceID, GetMediaInfo_Result result);
        UpnpError onGetDeviceCapabilities(Long theInstanceID, GetDeviceCapabilities_Result result);
        UpnpError onPause(Long theInstanceID);
        UpnpError onGetCurrentTransportActions(Long theInstanceID, GetCurrentTransportActions_Result result);
        UpnpError onSetAVTransportURI(Long theInstanceID, String theCurrentURI, String theCurrentURIMetaData);
        UpnpError onGetPositionInfo(Long theInstanceID, GetPositionInfo_Result result);
        UpnpError onStop(Long theInstanceID);
        UpnpError onGetTransportSettings(Long theInstanceID, GetTransportSettings_Result result);
    }

    private UpnpError handle_Next(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Next_ARG_InstanceID);

        UpnpError error = _handler.onNext(theInstanceID);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_Seek(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Seek_ARG_InstanceID);
        A_ARG_TYPE_SeekMode theUnit = A_ARG_TYPE_SeekMode.retrieveType((String)info.getArgumentValue(_Seek_ARG_Unit));
        String theTarget = (String)info.getArgumentValue(_Seek_ARG_Target);

        UpnpError error = _handler.onSeek(theInstanceID, theUnit, theTarget);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_Play(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Play_ARG_InstanceID);
        TransportPlaySpeed theSpeed = TransportPlaySpeed.retrieveType((String)info.getArgumentValue(_Play_ARG_Speed));

        UpnpError error = _handler.onPlay(theInstanceID, theSpeed);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetTransportInfo(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetTransportInfo_ARG_InstanceID);
        GetTransportInfo_Result result = new GetTransportInfo_Result();

        UpnpError error = _handler.onGetTransportInfo(theInstanceID, result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetTransportInfo_ARG_CurrentTransportState, result.theCurrentTransportState.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetTransportInfo_ARG_CurrentTransportStatus, result.theCurrentTransportStatus.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetTransportInfo_ARG_CurrentSpeed, result.theCurrentSpeed.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_Previous(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Previous_ARG_InstanceID);

        UpnpError error = _handler.onPrevious(theInstanceID);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetMediaInfo(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetMediaInfo_ARG_InstanceID);
        GetMediaInfo_Result result = new GetMediaInfo_Result();

        UpnpError error = _handler.onGetMediaInfo(theInstanceID, result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_NrTracks, result.theNrTracks, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_MediaDuration, result.theMediaDuration, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_CurrentURI, result.theCurrentURI, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_CurrentURIMetaData, result.theCurrentURIMetaData, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_NextURI, result.theNextURI, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_NextURIMetaData, result.theNextURIMetaData, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_PlayMedium, result.thePlayMedium.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_RecordMedium, result.theRecordMedium.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetMediaInfo_ARG_WriteStatus, result.theWriteStatus.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetDeviceCapabilities(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetDeviceCapabilities_ARG_InstanceID);
        GetDeviceCapabilities_Result result = new GetDeviceCapabilities_Result();

        UpnpError error = _handler.onGetDeviceCapabilities(theInstanceID, result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetDeviceCapabilities_ARG_PlayMedia, result.thePlayMedia.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetDeviceCapabilities_ARG_RecMedia, result.theRecMedia.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetDeviceCapabilities_ARG_RecQualityModes, result.theRecQualityModes.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_Pause(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Pause_ARG_InstanceID);

        UpnpError error = _handler.onPause(theInstanceID);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetCurrentTransportActions(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetCurrentTransportActions_ARG_InstanceID);
        GetCurrentTransportActions_Result result = new GetCurrentTransportActions_Result();

        UpnpError error = _handler.onGetCurrentTransportActions(theInstanceID, result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetCurrentTransportActions_ARG_Actions, result.theActions, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SetAVTransportURI(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetAVTransportURI_ARG_InstanceID);
        String theCurrentURI = (String)info.getArgumentValue(_SetAVTransportURI_ARG_CurrentURI);
        String theCurrentURIMetaData = (String)info.getArgumentValue(_SetAVTransportURI_ARG_CurrentURIMetaData);

        UpnpError error = _handler.onSetAVTransportURI(theInstanceID, theCurrentURI, theCurrentURIMetaData);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetPositionInfo(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetPositionInfo_ARG_InstanceID);
        GetPositionInfo_Result result = new GetPositionInfo_Result();

        UpnpError error = _handler.onGetPositionInfo(theInstanceID, result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_Track, result.theTrack, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_TrackDuration, result.theTrackDuration, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_TrackMetaData, result.theTrackMetaData, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_TrackURI, result.theTrackURI, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_RelTime, result.theRelTime, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_AbsTime, result.theAbsTime, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_RelCount, result.theRelCount, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetPositionInfo_ARG_AbsCount, result.theAbsCount, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_Stop(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Stop_ARG_InstanceID);

        UpnpError error = _handler.onStop(theInstanceID);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetTransportSettings(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetTransportSettings_ARG_InstanceID);
        GetTransportSettings_Result result = new GetTransportSettings_Result();

        UpnpError error = _handler.onGetTransportSettings(theInstanceID, result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetTransportSettings_ARG_PlayMode, result.thePlayMode.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        if (! info.setArgumentValue(_GetTransportSettings_ARG_RecQualityMode, result.theRecQualityMode.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    //-------------------------------------------------------
    // Method
    //-------------------------------------------------------

    private Service _service;
    private Handler _handler;

    public AVTransport(Service service) {
        _service = service;
    }

    public void setHandler(Handler handler) {
        _handler = handler;
    }

    @Override
    public UpnpError onAction(ActionInfo info) {
        if (_handler == null) {
           Log.e(TAG, "handler is null");
           return UpnpError.UPNP_ACTION_NOT_IMPLEMENTED;
        }

        if (info.getAction().getName().equals(ACTION_Next)) {
            return handle_Next(info);
        }

        if (info.getAction().getName().equals(ACTION_Seek)) {
            return handle_Seek(info);
        }

        if (info.getAction().getName().equals(ACTION_Play)) {
            return handle_Play(info);
        }

        if (info.getAction().getName().equals(ACTION_GetTransportInfo)) {
            return handle_GetTransportInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_Previous)) {
            return handle_Previous(info);
        }

        if (info.getAction().getName().equals(ACTION_GetMediaInfo)) {
            return handle_GetMediaInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_GetDeviceCapabilities)) {
            return handle_GetDeviceCapabilities(info);
        }

        if (info.getAction().getName().equals(ACTION_Pause)) {
            return handle_Pause(info);
        }

        if (info.getAction().getName().equals(ACTION_GetCurrentTransportActions)) {
            return handle_GetCurrentTransportActions(info);
        }

        if (info.getAction().getName().equals(ACTION_SetAVTransportURI)) {
            return handle_SetAVTransportURI(info);
        }

        if (info.getAction().getName().equals(ACTION_GetPositionInfo)) {
            return handle_GetPositionInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_Stop)) {
            return handle_Stop(info);
        }

        if (info.getAction().getName().equals(ACTION_GetTransportSettings)) {
            return handle_GetTransportSettings(info);
        }

        return UpnpError.UPNP_ACTION_NOT_IMPLEMENTED;
    }

    public void sendEvents() {
        EventInfo info = EventInfoCreator.create(_service);

        try {
            UpnpManager.getHost().sendEvents(info);
        } catch (UpnpException e) {
            e.printStackTrace();
        }
    }

}
