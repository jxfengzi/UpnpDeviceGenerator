/* Automatic generated by DeviceToClazz */

package upnps.api.host.device.mitv;

import android.util.Log;

import miui.upnp.typedef.datatype.DataType;
import miui.upnp.typedef.device.Action;
import miui.upnp.typedef.device.Device;
import miui.upnp.typedef.device.urn.ServiceType;
import miui.upnp.typedef.error.UpnpError;
import miui.upnp.typedef.device.Argument;
import miui.upnp.typedef.device.Service;
import miui.upnp.typedef.device.invocation.ActionInfo;
import miui.upnp.typedef.device.invocation.EventInfo;
import miui.upnp.typedef.device.invocation.EventInfoCreator;
import miui.upnp.typedef.exception.UpnpException;

import miui.upnp.typedef.property.AllowedValueList;
import miui.upnp.typedef.property.AllowedValueRange;
import miui.upnp.typedef.property.PropertyDefinition;
import miui.upnp.manager.UpnpManager;
import miui.upnp.manager.host.ServiceHandler;

public class MiTVSettings extends ServiceHandler {
    private static final String TAG = "MiTVSettings";
    private static final ServiceType SERVICE_TYPE =  new ServiceType("MiTVSettings", "0.1");

    //-------------------------------------------------------
    // Action Names (18)
    //-------------------------------------------------------
    public static final String ACTION_SetPowerState = "SetPowerState";
    public static final String _SetPowerState_ARG_PowerState = "PowerState";
    public static final String ACTION_SetInputSource = "SetInputSource";
    public static final String _SetInputSource_ARG_inInputSource = "inInputSource";
    public static final String ACTION_CancelNotification = "CancelNotification";
    public static final String _CancelNotification_ARG_InNotification = "InNotification";
    public static final String ACTION_SetNetwork = "SetNetwork";
    public static final String _SetNetwork_ARG_InNetworking = "InNetworking";
    public static final String _SetNetwork_ARG_InPassword = "InPassword";
    public static final String ACTION_SetResolution = "SetResolution";
    public static final String _SetResolution_ARG_InResolution = "InResolution";
    public static final String ACTION_GetVersion = "GetVersion";
    public static final String _GetVersion_ARG_RetVersion = "RetVersion";
    public static final String ACTION_GetNetworkSpeed = "GetNetworkSpeed";
    public static final String _GetNetworkSpeed_ARG_RetSpeed = "RetSpeed";
    public static final String ACTION_GetResolution = "GetResolution";
    public static final String _GetResolution_ARG_RetResolution = "RetResolution";
    public static final String ACTION_SendNotification = "SendNotification";
    public static final String _SendNotification_ARG_InNotification = "InNotification";
    public static final String ACTION_SetVolume = "SetVolume";
    public static final String _SetVolume_ARG_InVolume = "InVolume";
    public static final String ACTION_GetNetworking = "GetNetworking";
    public static final String _GetNetworking_ARG_RetNetworking = "RetNetworking";
    public static final String ACTION_GetDeviceName = "GetDeviceName";
    public static final String _GetDeviceName_ARG_RetDeviceName = "RetDeviceName";
    public static final String ACTION_GetVolume = "GetVolume";
    public static final String _GetVolume_ARG_RetVolume = "RetVolume";
    public static final String ACTION_UpgradeSystem = "UpgradeSystem";
    public static final String _UpgradeSystem_ARG_InVersion = "InVersion";
    public static final String ACTION_GetPowerState = "GetPowerState";
    public static final String _GetPowerState_ARG_PowerState = "PowerState";
    public static final String ACTION_GetScannedWifiList = "GetScannedWifiList";
    public static final String _GetScannedWifiList_ARG_RetScannedWifiList = "RetScannedWifiList";
    public static final String ACTION_GetInputSource = "GetInputSource";
    public static final String _GetInputSource_ARG_RetInputSource = "RetInputSource";
    public static final String ACTION_SetDeviceName = "SetDeviceName";
    public static final String _SetDeviceName_ARG_InDeviceName = "InDeviceName";

    //-------------------------------------------------------
    // Property Name (11)
    //-------------------------------------------------------
    public static final String PROPERTY_Networking = "Networking";
    public static final String PROPERTY_DeviceName = "DeviceName";
    public static final String PROPERTY_Resolution = "Resolution";
    public static final String PROPERTY_Volume = "Volume";
    public static final String PROPERTY_Power = "Power";
    public static final String PROPERTY_Password = "Password";
    public static final String PROPERTY_InputSource = "InputSource";
    public static final String PROPERTY_NetworkSpeed = "NetworkSpeed";
    public static final String PROPERTY_Version = "Version";
    public static final String PROPERTY_Notification = "Notification";
    public static final String PROPERTY_ScannedWifiList = "ScannedWifiList";

    //-------------------------------------------------------
    // Property value defined (2)
    //-------------------------------------------------------

    public enum Resolution {
        UNDEFINED,
        V_E4K2K30HZ,
        V_E4K2KP60HZ,
        V_E4K2KP50HZ,
        V_E1080P60HZ,
        V_E1080P50HZ,
        V_E720P60HZ,
        V_E720P50HZ;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_E4K2K30HZ = "E4K2K30HZ";
        private static final String CONST_V_E4K2KP60HZ = "E4K2KP60HZ";
        private static final String CONST_V_E4K2KP50HZ = "E4K2KP50HZ";
        private static final String CONST_V_E1080P60HZ = "E1080P60HZ";
        private static final String CONST_V_E1080P50HZ = "E1080P50HZ";
        private static final String CONST_V_E720P60HZ = "E720P60HZ";
        private static final String CONST_V_E720P50HZ = "E720P50HZ";

        public static Resolution retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_E4K2K30HZ)) {
                return V_E4K2K30HZ;
            }

            if (value.equals(CONST_V_E4K2KP60HZ)) {
                return V_E4K2KP60HZ;
            }

            if (value.equals(CONST_V_E4K2KP50HZ)) {
                return V_E4K2KP50HZ;
            }

            if (value.equals(CONST_V_E1080P60HZ)) {
                return V_E1080P60HZ;
            }

            if (value.equals(CONST_V_E1080P50HZ)) {
                return V_E1080P50HZ;
            }

            if (value.equals(CONST_V_E720P60HZ)) {
                return V_E720P60HZ;
            }

            if (value.equals(CONST_V_E720P50HZ)) {
                return V_E720P50HZ;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_E4K2K30HZ:
                    value = CONST_V_E4K2K30HZ;
                    break;

                case V_E4K2KP60HZ:
                    value = CONST_V_E4K2KP60HZ;
                    break;

                case V_E4K2KP50HZ:
                    value = CONST_V_E4K2KP50HZ;
                    break;

                case V_E1080P60HZ:
                    value = CONST_V_E1080P60HZ;
                    break;

                case V_E1080P50HZ:
                    value = CONST_V_E1080P50HZ;
                    break;

                case V_E720P60HZ:
                    value = CONST_V_E720P60HZ;
                    break;

                case V_E720P50HZ:
                    value = CONST_V_E720P50HZ;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum Power {
        UNDEFINED,
        V_SLEEP,
        V_RUNNING;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_SLEEP = "SLEEP";
        private static final String CONST_V_RUNNING = "RUNNING";

        public static Power retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_SLEEP)) {
                return V_SLEEP;
            }

            if (value.equals(CONST_V_RUNNING)) {
                return V_RUNNING;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_SLEEP:
                    value = CONST_V_SLEEP;
                    break;

                case V_RUNNING:
                    value = CONST_V_RUNNING;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // Action Result (18)
    //-------------------------------------------------------

    // SetPowerState has no Result

    // SetInputSource has no Result

    // CancelNotification has no Result

    // SetNetwork has no Result

    // SetResolution has no Result

    public class GetVersion_Result {
        public String theRetVersion;
    }

    public class GetNetworkSpeed_Result {
        public Long theRetSpeed;
    }

    public class GetResolution_Result {
        public Resolution theRetResolution;
    }

    // SendNotification has no Result

    // SetVolume has no Result

    public class GetNetworking_Result {
        public String theRetNetworking;
    }

    public class GetDeviceName_Result {
        public String theRetDeviceName;
    }

    public class GetVolume_Result {
        public Integer theRetVolume;
    }

    // UpgradeSystem has no Result

    public class GetPowerState_Result {
        public Power thePowerState;
    }

    public class GetScannedWifiList_Result {
        public String theRetScannedWifiList;
    }

    public class GetInputSource_Result {
        public String theRetInputSource;
    }

    // SetDeviceName has no Result


    //-------------------------------------------------------
    // Action Handler (18)
    //-------------------------------------------------------

    public interface Handler {
        UpnpError onSetPowerState(Power thePowerState);
        UpnpError onSetInputSource(String theinInputSource);
        UpnpError onCancelNotification(String theInNotification);
        UpnpError onSetNetwork(String theInNetworking, String theInPassword);
        UpnpError onSetResolution(Resolution theInResolution);
        UpnpError onGetVersion(GetVersion_Result result);
        UpnpError onGetNetworkSpeed(GetNetworkSpeed_Result result);
        UpnpError onGetResolution(GetResolution_Result result);
        UpnpError onSendNotification(String theInNotification);
        UpnpError onSetVolume(Integer theInVolume);
        UpnpError onGetNetworking(GetNetworking_Result result);
        UpnpError onGetDeviceName(GetDeviceName_Result result);
        UpnpError onGetVolume(GetVolume_Result result);
        UpnpError onUpgradeSystem(String theInVersion);
        UpnpError onGetPowerState(GetPowerState_Result result);
        UpnpError onGetScannedWifiList(GetScannedWifiList_Result result);
        UpnpError onGetInputSource(GetInputSource_Result result);
        UpnpError onSetDeviceName(String theInDeviceName);
    }

    private UpnpError handle_SetPowerState(ActionInfo info) {
        Power thePowerState = Power.retrieveType((String)info.getArgumentValue(_SetPowerState_ARG_PowerState));

        UpnpError error = _handler.onSetPowerState(thePowerState);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SetInputSource(ActionInfo info) {
        String theinInputSource = (String)info.getArgumentValue(_SetInputSource_ARG_inInputSource);

        UpnpError error = _handler.onSetInputSource(theinInputSource);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_CancelNotification(ActionInfo info) {
        String theInNotification = (String)info.getArgumentValue(_CancelNotification_ARG_InNotification);

        UpnpError error = _handler.onCancelNotification(theInNotification);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SetNetwork(ActionInfo info) {
        String theInNetworking = (String)info.getArgumentValue(_SetNetwork_ARG_InNetworking);
        String theInPassword = (String)info.getArgumentValue(_SetNetwork_ARG_InPassword);

        UpnpError error = _handler.onSetNetwork(theInNetworking, theInPassword);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SetResolution(ActionInfo info) {
        Resolution theInResolution = Resolution.retrieveType((String)info.getArgumentValue(_SetResolution_ARG_InResolution));

        UpnpError error = _handler.onSetResolution(theInResolution);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetVersion(ActionInfo info) {
        GetVersion_Result result = new GetVersion_Result();

        UpnpError error = _handler.onGetVersion(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetVersion_ARG_RetVersion, result.theRetVersion, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetNetworkSpeed(ActionInfo info) {
        GetNetworkSpeed_Result result = new GetNetworkSpeed_Result();

        UpnpError error = _handler.onGetNetworkSpeed(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetNetworkSpeed_ARG_RetSpeed, result.theRetSpeed, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetResolution(ActionInfo info) {
        GetResolution_Result result = new GetResolution_Result();

        UpnpError error = _handler.onGetResolution(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetResolution_ARG_RetResolution, result.theRetResolution.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SendNotification(ActionInfo info) {
        String theInNotification = (String)info.getArgumentValue(_SendNotification_ARG_InNotification);

        UpnpError error = _handler.onSendNotification(theInNotification);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SetVolume(ActionInfo info) {
        Integer theInVolume = (Integer)info.getArgumentValue(_SetVolume_ARG_InVolume);

        UpnpError error = _handler.onSetVolume(theInVolume);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetNetworking(ActionInfo info) {
        GetNetworking_Result result = new GetNetworking_Result();

        UpnpError error = _handler.onGetNetworking(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetNetworking_ARG_RetNetworking, result.theRetNetworking, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetDeviceName(ActionInfo info) {
        GetDeviceName_Result result = new GetDeviceName_Result();

        UpnpError error = _handler.onGetDeviceName(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetDeviceName_ARG_RetDeviceName, result.theRetDeviceName, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetVolume(ActionInfo info) {
        GetVolume_Result result = new GetVolume_Result();

        UpnpError error = _handler.onGetVolume(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetVolume_ARG_RetVolume, result.theRetVolume, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_UpgradeSystem(ActionInfo info) {
        String theInVersion = (String)info.getArgumentValue(_UpgradeSystem_ARG_InVersion);

        UpnpError error = _handler.onUpgradeSystem(theInVersion);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetPowerState(ActionInfo info) {
        GetPowerState_Result result = new GetPowerState_Result();

        UpnpError error = _handler.onGetPowerState(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetPowerState_ARG_PowerState, result.thePowerState.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetScannedWifiList(ActionInfo info) {
        GetScannedWifiList_Result result = new GetScannedWifiList_Result();

        UpnpError error = _handler.onGetScannedWifiList(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetScannedWifiList_ARG_RetScannedWifiList, result.theRetScannedWifiList, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_GetInputSource(ActionInfo info) {
        GetInputSource_Result result = new GetInputSource_Result();

        UpnpError error = _handler.onGetInputSource(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetInputSource_ARG_RetInputSource, result.theRetInputSource, Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SetDeviceName(ActionInfo info) {
        String theInDeviceName = (String)info.getArgumentValue(_SetDeviceName_ARG_InDeviceName);

        UpnpError error = _handler.onSetDeviceName(theInDeviceName);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    //-------------------------------------------------------
    // Method
    //-------------------------------------------------------

    private Service _service;
    private Handler _handler;

    public MiTVSettings(Device device) throws UpnpException {
        _service = new Service(SERVICE_TYPE);
        _service.setServiceId(toServiceId(SERVICE_TYPE));
        _service.setScpdUrl(toScpdUrl(device.getDeviceId(), SERVICE_TYPE));
        _service.setControlUrl(toCtrlUrl(device.getDeviceId(), SERVICE_TYPE));
        _service.setEventSubUrl(toEventUrl(device.getDeviceId(), SERVICE_TYPE));

        Action _SetPowerState = new Action(ACTION_SetPowerState);
        _SetPowerState.addArgument(new Argument(_SetPowerState_ARG_PowerState, Argument.Direction.IN, PROPERTY_Power));
        _service.addAction(_SetPowerState);

        Action _SetInputSource = new Action(ACTION_SetInputSource);
        _SetInputSource.addArgument(new Argument(_SetInputSource_ARG_inInputSource, Argument.Direction.IN, PROPERTY_InputSource));
        _service.addAction(_SetInputSource);

        Action _CancelNotification = new Action(ACTION_CancelNotification);
        _CancelNotification.addArgument(new Argument(_CancelNotification_ARG_InNotification, Argument.Direction.IN, PROPERTY_Notification));
        _service.addAction(_CancelNotification);

        Action _SetNetwork = new Action(ACTION_SetNetwork);
        _SetNetwork.addArgument(new Argument(_SetNetwork_ARG_InNetworking, Argument.Direction.IN, PROPERTY_Networking));
        _SetNetwork.addArgument(new Argument(_SetNetwork_ARG_InPassword, Argument.Direction.IN, PROPERTY_Password));
        _service.addAction(_SetNetwork);

        Action _SetResolution = new Action(ACTION_SetResolution);
        _SetResolution.addArgument(new Argument(_SetResolution_ARG_InResolution, Argument.Direction.IN, PROPERTY_Resolution));
        _service.addAction(_SetResolution);

        Action _GetVersion = new Action(ACTION_GetVersion);
        _GetVersion.addArgument(new Argument(_GetVersion_ARG_RetVersion, Argument.Direction.OUT, PROPERTY_Version));
        _service.addAction(_GetVersion);

        Action _GetNetworkSpeed = new Action(ACTION_GetNetworkSpeed);
        _GetNetworkSpeed.addArgument(new Argument(_GetNetworkSpeed_ARG_RetSpeed, Argument.Direction.OUT, PROPERTY_NetworkSpeed));
        _service.addAction(_GetNetworkSpeed);

        Action _GetResolution = new Action(ACTION_GetResolution);
        _GetResolution.addArgument(new Argument(_GetResolution_ARG_RetResolution, Argument.Direction.OUT, PROPERTY_Resolution));
        _service.addAction(_GetResolution);

        Action _SendNotification = new Action(ACTION_SendNotification);
        _SendNotification.addArgument(new Argument(_SendNotification_ARG_InNotification, Argument.Direction.IN, PROPERTY_Notification));
        _service.addAction(_SendNotification);

        Action _SetVolume = new Action(ACTION_SetVolume);
        _SetVolume.addArgument(new Argument(_SetVolume_ARG_InVolume, Argument.Direction.IN, PROPERTY_Volume));
        _service.addAction(_SetVolume);

        Action _GetNetworking = new Action(ACTION_GetNetworking);
        _GetNetworking.addArgument(new Argument(_GetNetworking_ARG_RetNetworking, Argument.Direction.OUT, PROPERTY_Networking));
        _service.addAction(_GetNetworking);

        Action _GetDeviceName = new Action(ACTION_GetDeviceName);
        _GetDeviceName.addArgument(new Argument(_GetDeviceName_ARG_RetDeviceName, Argument.Direction.OUT, PROPERTY_DeviceName));
        _service.addAction(_GetDeviceName);

        Action _GetVolume = new Action(ACTION_GetVolume);
        _GetVolume.addArgument(new Argument(_GetVolume_ARG_RetVolume, Argument.Direction.OUT, PROPERTY_Volume));
        _service.addAction(_GetVolume);

        Action _UpgradeSystem = new Action(ACTION_UpgradeSystem);
        _UpgradeSystem.addArgument(new Argument(_UpgradeSystem_ARG_InVersion, Argument.Direction.IN, PROPERTY_Version));
        _service.addAction(_UpgradeSystem);

        Action _GetPowerState = new Action(ACTION_GetPowerState);
        _GetPowerState.addArgument(new Argument(_GetPowerState_ARG_PowerState, Argument.Direction.OUT, PROPERTY_Power));
        _service.addAction(_GetPowerState);

        Action _GetScannedWifiList = new Action(ACTION_GetScannedWifiList);
        _GetScannedWifiList.addArgument(new Argument(_GetScannedWifiList_ARG_RetScannedWifiList, Argument.Direction.OUT, PROPERTY_ScannedWifiList));
        _service.addAction(_GetScannedWifiList);

        Action _GetInputSource = new Action(ACTION_GetInputSource);
        _GetInputSource.addArgument(new Argument(_GetInputSource_ARG_RetInputSource, Argument.Direction.OUT, PROPERTY_InputSource));
        _service.addAction(_GetInputSource);

        Action _SetDeviceName = new Action(ACTION_SetDeviceName);
        _SetDeviceName.addArgument(new Argument(_SetDeviceName_ARG_InDeviceName, Argument.Direction.IN, PROPERTY_DeviceName));
        _service.addAction(_SetDeviceName);

        PropertyDefinition _Networking = new PropertyDefinition(PROPERTY_Networking, DataType.STRING, true);
        _service.addProperty(_Networking);

        PropertyDefinition _DeviceName = new PropertyDefinition(PROPERTY_DeviceName, DataType.STRING, true);
        _service.addProperty(_DeviceName);

        PropertyDefinition _Resolution = new PropertyDefinition(PROPERTY_Resolution, DataType.STRING, false);
        AllowedValueList _Resolution_list = new AllowedValueList(DataType.STRING);
        _Resolution_list.appendAllowedValue("E4K2K30HZ");
        _Resolution_list.appendAllowedValue("E4K2KP60HZ");
        _Resolution_list.appendAllowedValue("E4K2KP50HZ");
        _Resolution_list.appendAllowedValue("E1080P60HZ");
        _Resolution_list.appendAllowedValue("E1080P50HZ");
        _Resolution_list.appendAllowedValue("E720P60HZ");
        _Resolution_list.appendAllowedValue("E720P50HZ");
        _Resolution.setAllowedValueList(_Resolution_list);
        _service.addProperty(_Resolution);

        PropertyDefinition _Volume = new PropertyDefinition(PROPERTY_Volume, DataType.UI1, false);
        _Volume.setAllowedValueRange(AllowedValueRange.create(DataType.UI1, Integer.valueOf(0), Integer.valueOf(100)));
        _service.addProperty(_Volume);

        PropertyDefinition _Power = new PropertyDefinition(PROPERTY_Power, DataType.STRING, true);
        AllowedValueList _Power_list = new AllowedValueList(DataType.STRING);
        _Power_list.appendAllowedValue("SLEEP");
        _Power_list.appendAllowedValue("RUNNING");
        _Power.setAllowedValueList(_Power_list);
        _service.addProperty(_Power);

        PropertyDefinition _Password = new PropertyDefinition(PROPERTY_Password, DataType.STRING, false);
        _service.addProperty(_Password);

        PropertyDefinition _InputSource = new PropertyDefinition(PROPERTY_InputSource, DataType.STRING, true);
        _service.addProperty(_InputSource);

        PropertyDefinition _NetworkSpeed = new PropertyDefinition(PROPERTY_NetworkSpeed, DataType.UI4, false);
        _service.addProperty(_NetworkSpeed);

        PropertyDefinition _Version = new PropertyDefinition(PROPERTY_Version, DataType.STRING, true);
        _service.addProperty(_Version);

        PropertyDefinition _Notification = new PropertyDefinition(PROPERTY_Notification, DataType.STRING, false);
        _service.addProperty(_Notification);

        PropertyDefinition _ScannedWifiList = new PropertyDefinition(PROPERTY_ScannedWifiList, DataType.STRING, false);
        _service.addProperty(_ScannedWifiList);

        device.addService(_service);
    }

    public void setHandler(Handler handler) {
        _handler = handler;
    }

    @Override
    public UpnpError onAction(ActionInfo info) {
        if (_handler == null) {
           Log.e(TAG, "handler is null");
           return UpnpError.UPNP_ACTION_NOT_IMPLEMENTED;
        }

        if (info.getAction().getName().equals(ACTION_SetPowerState)) {
            return handle_SetPowerState(info);
        }

        if (info.getAction().getName().equals(ACTION_SetInputSource)) {
            return handle_SetInputSource(info);
        }

        if (info.getAction().getName().equals(ACTION_CancelNotification)) {
            return handle_CancelNotification(info);
        }

        if (info.getAction().getName().equals(ACTION_SetNetwork)) {
            return handle_SetNetwork(info);
        }

        if (info.getAction().getName().equals(ACTION_SetResolution)) {
            return handle_SetResolution(info);
        }

        if (info.getAction().getName().equals(ACTION_GetVersion)) {
            return handle_GetVersion(info);
        }

        if (info.getAction().getName().equals(ACTION_GetNetworkSpeed)) {
            return handle_GetNetworkSpeed(info);
        }

        if (info.getAction().getName().equals(ACTION_GetResolution)) {
            return handle_GetResolution(info);
        }

        if (info.getAction().getName().equals(ACTION_SendNotification)) {
            return handle_SendNotification(info);
        }

        if (info.getAction().getName().equals(ACTION_SetVolume)) {
            return handle_SetVolume(info);
        }

        if (info.getAction().getName().equals(ACTION_GetNetworking)) {
            return handle_GetNetworking(info);
        }

        if (info.getAction().getName().equals(ACTION_GetDeviceName)) {
            return handle_GetDeviceName(info);
        }

        if (info.getAction().getName().equals(ACTION_GetVolume)) {
            return handle_GetVolume(info);
        }

        if (info.getAction().getName().equals(ACTION_UpgradeSystem)) {
            return handle_UpgradeSystem(info);
        }

        if (info.getAction().getName().equals(ACTION_GetPowerState)) {
            return handle_GetPowerState(info);
        }

        if (info.getAction().getName().equals(ACTION_GetScannedWifiList)) {
            return handle_GetScannedWifiList(info);
        }

        if (info.getAction().getName().equals(ACTION_GetInputSource)) {
            return handle_GetInputSource(info);
        }

        if (info.getAction().getName().equals(ACTION_SetDeviceName)) {
            return handle_SetDeviceName(info);
        }

        return UpnpError.UPNP_ACTION_NOT_IMPLEMENTED;
    }

    public void sendEvents() {
        if (! _service.isPropertyChanged()) {
            return;
        }

        EventInfo info = EventInfoCreator.create(_service);

        try {
            UpnpManager.getInstance().getHost().sendEvents(info);
        } catch (UpnpException e) {
            e.printStackTrace();
        }

        _service.cleanPropertyState();
    }

    public void setNetworking(String theNetworking) {
         _service.setPropertyValue(PROPERTY_Networking, theNetworking);
    }

    public String getNetworking() {
         return (String)_service.getPropertyValue(PROPERTY_Networking);
    }

    public void setDeviceName(String theDeviceName) {
         _service.setPropertyValue(PROPERTY_DeviceName, theDeviceName);
    }

    public String getDeviceName() {
         return (String)_service.getPropertyValue(PROPERTY_DeviceName);
    }

    public void setResolution(Resolution theResolution) {
         _service.setPropertyValue(PROPERTY_Resolution, theResolution.getValue());
    }

    public Resolution getResolution() {
         return Resolution.retrieveType((String)_service.getPropertyValue(PROPERTY_Resolution));
    }

    public void setVolume(Integer theVolume) {
         _service.setPropertyValue(PROPERTY_Volume, theVolume);
    }

    public Integer getVolume() {
         return (Integer)_service.getPropertyValue(PROPERTY_Volume);
    }

    public void setPower(Power thePower) {
         _service.setPropertyValue(PROPERTY_Power, thePower.getValue());
    }

    public Power getPower() {
         return Power.retrieveType((String)_service.getPropertyValue(PROPERTY_Power));
    }

    public void setPassword(String thePassword) {
         _service.setPropertyValue(PROPERTY_Password, thePassword);
    }

    public String getPassword() {
         return (String)_service.getPropertyValue(PROPERTY_Password);
    }

    public void setInputSource(String theInputSource) {
         _service.setPropertyValue(PROPERTY_InputSource, theInputSource);
    }

    public String getInputSource() {
         return (String)_service.getPropertyValue(PROPERTY_InputSource);
    }

    public void setNetworkSpeed(Long theNetworkSpeed) {
         _service.setPropertyValue(PROPERTY_NetworkSpeed, theNetworkSpeed);
    }

    public Long getNetworkSpeed() {
         return (Long)_service.getPropertyValue(PROPERTY_NetworkSpeed);
    }

    public void setVersion(String theVersion) {
         _service.setPropertyValue(PROPERTY_Version, theVersion);
    }

    public String getVersion() {
         return (String)_service.getPropertyValue(PROPERTY_Version);
    }

    public void setNotification(String theNotification) {
         _service.setPropertyValue(PROPERTY_Notification, theNotification);
    }

    public String getNotification() {
         return (String)_service.getPropertyValue(PROPERTY_Notification);
    }

    public void setScannedWifiList(String theScannedWifiList) {
         _service.setPropertyValue(PROPERTY_ScannedWifiList, theScannedWifiList);
    }

    public String getScannedWifiList() {
         return (String)_service.getPropertyValue(PROPERTY_ScannedWifiList);
    }

}
