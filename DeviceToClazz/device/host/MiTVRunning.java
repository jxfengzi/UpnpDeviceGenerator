/* Automatic generated by DeviceToClazz */

package upnps.api.host.device.mitv;

import android.util.Log;

import miui.upnp.typedef.datatype.DataType;
import miui.upnp.typedef.device.Action;
import miui.upnp.typedef.device.Device;
import miui.upnp.typedef.device.urn.ServiceType;
import miui.upnp.typedef.error.UpnpError;
import miui.upnp.typedef.device.Argument;
import miui.upnp.typedef.device.Service;
import miui.upnp.typedef.device.invocation.ActionInfo;
import miui.upnp.typedef.device.invocation.EventInfo;
import miui.upnp.typedef.device.invocation.EventInfoCreator;
import miui.upnp.typedef.exception.UpnpException;

import miui.upnp.typedef.property.AllowedValueList;
import miui.upnp.typedef.property.AllowedValueRange;
import miui.upnp.typedef.property.PropertyDefinition;
import miui.upnp.manager.UpnpManager;
import miui.upnp.manager.host.ServiceHandler;

public class MiTVRunning extends ServiceHandler {
    private static final String TAG = "MiTVRunning";
    private static final ServiceType SERVICE_TYPE =  new ServiceType("MiTVRunning", "0.1");

    //-------------------------------------------------------
    // Action Names (5)
    //-------------------------------------------------------
    public static final String ACTION_GetPlayState = "GetPlayState";
    public static final String _GetPlayState_ARG_OutPlayState = "OutPlayState";
    public static final String ACTION_SetPlayState = "SetPlayState";
    public static final String _SetPlayState_ARG_InPlayState = "InPlayState";
    public static final String ACTION_SendCommand = "SendCommand";
    public static final String _SendCommand_ARG_InApplication = "InApplication";
    public static final String _SendCommand_ARG_InCommand = "InCommand";
    public static final String ACTION_StopApp = "StopApp";
    public static final String _StopApp_ARG_InApplication = "InApplication";
    public static final String ACTION_StartApp = "StartApp";
    public static final String _StartApp_ARG_InApplication = "InApplication";

    //-------------------------------------------------------
    // Property Name (4)
    //-------------------------------------------------------
    public static final String PROPERTY_RunningApp = "RunningApp";
    public static final String PROPERTY_A_ARG_TYPE_Command = "A_ARG_TYPE_Command";
    public static final String PROPERTY_PlayState = "PlayState";
    public static final String PROPERTY_A_ARG_TYPE_Application = "A_ARG_TYPE_Application";

    //-------------------------------------------------------
    // Property value defined (1)
    //-------------------------------------------------------

    public enum PlayState {
        UNDEFINED,
        V_Playing,
        V_Paused,
        V_Stopped;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Playing = "Playing";
        private static final String CONST_V_Paused = "Paused";
        private static final String CONST_V_Stopped = "Stopped";

        public static PlayState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Playing)) {
                return V_Playing;
            }

            if (value.equals(CONST_V_Paused)) {
                return V_Paused;
            }

            if (value.equals(CONST_V_Stopped)) {
                return V_Stopped;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Playing:
                    value = CONST_V_Playing;
                    break;

                case V_Paused:
                    value = CONST_V_Paused;
                    break;

                case V_Stopped:
                    value = CONST_V_Stopped;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // Action Result (5)
    //-------------------------------------------------------

    public class GetPlayState_Result {
        public PlayState theOutPlayState;
    }

    // SetPlayState has no Result

    // SendCommand has no Result

    // StopApp has no Result

    // StartApp has no Result


    //-------------------------------------------------------
    // Action Handler (5)
    //-------------------------------------------------------

    public interface Handler {
        UpnpError onGetPlayState(GetPlayState_Result result);
        UpnpError onSetPlayState(PlayState theInPlayState);
        UpnpError onSendCommand(String theInApplication, String theInCommand);
        UpnpError onStopApp(String theInApplication);
        UpnpError onStartApp(String theInApplication);
    }

    private UpnpError handle_GetPlayState(ActionInfo info) {
        GetPlayState_Result result = new GetPlayState_Result();

        UpnpError error = _handler.onGetPlayState(result);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        if (! info.setArgumentValue(_GetPlayState_ARG_OutPlayState, result.theOutPlayState.getValue(), Argument.Direction.OUT)) {
            Log.d(TAG, "setArgumentValue: false");
            return UpnpError.UPNP_ARGUMENT_VALUE_INVALID;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SetPlayState(ActionInfo info) {
        PlayState theInPlayState = PlayState.retrieveType((String)info.getArgumentValue(_SetPlayState_ARG_InPlayState));

        UpnpError error = _handler.onSetPlayState(theInPlayState);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_SendCommand(ActionInfo info) {
        String theInApplication = (String)info.getArgumentValue(_SendCommand_ARG_InApplication);
        String theInCommand = (String)info.getArgumentValue(_SendCommand_ARG_InCommand);

        UpnpError error = _handler.onSendCommand(theInApplication, theInCommand);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_StopApp(ActionInfo info) {
        String theInApplication = (String)info.getArgumentValue(_StopApp_ARG_InApplication);

        UpnpError error = _handler.onStopApp(theInApplication);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    private UpnpError handle_StartApp(ActionInfo info) {
        String theInApplication = (String)info.getArgumentValue(_StartApp_ARG_InApplication);

        UpnpError error = _handler.onStartApp(theInApplication);
        if (! error.equals(UpnpError.OK)) {
            return error;
        }

        return UpnpError.OK;
    }

    //-------------------------------------------------------
    // Method
    //-------------------------------------------------------

    private Service _service;
    private Handler _handler;

    public MiTVRunning(Device device) throws UpnpException {
        _service = new Service(SERVICE_TYPE);
        _service.setServiceId(toServiceId(SERVICE_TYPE));
        _service.setScpdUrl(toScpdUrl(device.getDeviceId(), SERVICE_TYPE));
        _service.setControlUrl(toCtrlUrl(device.getDeviceId(), SERVICE_TYPE));
        _service.setEventSubUrl(toEventUrl(device.getDeviceId(), SERVICE_TYPE));

        Action _GetPlayState = new Action(ACTION_GetPlayState);
        _GetPlayState.addArgument(new Argument(_GetPlayState_ARG_OutPlayState, Argument.Direction.OUT, PROPERTY_PlayState));
        _service.addAction(_GetPlayState);

        Action _SetPlayState = new Action(ACTION_SetPlayState);
        _SetPlayState.addArgument(new Argument(_SetPlayState_ARG_InPlayState, Argument.Direction.IN, PROPERTY_PlayState));
        _service.addAction(_SetPlayState);

        Action _SendCommand = new Action(ACTION_SendCommand);
        _SendCommand.addArgument(new Argument(_SendCommand_ARG_InApplication, Argument.Direction.IN, PROPERTY_A_ARG_TYPE_Application));
        _SendCommand.addArgument(new Argument(_SendCommand_ARG_InCommand, Argument.Direction.IN, PROPERTY_A_ARG_TYPE_Command));
        _service.addAction(_SendCommand);

        Action _StopApp = new Action(ACTION_StopApp);
        _StopApp.addArgument(new Argument(_StopApp_ARG_InApplication, Argument.Direction.IN, PROPERTY_A_ARG_TYPE_Application));
        _service.addAction(_StopApp);

        Action _StartApp = new Action(ACTION_StartApp);
        _StartApp.addArgument(new Argument(_StartApp_ARG_InApplication, Argument.Direction.IN, PROPERTY_A_ARG_TYPE_Application));
        _service.addAction(_StartApp);

        PropertyDefinition _RunningApp = new PropertyDefinition(PROPERTY_RunningApp, DataType.STRING, true);
        _service.addProperty(_RunningApp);

        PropertyDefinition _A_ARG_TYPE_Command = new PropertyDefinition(PROPERTY_A_ARG_TYPE_Command, DataType.STRING, false);
        _service.addProperty(_A_ARG_TYPE_Command);

        PropertyDefinition _PlayState = new PropertyDefinition(PROPERTY_PlayState, DataType.STRING, true);
        AllowedValueList _PlayState_list = new AllowedValueList(DataType.STRING);
        _PlayState_list.appendAllowedValue("Playing");
        _PlayState_list.appendAllowedValue("Paused");
        _PlayState_list.appendAllowedValue("Stopped");
        _PlayState.setAllowedValueList(_PlayState_list);
        _service.addProperty(_PlayState);

        PropertyDefinition _A_ARG_TYPE_Application = new PropertyDefinition(PROPERTY_A_ARG_TYPE_Application, DataType.STRING, false);
        _service.addProperty(_A_ARG_TYPE_Application);

        device.addService(_service);
    }

    public void setHandler(Handler handler) {
        _handler = handler;
    }

    @Override
    public UpnpError onAction(ActionInfo info) {
        if (_handler == null) {
           Log.e(TAG, "handler is null");
           return UpnpError.UPNP_ACTION_NOT_IMPLEMENTED;
        }

        if (info.getAction().getName().equals(ACTION_GetPlayState)) {
            return handle_GetPlayState(info);
        }

        if (info.getAction().getName().equals(ACTION_SetPlayState)) {
            return handle_SetPlayState(info);
        }

        if (info.getAction().getName().equals(ACTION_SendCommand)) {
            return handle_SendCommand(info);
        }

        if (info.getAction().getName().equals(ACTION_StopApp)) {
            return handle_StopApp(info);
        }

        if (info.getAction().getName().equals(ACTION_StartApp)) {
            return handle_StartApp(info);
        }

        return UpnpError.UPNP_ACTION_NOT_IMPLEMENTED;
    }

    public void sendEvents() {
        if (! _service.isPropertyChanged()) {
            return;
        }

        EventInfo info = EventInfoCreator.create(_service);

        try {
            UpnpManager.getInstance().getHost().sendEvents(info);
        } catch (UpnpException e) {
            e.printStackTrace();
        }

        _service.cleanPropertyState();
    }

    public void setRunningApp(String theRunningApp) {
         _service.setPropertyValue(PROPERTY_RunningApp, theRunningApp);
    }

    public String getRunningApp() {
         return (String)_service.getPropertyValue(PROPERTY_RunningApp);
    }

    public void setA_ARG_TYPE_Command(String theA_ARG_TYPE_Command) {
         _service.setPropertyValue(PROPERTY_A_ARG_TYPE_Command, theA_ARG_TYPE_Command);
    }

    public String getA_ARG_TYPE_Command() {
         return (String)_service.getPropertyValue(PROPERTY_A_ARG_TYPE_Command);
    }

    public void setPlayState(PlayState thePlayState) {
         _service.setPropertyValue(PROPERTY_PlayState, thePlayState.getValue());
    }

    public PlayState getPlayState() {
         return PlayState.retrieveType((String)_service.getPropertyValue(PROPERTY_PlayState));
    }

    public void setA_ARG_TYPE_Application(String theA_ARG_TYPE_Application) {
         _service.setPropertyValue(PROPERTY_A_ARG_TYPE_Application, theA_ARG_TYPE_Application);
    }

    public String getA_ARG_TYPE_Application() {
         return (String)_service.getPropertyValue(PROPERTY_A_ARG_TYPE_Application);
    }

}
