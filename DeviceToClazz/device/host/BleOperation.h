/* Automatic generated by DeviceToC */

#ifndef __BLEOPERATION_H__
#define __BLEOPERATION_H__

#include "tiny_base.h"
#include "UpnpDevice.h"
#include "UpnpCode.h"
#include "UpnpRuntime.h"

TINY_BEGIN_DECLS

struct _BleOperation;
typedef struct _BleOperation BleOperation;

BleOperation * BleOperation_Create(UpnpDevice *device, UpnpRuntime *runtime);
void BleOperation_Delete(BleOperation *thiz);
bool BleOperation_IsImplemented(BleOperation *thiz, UpnpService *service);

/*------------------------------------------------------------------------
 * Actions 
 *------------------------------------------------------------------------*/

/**
* StartScan
*/
typedef UpnpCode (* BleOperation_OnStartScan) (BleOperation *thiz, char * Fileter,void *ctx);

/**
* WriteCharacteristic
*/
typedef UpnpCode (* BleOperation_OnWriteCharacteristic) (BleOperation *thiz, char * BleDevice, char * BleService, char * BleCharacteristic, char * Data,void *ctx);

/**
* KeepAlive
*/
typedef UpnpCode (* BleOperation_OnKeepAlive) (BleOperation *thiz, char * BleDevice,void *ctx);

/**
* DiscoverServices
*/
typedef UpnpCode (* BleOperation_OnDiscoverServices) (BleOperation *thiz, char * BleDevice,void *ctx);

/**
* EnableCharacteristicNotification
*/
typedef UpnpCode (* BleOperation_OnEnableCharacteristicNotification) (BleOperation *thiz, char * BleDevice, char * BleService, char * BleCharacteristic,void *ctx);

/**
* ReadCharacteristic
*/
typedef UpnpCode (* BleOperation_OnReadCharacteristic) (BleOperation *thiz, char * BleDevice, char * BleService, char * BleCharacteristic,void *ctx);

/**
* getConnectedDevices
*/
typedef struct _BleOperation_getConnectedDevicesResult {
    bool theRetAvaliableDevices;
} BleOperation_getConnectedDevicesResult;

typedef UpnpCode (* BleOperation_OngetConnectedDevices) (BleOperation *thiz, BleOperation_getConnectedDevicesResult *result,void *ctx);

/**
* getAvaliableDevices
*/
typedef struct _BleOperation_getAvaliableDevicesResult {
    bool theRetAvaliableDevices;
} BleOperation_getAvaliableDevicesResult;

typedef UpnpCode (* BleOperation_OngetAvaliableDevices) (BleOperation *thiz, BleOperation_getAvaliableDevicesResult *result,void *ctx);

/**
* StopScan
*/
typedef UpnpCode (* BleOperation_OnStopScan) (BleOperation *thiz,void *ctx);

/**
* DisableCharacteristicNotification
*/
typedef UpnpCode (* BleOperation_OnDisableCharacteristicNotification) (BleOperation *thiz, char * BleDevice, char * BleService, char * BleCharacteristic,void *ctx);

/*------------------------------------------------------------------------
 * ActionHandlers 
 *------------------------------------------------------------------------*/
typedef struct _BleOperation_ActionHandler {
    BleOperation_OnStartScan OnStartScan;
    BleOperation_OnWriteCharacteristic OnWriteCharacteristic;
    BleOperation_OnKeepAlive OnKeepAlive;
    BleOperation_OnDiscoverServices OnDiscoverServices;
    BleOperation_OnEnableCharacteristicNotification OnEnableCharacteristicNotification;
    BleOperation_OnReadCharacteristic OnReadCharacteristic;
    BleOperation_OngetConnectedDevices OngetConnectedDevices;
    BleOperation_OngetAvaliableDevices OngetAvaliableDevices;
    BleOperation_OnStopScan OnStopScan;
    BleOperation_OnDisableCharacteristicNotification OnDisableCharacteristicNotification;
} BleOperation_ActionHandler;

TinyRet BleOperation_SetHandler(BleOperation *thiz, BleOperation_ActionHandler *handler, void *ctx);
UpnpCode BleOperation_OnAction(BleOperation *thiz, UpnpAction *action);

/*------------------------------------------------------------------------
 * SendEvents 
 *------------------------------------------------------------------------*/
TinyRet BleOperation_SendEvents(BleOperation *thiz);
TinyRet BleOperation_SetCharacteristicReaded(BleOperation *thiz, bool theCharacteristicReaded);
TinyRet BleOperation_SetA_ARG_TYPE_BleCharacteristic(BleOperation *thiz, bool theA_ARG_TYPE_BleCharacteristic);
TinyRet BleOperation_SetA_ARG_TYPE_BleService(BleOperation *thiz, bool theA_ARG_TYPE_BleService);
TinyRet BleOperation_SetA_ARG_TYPE_BleDevices(BleOperation *thiz, bool theA_ARG_TYPE_BleDevices);
TinyRet BleOperation_SetScanResult(BleOperation *thiz, bool theScanResult);
TinyRet BleOperation_SetCharacteristicNotified(BleOperation *thiz, bool theCharacteristicNotified);
TinyRet BleOperation_SetA_ARG_TYPE_BleDevice(BleOperation *thiz, bool theA_ARG_TYPE_BleDevice);
TinyRet BleOperation_SetA_ARG_TYPE_Filter(BleOperation *thiz, bool theA_ARG_TYPE_Filter);
TinyRet BleOperation_SetCharacteristicWrited(BleOperation *thiz, bool theCharacteristicWrited);
TinyRet BleOperation_SetA_ARG_TYPE_Data(BleOperation *thiz, bool theA_ARG_TYPE_Data);
TinyRet BleOperation_SetDiscoveredServices(BleOperation *thiz, bool theDiscoveredServices);

TINY_END_DECLS

#endif /* __BLEOPERATION_H__ */
