package upnp.codegen.impl;

import android.util.Log;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;

import upnp.codegen.DeviceGenerator;
import upnp.typedef.device.Action;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Device;
import upnp.typedef.device.Service;
import upnp.typedef.device.Argument.Direction;
import upnp.typedef.property.AllowedValueList;
import upnp.typedef.property.AllowedValueType;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;
import upnp.factory.UpnpDeviceFactory;

public class DeviceHostCGeneratorImpl implements DeviceGenerator {

    private static final String TAG = "DeviceHostGeneratorImpl";

    @Override
    public boolean generate(String folder, String url) throws IOException {
        boolean ret = false;
        
        do {
            Device device = UpnpDeviceFactory.create(url);
            if (device == null) {
                break;
            }
            
            String pkgName = String.format("upnps.api.host.device.%s", device.getDeviceType().getName().toLowerCase());

            generateDeviceFiles(folder, device, pkgName);
            
            for (Service s : device.getServices().values()) {
                generateServiceFiles(folder, s, pkgName);
            }
        }
        while (false);
        
        return ret;
    }

    private void genComment(OutputStreamWriter writer) throws IOException {
        writer.write("/* Automatic generated by DeviceToC */\r\n");
        writer.write("\r\n");
    }

    private void generateDeviceFiles(String folder, Device device, String pkgName) throws IOException {
    	genDeviceHeadFile(folder, device, pkgName);
    	genDeviceCFile(folder, device, pkgName);
    }

    private void genDeviceHeadBegin(OutputStreamWriter writer, Device device) throws IOException {
        String devNameUpperCase = device.getDeviceType().getName().toUpperCase();

        genComment(writer);
        
        writer.write(String.format("#ifndef __%s_H__\r\n", devNameUpperCase));
        writer.write(String.format("#define __%s_H__\r\n", devNameUpperCase));
        writer.write("\r\n");
    }

    private void genDeviceHeadInclude(OutputStreamWriter writer, Device device) throws IOException {
    	writer.write("#include \"tiny_base.h\"\r\n");
        writer.write("#include \"UpnpDeviceConfig.h\"\r\n");
        writer.write("#include \"UpnpRuntime.h\"\r\n");
        
        for (Service s : device.getServices().values()) {
        	writer.write(String.format("#include \"%s.h\"\r\n", s.getType().getName()));
        }
        writer.write("\r\n");
    }

    private void genDeviceHeadDeclaration(OutputStreamWriter writer, Device device) throws IOException {
        String devName = device.getDeviceType().getName();
        String devNameUpperCase = devName.toUpperCase();

        writer.write("TINY_BEGIN_DECLS\r\n");
        writer.write("\r\n");
        
        writer.write(String.format("#define %s_DEVICE_TYPE          \"%s\"\r\n", devNameUpperCase, device.getDeviceType()));
        writer.write("\r\n");

        writer.write(String.format("struct _%s;\r\n", devName));
        writer.write(String.format("typedef struct _%s %s;\r\n", devName, devName));
        writer.write("\r\n");
        
        writer.write(String.format("%s * %s_New(UpnpDeviceConfig *config, UpnpRuntime *runtime);\r\n", devName, devName));
        writer.write(String.format("void %s_Delete(%s *thiz);\r\n", devName, devName));
        writer.write("\r\n");

        writer.write(String.format("const char * %s_GetDeviceType(%s *thiz);\r\n", devName, devName));
        for (Service s : device.getServices().values()) {
        	String serviceName = s.getType().getName();
        	writer.write(String.format("%s * %s_Get%s(%s *thiz);\r\n", serviceName, devName, serviceName, devName));
        }
        writer.write("\r\n");
        
        writer.write(String.format("TinyRet %s_Start(%s *thiz);\r\n", devName, devName));
        writer.write(String.format("TinyRet %s_Stop(%s *thiz);\r\n", devName, devName));
        writer.write("\r\n");

        writer.write("TINY_END_DECLS\r\n");
        writer.write("\r\n");
    }

    private void genDeviceHeadEnd(OutputStreamWriter writer, Device device) throws IOException {
    	String devNameUpperCase = device.getDeviceType().getName().toUpperCase();
    	writer.write(String.format("#endif /* __%s_H__ */\r\n", devNameUpperCase));
    }

    private void genDeviceHeadFile(String folder, Device device, String pkgName) throws IOException {
        String devName = device.getDeviceType().getName();
        String fileName = folder + "/" + devName + ".h";

        Log.d(TAG, "generateHostDeviceHeadFile: " + fileName);

        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);

        genDeviceHeadBegin(writer, device);
        genDeviceHeadInclude(writer, device);
        genDeviceHeadDeclaration(writer, device);
        genDeviceHeadEnd(writer, device);

        writer.flush();
        writer.close();
    }
    
    private void genDeviceDeclaration(OutputStreamWriter writer, Device device) throws IOException {
        String devName = device.getDeviceType().getName();

        genComment(writer);
        
        writer.write("#include \"tiny_memory.h\"\r\n");
        writer.write("#include \"tiny_log.h\"\r\n");
        writer.write(String.format("#include \"%s.h\"\r\n", devName));
        writer.write("\r\n");
        
        writer.write(String.format("#define TAG \"%s\"\r\n", devName));
        writer.write("\r\n");
        
        for (Service s : device.getServices().values()) {
        	writer.write(String.format("static const char * _ID_%s = \"%s\";\r\n", s.getType().getName(), s.getServiceId()));
        }
        writer.write("\r\n");

        writer.write(String.format("static TinyRet %s_Construct(%s *thiz, UpnpDeviceConfig *config, UpnpRuntime *runtime);\r\n", devName, devName));
        writer.write(String.format("static void %s_Dispose(%s *thiz);\r\n", devName, devName));
        writer.write("static UpnpCode action_handler(UpnpAction *action, void *ctx);\r\n");
        writer.write("\r\n");

        writer.write(String.format("struct _%s {\r\n", devName));
        writer.write(String.format("    UpnpDevice *device;\r\n"));
        writer.write(String.format("    UpnpRuntime *runtime;\r\n"));
        for (Service s : device.getServices().values()) {
        	String name = s.getType().getName();
        	writer.write(String.format("    %s *_%s;\r\n", name, name));
        }
        writer.write(String.format("};\r\n"));
        writer.write("\r\n");
    }

    private void genDeviceImplement(OutputStreamWriter writer, Device device) throws IOException {
    	String devName = device.getDeviceType().getName();
    	String devNameUpperCase = devName.toUpperCase();

        /**
         *  device create function
         */
        writer.write(String.format("%s * %s_New(UpnpDeviceConfig *config, UpnpRuntime *runtime) {\r\n", devName, devName));
        writer.write(String.format("    %s * thiz = NULL;\r\n", devName));
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(config, NULL);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(runtime, NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        thiz = (%s *)tiny_malloc(sizeof(%s));\r\n", devName, devName));
                      writer.write("        if (thiz == NULL) {\r\n");
                      writer.write("            LOG_E(TAG, \"OUT OF MEMORY!\");\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        if (RET_FAILED(%s_Construct(thiz, config, runtime))) {\r\n", devName));
        writer.write(String.format("            LOG_E(TAG, \"%s_Construct failed\");\r\n", devName));
        writer.write(String.format("            %s_Delete(thiz);\r\n", devName));
                      writer.write("            thiz = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      writer.write("    return thiz;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

	    /**
	     *  device construct function
	     */
        writer.write(String.format("static TinyRet %s_Construct(%s *thiz, UpnpDeviceConfig *config, UpnpRuntime *runtime) {\r\n", devName, devName));
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(config, NULL);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(runtime, NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        memset(thiz, 0, sizeof(%s));\r\n", devName));
                      writer.write("        thiz->runtime = runtime;\r\n");
        writer.write(String.format("        thiz->device = UpnpDeviceConfig_CreateDevice(config, %s_DEVICE_TYPE);\r\n", devNameUpperCase));
                      writer.write("        if (thiz->device == NULL) {\r\n");
                      writer.write("            LOG_E(TAG, \"UpnpDeviceConfig_CreateDevice failed\");\r\n");
                      writer.write("            ret = TINY_RET_E_CONSTRUCT;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      
        for (Service s : device.getServices().values()) {
            String serviceName = s.getType().getName();
        writer.write(String.format("        thiz->_%s = %s_Create(thiz->device, runtime);\r\n", serviceName, serviceName));
        writer.write(String.format("        if (thiz->_%s == NULL) {\r\n", serviceName));
        writer.write(String.format("            LOG_E(TAG, \"%s_Create failed\");\r\n", serviceName));
                      writer.write("            ret = TINY_RET_E_CONSTRUCT;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        }
                      writer.write("    } while (0);\r\n");
                      writer.write("    return ret;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
        
	    /**
	     *  device dispose function
	     */
        writer.write(String.format("static void %s_Dispose(%s *thiz) {\r\n", devName, devName));
                      writer.write("    RETURN_IF_FAIL(thiz);\r\n");
                      writer.write("\r\n");
        for (Service s : device.getServices().values()) {
            String serviceName = s.getType().getName();                      
        writer.write(String.format("    if (thiz->_%s != NULL) {\r\n", serviceName));
        writer.write(String.format("        %s_Delete(thiz->_%s);\r\n", serviceName, serviceName));
        writer.write(String.format("        thiz->_%s = NULL;\r\n", serviceName));
                      writer.write("    }\r\n");
                      writer.write("\r\n");
        }
                      writer.write("    if (thiz->device != NULL) {\r\n");
                      writer.write("        UpnpDevice_Delete(thiz->device);\r\n");
                      writer.write("        thiz->device = NULL;\r\n");
                      writer.write("    }\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

  	    /**
  	     *  device delete function
  	     */
        writer.write(String.format("void %s_Delete(%s *thiz) {\r\n", devName, devName));
                      writer.write("    RETURN_IF_FAIL(thiz);\r\n");
                      writer.write("\r\n");
        writer.write(String.format("    %s_Dispose(thiz);\r\n", devName));
                      writer.write("    tiny_free(thiz);\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

	    /**
	     *  device get device type function
	     */                      
        writer.write(String.format("const char * %s_GetDeviceType(%s *thiz) {\r\n", devName, devName));
                      writer.write("   RETURN_VAL_IF_FAIL(thiz, NULL);\r\n");
                      writer.write("\r\n");
        writer.write(String.format("    return %s_DEVICE_TYPE;\r\n", devNameUpperCase));
                      writer.write("}\r\n");
                      writer.write("\r\n");

  	    /**
  	     *  device get service functions
  	     */
        for (Service s : device.getServices().values()) {
   	        String serviceName = s.getType().getName();
   	    writer.write(String.format("%s * %s_Get%s(%s *thiz) {\r\n", serviceName, devName, serviceName, devName));
    	              writer.write("    RETURN_VAL_IF_FAIL(thiz, NULL);\r\n");
    	              writer.write("\r\n");
    	writer.write(String.format("    return thiz->_%s;\r\n", serviceName));
    	              writer.write("}\r\n");
    	              writer.write("\r\n");
        }

  	    /**
  	     *  device start function
  	     */
        writer.write(String.format("TinyRet %s_Start(%s *thiz) {\r\n", devName, devName));
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    return UpnpRuntime_Register(thiz->runtime, thiz->device, action_handler, thiz);\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

	    /**
	     *  device stop function
	     */
        writer.write(String.format("TinyRet %s_Stop(%s *thiz) {\r\n", devName, devName));
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    return UpnpRuntime_Unregister(thiz->runtime, UpnpDevice_GetDeviceId(thiz->device));\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

  	    /**
  	     *  device action handler function
  	     */                      
                      writer.write("static UpnpCode action_handler(UpnpAction *action, void *ctx) {\r\n");
        writer.write(String.format("    %s *thiz = (%s *)ctx;\r\n", devName, devName));
                      writer.write("\r\n");
                      writer.write("    LOG_D(TAG, \"action_handler\");\r\n");
                      writer.write("\r\n");

        for (Service s : device.getServices().values()) {
        	String serviceName = s.getType().getName();
        writer.write(String.format("    if (%s_IsImplemented(thiz->_%s, (UpnpService *)UpnpAction_GetParentService(action))) {\r\n", serviceName, serviceName));
        writer.write(String.format("        return %s_OnAction(thiz->_%s, action);\r\n", serviceName, serviceName));
                      writer.write("    }\r\n");
        }
                      writer.write("\r\n");
                      writer.write("    return UPNP_ERR_INVALID_ACTION;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
    }

    private void genDeviceCFile(String folder, Device device, String pkgName) throws IOException {
        String devName = device.getDeviceType().getName();
        String fileName = folder + "/" + devName + ".c";

        Log.d(TAG, "generateControlDeviceCFile: " + fileName);
        
        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);
        
        genDeviceDeclaration(writer, device);
        genDeviceImplement(writer, device);

        writer.flush();
        writer.close();
    }

    private void generateServiceFiles(String folder, Service s, String pkgName) throws IOException {
    	genServiceHeadFile(folder, s, pkgName);
    	genServiceCFile(folder, s, pkgName);
    }
    
    private String genArgType(PropertyDefinition def) {
        String argType;
        //TODO: check the code!! 枚举类型如何翻译？
        if (def.getAllowedValueList() != null) {
            argType = "char *";
        } else {
        	argType = def.getDataType().getCDataType();
        }
        return argType;
    }
    
    private void genServiceHeadBegin(OutputStreamWriter writer, Service service) throws IOException {
    	String svcNameUpperCase = service.getType().getName().toUpperCase();

        genComment(writer);
        
        writer.write(String.format("#ifndef __%s_H__\r\n", svcNameUpperCase));
        writer.write(String.format("#define __%s_H__\r\n", svcNameUpperCase));
        writer.write("\r\n");
    }

    private void genServiceHeadInclude(OutputStreamWriter writer, Service service) throws IOException {
        writer.write("#include \"tiny_base.h\"\r\n");
        writer.write("#include \"UpnpDevice.h\"\r\n");
        writer.write("#include \"UpnpCode.h\"\r\n");
        writer.write("#include \"UpnpRuntime.h\"\r\n");
        writer.write("\r\n");
    }

    private void genServiceHeadDeclaration(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();
        writer.write("TINY_BEGIN_DECLS\r\n");
        writer.write("\r\n");
        writer.write(String.format("struct _%s;\r\n", svcName));
        writer.write(String.format("typedef struct _%s %s;\r\n", svcName, svcName));
        writer.write("\r\n");
        writer.write(String.format("%s * %s_Create(UpnpDevice *device, UpnpRuntime *runtime);\r\n", svcName, svcName));
        writer.write(String.format("void %s_Delete(%s *thiz);\r\n", svcName, svcName));
        writer.write(String.format("bool %s_IsImplemented(%s *thiz, UpnpService *service);\r\n", svcName, svcName));
        writer.write("\r\n");
    }

    private void genServiceActionDefined(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();
        writer.write(String.format("/*------------------------------------------------------------------------\r\n"));
        writer.write(String.format(" * Actions \r\n"));
        writer.write(String.format(" *------------------------------------------------------------------------*/\r\n"));
        writer.write("\r\n");
        
        for (Action action : service.getActions().values()) {
        	String actionName = action.getName();
        	writer.write("/**\r\n");
        	writer.write(String.format("* %s\r\n", actionName));
        	writer.write("*/\r\n");
        	
            for (Argument arg : action.getArguments()) {
            	if (arg.getDirection() == Direction.OUT) {
            		writer.write(String.format("typedef struct _%s_%sResult {\r\n", svcName, actionName));
            		writer.write(String.format("    bool the%s;\r\n", arg.getName()));
            		writer.write(String.format("} %s_%sResult;\r\n", svcName, actionName));
            		writer.write("\r\n");
            	}
            }
            
            writer.write(String.format("typedef UpnpCode (* %s_On%s) (%s *thiz,", svcName, actionName, svcName));
            for (Argument arg : action.getArguments()) {
            	if (arg.getDirection() != Direction.IN) {
            		continue;
            	}

                PropertyDefinition p = service.getPropertyDefinition(arg.getRelatedProperty());
                if (p == null) {
                    Log.d(TAG, String.format("RelatedProperty not found: %s", arg.getRelatedProperty()));
                    break;
                }
                
                writer.write(String.format(" %s %s,", genArgType(p), arg.getName()));
            }
            
            for (Argument arg : action.getArguments()) {
            	if (arg.getDirection() == Direction.OUT) {
            	    writer.write(String.format(" %s_%sResult *result,", svcName, actionName));
            		break;
            	}
            }
            
            writer.write("void *ctx);\r\n");
            writer.write("\r\n");
        }
    }

    private void genServiceActionHanderDefined(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();
        writer.write(String.format("/*------------------------------------------------------------------------\r\n"));
        writer.write(String.format(" * ActionHandlers \r\n"));
        writer.write(String.format(" *------------------------------------------------------------------------*/\r\n"));
        
        writer.write(String.format("typedef struct _%s_ActionHandler {\r\n", svcName));
        for (Action action : service.getActions().values()) {
        	String actionName = action.getName();
        	writer.write(String.format("    %s_On%s On%s;\r\n", svcName, actionName, actionName));
        }
        writer.write(String.format("} %s_ActionHandler;\r\n", svcName));
        writer.write("\r\n");
        writer.write(String.format("TinyRet %s_SetHandler(%s *thiz, %s_ActionHandler *handler, void *ctx);\r\n", svcName, svcName, svcName));
        writer.write(String.format("UpnpCode %s_OnAction(%s *thiz, UpnpAction *action);\r\n", svcName, svcName));
        writer.write("\r\n");
    }

    private void genServiceSendEvents(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();
        writer.write(String.format("/*------------------------------------------------------------------------\r\n"));
        writer.write(String.format(" * SendEvents \r\n"));
        writer.write(String.format(" *------------------------------------------------------------------------*/\r\n"));

        writer.write(String.format("TinyRet %s_SendEvents(%s *thiz);\r\n", svcName, svcName));
        for (Property p : service.getProperties()) {
            PropertyDefinition def = p.getDefinition();
            String name = def.getName();
        writer.write(String.format("TinyRet %s_Set%s(%s *thiz, bool the%s);\r\n", svcName, name, svcName, name));
        }
        writer.write("\r\n");
    }

    private void genServiceHeadEnd(OutputStreamWriter writer, Service service) throws IOException {
    	String svcNameUpperCase = service.getType().getName().toUpperCase();
        writer.write("TINY_END_DECLS\r\n");
        writer.write("\r\n");
        writer.write(String.format("#endif /* __%s_H__ */", svcNameUpperCase));
        writer.write("\r\n");
    }

    private void genServiceHeadFile(String folder, Service service, String pkgName) throws IOException {
        String svcName = service.getType().getName();
        String fileName = folder + "/" + svcName + ".h";

        Log.d(TAG, "generateHostServiceHeadFiles: " + fileName);

        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);

        genServiceHeadBegin(writer, service);
        genServiceHeadInclude(writer, service);
        genServiceHeadDeclaration(writer, service);
        genServiceActionDefined(writer, service);
        genServiceActionHanderDefined(writer, service);
        genServiceSendEvents(writer, service);
        genServiceHeadEnd(writer, service);

        writer.flush();
        writer.close();
    }

    private void genServiceActionNames(OutputStreamWriter writer, Service s) throws IOException {
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        writer.write(String.format("// Action Names (%d)\r\n", s.getActions().size()));
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        for (Action action : s.getActions().values()) {
            writer.write(String.format("static const char * ACTION_%s = \"%s\";\r\n", action.getName(), action.getName()));
            
            for (Argument arg : action.getArguments()) {
                writer.write(String.format("static const char * _%s_ARG_%s = \"%s\";\r\n", action.getName(), arg.getName(), arg.getName()));
            }
        }
        writer.write("\r\n");
    }

    private void genServicePropertyNames(OutputStreamWriter writer, Service s) throws IOException {
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        writer.write(String.format("// Property Name (%d)\r\n", s.getProperties().size()));
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        for (Property p : s.getProperties()) {
            PropertyDefinition d = p.getDefinition();
            writer.write(String.format("static const char * PROPERTY_%s = \"%s\";\r\n", d.getName(), d.getName()));
        }
        writer.write("\r\n");
    }

    private void genServicePropertyValueDefined(OutputStreamWriter writer, Service s) throws IOException {
        int count = 0;
        for (Property p : s.getProperties()) {
            PropertyDefinition definition = p.getDefinition();
            AllowedValueList list = definition.getAllowedValueList();
            if (list != null) {
                count++;
            }
        }

        writer.write(String.format("//-------------------------------------------------------\r\n"));
        writer.write(String.format("// Property value defined (%d)\r\n", count));
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        writer.write("\r\n");

        for (Property p : s.getProperties()) {
            PropertyDefinition def = p.getDefinition();
            AllowedValueList list = def.getAllowedValueList();
            if (list == null) {
                continue;
            }
            
            for (Object value : list.getAllowedValues()) {
            	writer.write(String.format("static const char * PROPERTY_%s_V_%s = \"%s_%s\";\r\n", def.getName(), value, def.getName(), value));
            }
        }
        writer.write("\r\n");
    }

    private String genInternalValueName(PropertyDefinition def) {
        String argType;
        //TODO: check the code!! 枚举类型如何翻译？
        if (def.getAllowedValueList() != null) {
            argType = "stringValue";
        } else {
        	argType = def.getDataType().getCInternalValueName();
        }
        return argType;
    }

    private void genServiceDeclaration(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();

        genComment(writer);

        writer.write("#include \"tiny_memory.h\"\r\n");
        writer.write("#include \"tiny_str_equal.h\"\r\n");
        writer.write("#include \"tiny_log.h\"\r\n");
        writer.write("#include \"UpnpServiceHelper.h\"\r\n");
        writer.write(String.format("#include \"%s.h\"\r\n", svcName));
        writer.write("\r\n");

        writer.write(String.format("#define TAG             \"%s\"\r\n", svcName));
        writer.write("\r\n");

        writer.write(String.format("static const char * _SERVICE_TYPE = \"%s\";\r\n", service.getType()));
        writer.write("\r\n");
    }

    private void genServiceFuncDeclaration(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();
        writer.write(String.format("static TinyRet %s_Construct(%s *thiz, UpnpDevice *device, UpnpRuntime *runtime);\r\n", svcName, svcName));
        writer.write(String.format("static void %s_Dispose(%s *thiz);\r\n", svcName, svcName));
        writer.write("\r\n");
        
        writer.write(String.format("static TinyRet init_service(%s *thiz, UpnpDevice *device);\r\n", svcName));
                      writer.write("static TinyRet init_stateList(UpnpService *service);\r\n");
                      writer.write("static TinyRet init_actionList(UpnpService *service);\r\n");
                      writer.write("\r\n");

                      for (Action action : service.getActions().values()) {
        writer.write(String.format("static UpnpCode handle_%s(%s *thiz, UpnpAction *action);\r\n", action.getName(), svcName));
                      }
                      writer.write("\r\n");

        writer.write(String.format("struct _%s {\r\n", svcName));
                      writer.write("    UpnpRuntime *runtime;\r\n");
                      writer.write("    UpnpService *service;\r\n");

        for (Action action : service.getActions().values()) {
      	    String actionName = action.getName();
      	    writer.write(String.format("    %s_On%s On%s;\r\n", svcName, actionName, actionName));
        }
            writer.write("    void *ctx;\r\n");
            writer.write("};\r\n");
            writer.write("\r\n");
    }

    private void genServiceImplement(OutputStreamWriter writer, Service service) throws IOException {
        String svcName = service.getType().getName();

        writer.write(String.format("%s * %s_Create(UpnpDevice *device, UpnpRuntime *runtime) {\r\n", svcName, svcName));
        writer.write(String.format("    %s * thiz = NULL;\r\n", svcName));
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(device, NULL);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(runtime, NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        thiz = (%s *)tiny_malloc(sizeof(%s));\r\n", svcName, svcName));
                      writer.write("        if (thiz == NULL) {\r\n");
                      writer.write("            LOG_E(TAG, \"OUT OF MEMORY!\");\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
        writer.write(String.format("        if (RET_FAILED(%s_Construct(thiz, device, runtime))) {\r\n", svcName));
        writer.write(String.format("            LOG_E(TAG, \"%s_Construct failed\");\r\n", svcName));
        writer.write(String.format("            %s_Delete(thiz);\r\n", svcName));
                      writer.write("            thiz = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      writer.write("    return thiz;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
                      
        writer.write(String.format("static TinyRet %s_Construct(%s *thiz, UpnpDevice *device, UpnpRuntime *runtime) {\r\n", svcName, svcName));
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        memset(thiz, 0, sizeof(%s));\r\n", svcName));
                      writer.write("        thiz->runtime = runtime;\r\n");
                for (Action action : service.getActions().values()) {
        writer.write(String.format("        thiz->On%s = NULL;\r\n", action.getName()));
                }
                      writer.write("        thiz->ctx = NULL;\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = init_service(thiz, device);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      writer.write("    return ret;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
              
        writer.write(String.format("static void %s_Dispose(%s *thiz) {\r\n", svcName, svcName));
                      writer.write("    RETURN_IF_FAIL(thiz);\r\n");
                      writer.write("\r\n");
                      writer.write("    /**\r\n");
                      writer.write("     * DO NOT delete thiz->service !!!\r\n");
                      writer.write("     */\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
        
        writer.write(String.format("void %s_Delete(%s *thiz) {\r\n", svcName, svcName));
                      writer.write("    RETURN_IF_FAIL(thiz);\r\n");
                      writer.write("\r\n");
        writer.write(String.format("    %s_Dispose(thiz);\r\n", svcName));
                      writer.write("    tiny_free(thiz);\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

        writer.write(String.format("static TinyRet init_service(%s *thiz, UpnpDevice *device) {\r\n", svcName));
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
                      writer.write("        thiz->service = UpnpService_New();\r\n");
                      writer.write("        if (thiz->service == NULL) {\r\n");
                      writer.write("            ret = TINY_RET_E_NEW;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      writer.write("        UpnpService_SetParentDevice(thiz->service, device);\r\n");
                      writer.write("        UpnpService_SetServiceType(thiz->service, _SERVICE_TYPE);\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = UpnpServiceHelper_UpdateServiceId(thiz->service);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            UpnpService_Delete(thiz->service);\r\n");
                      writer.write("            thiz->service = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = UpnpServiceHelper_UpdateScpdUrl(thiz->service);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            UpnpService_Delete(thiz->service);\r\n");
                      writer.write("            thiz->service = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = UpnpServiceHelper_UpdateCtrlUrl(thiz->service);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            UpnpService_Delete(thiz->service);\r\n");
                      writer.write("            thiz->service = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = UpnpServiceHelper_UpdateEventUrl(thiz->service);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            UpnpService_Delete(thiz->service);\r\n");
                      writer.write("            thiz->service = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = init_stateList(thiz->service);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            UpnpService_Delete(thiz->service);\r\n");
                      writer.write("            thiz->service = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = init_actionList(thiz->service);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            UpnpService_Delete(thiz->service);\r\n");
                      writer.write("            thiz->service = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      writer.write("        ret = UpnpDevice_AddService(device, thiz->service);\r\n");
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      writer.write("    return ret;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

                      writer.write("static TinyRet init_stateList(UpnpService *service) {\r\n");
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      for (Property p : service.getProperties()) {
                          PropertyDefinition def = p.getDefinition();
                          String varName = def.getName();
                          String isSendEvents;
                          if (def.isSendEvents()) {
                        	  isSendEvents = "YES";
                          } else {
                        	  isSendEvents = "NO";
                          }
                      writer.write("    do {\r\n");
        writer.write(String.format("        UpnpStateVariable * _%s = UpnpStateVariable_New();\r\n", varName));
        writer.write(String.format("        if (_%s == NULL) {\r\n", varName));
                      writer.write("            ret = TINY_RET_E_NEW;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        ret = UpnpStateVariable_Initialize(_%s, PROPERTY_%s, \"%s\", NULL, \"%s\");\r\n", varName, varName, def.getDataType().getStringType(), isSendEvents));
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        ret = UpnpService_AddStateVariable(service, _%s);\r\n", varName));
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      }
                      writer.write("    return ret;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
                      
                      writer.write("static TinyRet init_actionList(UpnpService *service) {\r\n");
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      for (Action action : service.getActions().values()) {
                    	  String actionName = action.getName();
                      writer.write("    /**\r\n");
        writer.write(String.format("    * %s\r\n", actionName));
                      writer.write("    */\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        UpnpAction * _%s = NULL;\r\n", actionName));
                      for (Argument arg : action.getArguments()) {
        writer.write(String.format("        UpnpArgument * _%s = NULL;\r\n", arg.getName()));
                      }
        writer.write(String.format("        _%s = UpnpAction_New();\r\n", actionName));
        writer.write(String.format("        if (_%s == NULL) {\r\n", actionName));
                      writer.write("            ret = TINY_RET_E_NEW;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        ret = UpnpAction_SetName(_%s, ACTION_%s);\r\n", actionName, actionName));
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
                      
                      for (Argument arg : action.getArguments()) {
                    	  String argName = arg.getName();
                    	  String argDirection;
                    	  if (arg.getDirection() == Direction.OUT) {
                    		  argDirection = "ARG_OUT";
                    	  } else {
                    		  argDirection = "ARG_IN";
                    	  }

        writer.write(String.format("        _%s = UpnpArgument_New(_%s_ARG_%s, %s, PROPERTY_%s);\r\n", argName, actionName, argName, argDirection, arg.getRelatedProperty()));
        writer.write(String.format("        if (_%s == NULL) {\r\n", argName));
                      writer.write("            ret = TINY_RET_E_NEW;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        ret = UpnpAction_AddArgument(_%s, _%s);\r\n", actionName, argName));
                      writer.write("        if (RET_FAILED(ret)) {\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        UpnpService_AddAction(service, _%s);\r\n", actionName));
                      }
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      }
                      writer.write("    return ret;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

        writer.write(String.format("bool %s_IsImplemented(%s *thiz, UpnpService *service) {\r\n", svcName, svcName));
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, false);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(service, false);\r\n");
                      writer.write("\r\n");
                      writer.write("    return STR_EQUAL(UpnpService_GetServiceType(service), _SERVICE_TYPE);\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
                      
                      
        writer.write(String.format("TinyRet %s_SetHandler(%s *thiz, %s_ActionHandler *handler, void *ctx) {\r\n", svcName, svcName, svcName));
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("\r\n");
                      for (Action action : service.getActions().values()) {
        writer.write(String.format("    thiz->On%s = handler->On%s;\r\n", action.getName(), action.getName())); 
                      }
                      writer.write("    thiz->ctx = ctx;\r\n");
                      writer.write("\r\n");
                      writer.write("    return ret;\r\n");  
                      writer.write("}\r\n");
                      writer.write("\r\n");
                      
        writer.write(String.format("UpnpCode %s_OnAction(%s *thiz, UpnpAction *action) {\r\n", svcName, svcName));
                      writer.write("    const char *actionName = NULL;\r\n");
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, UPNP_ERR_INVALID_ARGS);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(action, UPNP_ERR_INVALID_ARGS);\r\n");
                      writer.write("\r\n");
                      writer.write("    actionName = UpnpAction_GetName(action);\r\n");
        writer.write(String.format("    LOG_D(TAG, \"%s_OnAction: %%s\", actionName);\r\n", svcName));
                      writer.write("\r\n");
                      for (Action action : service.getActions().values()) {
        writer.write(String.format("    if (STR_EQUAL(actionName, ACTION_%s)) {\r\n", action.getName()));
        writer.write(String.format("        return handle_%s(thiz, action);\r\n", action.getName()));
                      writer.write("    }\r\n");
                      writer.write("\r\n");
                      }
                      writer.write("    return UPNP_ERR_ACTION_FAILED;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

        writer.write(String.format("TinyRet %s_SendEvents(%s *thiz) {\r\n", svcName, svcName));
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    return UpnpService_SendEvents(thiz->service);\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

                      
                      // set property function
                      for (Property p : service.getProperties()) {
                          PropertyDefinition def = p.getDefinition();
                          String varName = def.getName();
        writer.write(String.format("TinyRet %s_Set%s(%s *thiz, %s the%s) {\r\n", svcName, varName, svcName, def.getDataType().getCDataType(), varName));
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        UpnpStateVariable * _%s = UpnpService_GetStateVariable(thiz->service, PROPERTY_%s);\r\n", varName, varName));
        writer.write(String.format("        if (_%s == NULL) {\r\n", varName));
        writer.write(String.format("            LOG_E(TAG, \"invalid: %%s NOT FOUND!\", PROPERTY_%s);\r\n", varName));
                      writer.write("            ret = TINY_RET_E_INTERNAL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        if (_%s->value.internalValue.%s != the%s) {\r\n", varName, genInternalValueName(def), varName));
        writer.write(String.format("            _%s->value.internalValue.%s = the%s;\r\n", varName, genInternalValueName(def), varName));
        writer.write(String.format("            _%s->isChanged = true;\r\n", varName));
                      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      writer.write("    return ret;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
                      }
                      
                      // handle action function
                      for (Action action : service.getActions().values()) {
                    	  String actionName = action.getName();
        writer.write(String.format("static UpnpCode handle_%s(%s *thiz, UpnpAction *action) {\r\n", actionName, svcName));
                      writer.write("    UpnpCode code = UPNP_SUCCESS;\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
			          for (Argument arg : action.getArguments()) {
			        	   if (arg.getDirection() != Direction.IN) {
			                   continue;
			        	   }
			        	   String argName = arg.getName();
		writer.write(String.format("        UpnpStateVariable * _%s = UpnpService_GetStateVariable(thiz->service, UpnpAction_GetArgumentRelatedStateVariable(action, _%s_ARG_%s));\r\n", argName, actionName, argName));
		writer.write(String.format("	    if (_%s == NULL) {\r\n", argName));
		writer.write(String.format("	        LOG_E(TAG, \"argument invalid: %%s NOT FOUND!\", _%s_ARG_%s);\r\n", actionName, argName));
		              writer.write("            break;\r\n");
		              writer.write("        }\r\n");
		              writer.write("\r\n");
		                  PropertyDefinition p = service.getPropertyDefinition(arg.getRelatedProperty());
		                  if (p == null) {
		                      Log.d(TAG, String.format("RelatedProperty not found: %s", arg.getRelatedProperty()));
		                      break;
		                  }
		writer.write(String.format("        code = thiz->On%s(thiz, _%s->value.internalValue.%s, thiz->ctx);\r\n", actionName, argName, genInternalValueName(p)));
		              writer.write("        if (code != UPNP_SUCCESS) {\r\n");
		              writer.write("	        break;\r\n");
		              writer.write("        }\r\n");
			          }
			          
			          for (Argument arg : action.getArguments()) {
			          	  if (arg.getDirection() != Direction.OUT) {
			          		  continue;
			          	  }
			          	  String argName = arg.getName();
        writer.write(String.format("        %s_%sResult result;\r\n", svcName, actionName));
		writer.write(String.format("        memset(&result, 0, sizeof(%s_%sResult));\r\n", svcName, actionName));
		              writer.write("\r\n");
		writer.write(String.format("        code = thiz->On%s(thiz, &result, thiz->ctx);\r\n", actionName));
		              writer.write("        if (code != UPNP_SUCCESS) {\r\n");
		              writer.write("            break;\r\n");
		              writer.write("        }\r\n");
		              writer.write("\r\n");
		writer.write(String.format("        UpnpStateVariable * _%s = UpnpService_GetStateVariable(thiz->service, UpnpAction_GetArgumentRelatedStateVariable(action, _%s_ARG_%s));\r\n", argName, actionName, argName));
		writer.write(String.format("        if (_%s == NULL) {\r\n", argName)); 
		writer.write(String.format("            LOG_E(TAG, \"Result invalid: %%s NOT FOUND!\", _%s_ARG_%s);\r\n", actionName, argName));
		              writer.write("            break;\r\n");
		              writer.write("        }\r\n");
		              writer.write("\r\n");
	                  PropertyDefinition p = service.getPropertyDefinition(arg.getRelatedProperty());
	                  if (p == null) {
	                      Log.d(TAG, String.format("RelatedProperty not found: %s", arg.getRelatedProperty()));
	                      break;
	                  }
		writer.write(String.format("        _%s->value.internalValue.%s = result.the%s;\r\n", argName, genInternalValueName(p), argName));
			          }
			          writer.write("    } while (0);\r\n");
			          writer.write("\r\n");
			          writer.write("    return code;\r\n");
			          writer.write("}\r\n");
			          writer.write("\r\n");
                      }
    }

    private void genServiceCFile(String folder, Service service, String pkgName) throws IOException {
        String svcName = service.getType().getName();
        String fileName = folder + "/" + svcName + ".c";

        Log.d(TAG, "generateHostServiceCFiles: " + fileName);

        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);

        genServiceDeclaration(writer, service);
        genServiceActionNames(writer, service);
        genServicePropertyNames(writer, service);
        genServicePropertyValueDefined(writer, service);
        genServiceFuncDeclaration(writer, service);
        genServiceImplement(writer, service);

        writer.flush();
        writer.close();
    }
}
