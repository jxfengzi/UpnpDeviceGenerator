package upnp.codegen.impl;

import android.util.Log;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;

import upnp.codegen.DeviceGenerator;
import upnp.typedef.device.Action;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Argument.Direction;
import upnp.typedef.device.Device;
import upnp.typedef.device.Service;
import upnp.typedef.property.AllowedValueList;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;
import upnp.factory.UpnpDeviceFactory;

public class DeviceControlCGeneratorImpl implements DeviceGenerator {

    private static final String TAG = "DeviceControlGeneratorImpl";

    @Override
    public boolean generate(String folder, String url) throws IOException {
        boolean ret = false;
        
        do {
            Device device = UpnpDeviceFactory.create(url);
            if (device == null) {
                break;
            }

            String pkgName = String.format("upnps.api.ctrlpoint.device.%s", device.getDeviceType().getName().toLowerCase());

            generateDeviceFiles(folder, device, pkgName);
            
            for (Service s : device.getServices().values()) {
                generateServiceFiles(folder, s, pkgName);
            }
        }
        while (false);
        
        return ret;
    }
    
    private void genComment(OutputStreamWriter writer) throws IOException {
        writer.write("/* Automatic generated by DeviceToC */\r\n");
        writer.write("\r\n");
    }

    private void generateDeviceFiles(String folder, Device device, String pkgName) throws IOException {
    	genDeviceHeadFile(folder, device, pkgName);
    	genDeviceCFile(folder, device, pkgName);
    }
    
    private void genDeviceHeadBegin(OutputStreamWriter writer, Device device) throws IOException {
    	String devNameUpperCase = device.getDeviceType().getName().toUpperCase();

    	genComment(writer);
        writer.write(String.format("#ifndef __%s_H__\r\n", devNameUpperCase));
        writer.write(String.format("#define __%s_H__\r\n", devNameUpperCase));
        writer.write("\r\n");
    }

    private void genDeviceHeadInclude(OutputStreamWriter writer, Device device) throws IOException {
        writer.write("#include \"tiny_base.h\"\r\n");
        writer.write("#include \"upnp_api.h\"\r\n");
        writer.write("#include \"UpnpDevice.h\"\r\n");
        writer.write("#include \"UpnpRuntime.h\"\r\n");
        for (Service s : device.getServices().values()) {
        	writer.write(String.format("#include \"%s.h\"\r\n", s.getType().getName()));
        }
        writer.write("\r\n");
    }

    private void genDeviceHeadDeclaration(OutputStreamWriter writer, Device device) throws IOException {
        String devName = device.getDeviceType().getName();
        String devNameUpperCase = devName.toUpperCase();

        writer.write("TINY_BEGIN_DECLS\r\n");
        writer.write("\r\n");
        
        writer.write(String.format("#define %s_DEVICE_TYPE          \"%s\"\r\n", devNameUpperCase, device.getDeviceType()));
        writer.write("\r\n");
        
        writer.write(String.format("struct _%s;\r\n", devName));
        writer.write(String.format("typedef struct _%s %s;\r\n", devName, devName));
        writer.write("\r\n");
        
        writer.write(String.format("%s * %s_Create(UpnpDevice *device, UpnpRuntime *runtime);\r\n", devName, devName));
        writer.write(String.format("void %s_Delete(%s *thiz);\r\n", devName, devName));
        writer.write("\r\n");
        writer.write(String.format("const char * %s_GetDeviceType(%s *thiz);\r\n", devName, devName));
        for (Service s : device.getServices().values()) {
        	String serviceName = s.getType().getName();
        	writer.write(String.format("%s * %s_Get%s(%s *thiz);\r\n", serviceName, devName, serviceName, devName));
        }
        writer.write("\r\n");
        
        writer.write("TINY_END_DECLS\r\n");
        writer.write("\r\n");
    }
    
    private void genDeviceHeadEnd(OutputStreamWriter writer, Device device) throws IOException {
        String devNameUpperCase = device.getDeviceType().getName().toUpperCase();
        writer.write(String.format("#endif /* __%s_H__ */\r\n", devNameUpperCase));
    }

    private void genDeviceHeadFile(String folder, Device device, String pkgName) throws IOException {
        String devName = device.getDeviceType().getName();
        String fileName = folder + "/" + devName + ".h";

        Log.d(TAG, "generateControlDeviceHeadFile: " + fileName);
        
        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);

        genDeviceHeadBegin(writer, device);
        genDeviceHeadInclude(writer, device);
        genDeviceHeadDeclaration(writer, device);
        genDeviceHeadEnd(writer, device);

        writer.flush();
        writer.close();
    }

    private void genDeviceDeclaration(OutputStreamWriter writer, Device device) throws IOException {
    	String devName = device.getDeviceType().getName();

        genComment(writer);

        writer.write("#include \"tiny_memory.h\"\r\n");
        writer.write("#include \"tiny_log.h\"\r\n");
        writer.write(String.format("#include \"%s.h\"\r\n", devName));
        writer.write("\r\n");
        
        writer.write(String.format("#define TAG             \"%s\"\r\n", devName));
        writer.write("\r\n");

        for (Service s : device.getServices().values()) {
        	writer.write(String.format("static const char * _ID_%s = \"%s\";\r\n", s.getType().getName(), s.getServiceId()));
        }
        writer.write("\r\n");
        
        writer.write(String.format("static TinyRet %s_Construct(%s *thiz, UpnpDevice *device, UpnpRuntime *runtime);\r\n", devName, devName));
        writer.write(String.format("static void %s_Dispose(%s *thiz);\r\n", devName, devName));
        writer.write("\r\n");
        
        writer.write(String.format("struct _%s {\r\n", devName));
        writer.write(String.format("    UpnpDevice *device;\r\n"));
        writer.write(String.format("    UpnpRuntime *runtime;\r\n"));
        for (Service s : device.getServices().values()) {
        	String name = s.getType().getName();
        	writer.write(String.format("    %s *_%s;\r\n", name, name));
        }
        writer.write(String.format("};\r\n"));
        writer.write("\r\n");
    }

    private void genDeviceImplement(OutputStreamWriter writer, Device device) throws IOException {
        String devName = device.getDeviceType().getName();
        String devNameUpperCase = devName.toUpperCase();

        /**
         *  device create function
         */
        writer.write(String.format("%s * %s_Create(UpnpDevice *device, UpnpRuntime *runtime) {\r\n", devName, devName));
        writer.write(String.format("    %s * thiz = NULL;\r\n", devName));
        		      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(device, NULL);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(runtime, NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        thiz = (%s *)tiny_malloc(sizeof(%s));\r\n", devName, devName));
                      writer.write("        if (thiz == NULL) {\r\n");
                      writer.write("            LOG_E(TAG, \"OUT OF MEMORY!\");\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        if (RET_FAILED(%s_Construct(thiz, device, runtime))) {\r\n", devName));
        writer.write(String.format("            LOG_E(TAG, \"%s_Construct failed\");\r\n", devName));
        writer.write(String.format("            %s_Delete(thiz);\r\n", devName));
                      writer.write("            thiz = NULL;\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      writer.write("    return thiz;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
        
        /**
         *  device construction function
         */ 
        writer.write(String.format("static TinyRet %s_Construct(%s *thiz, UpnpDevice *device, UpnpRuntime *runtime) {\r\n", devName, devName));
                      writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        memset(thiz, 0, sizeof(%s));\r\n", devName));
                      writer.write("        thiz->device = device;\r\n");
                      writer.write("        thiz->runtime = runtime;\r\n");
        			  writer.write("\r\n");
        writer.write(String.format("        if (!STR_EQUAL(%s_DEVICE_TYPE, UpnpDevice_GetDeviceType(device))) {\r\n", devNameUpperCase));
        writer.write(String.format("            LOG_E(TAG, \"DEVICE_TYPE invalid: %%s\", UpnpDevice_GetDeviceType(device));\r\n"));
        			  writer.write("            ret = TINY_RET_E_CONSTRUCT;\r\n");
        			  writer.write("            break;\r\n");
        			  writer.write("        }\r\n");
        			  writer.write("\r\n");  

        for (Service s : device.getServices().values()) {
        	String serviceName = s.getType().getName();
        writer.write(String.format("        UpnpService * _%s = NULL;\r\n", serviceName));
        			  writer.write("\r\n");
        writer.write(String.format("         _%s = UpnpDevice_GetService(device, _ID_%s);\r\n", serviceName, serviceName));
        writer.write(String.format("        if (_%s == NULL) {\r\n", serviceName));
        writer.write(String.format("            LOG_E(TAG, \"Service not found: %%s\", _ID_%s);\r\n", serviceName));
        			  writer.write("            ret = TINY_RET_E_CONSTRUCT;\r\n");
        			  writer.write("            break;\r\n");
        			  writer.write("        }\r\n");
        			  writer.write("\r\n");
        writer.write(String.format("        thiz->_%s = %s_Create(_%s, runtime);\r\n", serviceName, serviceName, serviceName));
        writer.write(String.format("        if (thiz->_%s == NULL) {\r\n", serviceName));
        writer.write(String.format("            LOG_E(TAG, \"%s_Create: failed\");\r\n", serviceName));
        		      writer.write("            ret = TINY_RET_E_CONSTRUCT;\r\n");
        		      writer.write("            break;\r\n");
        		      writer.write("        }\r\n");
        }
        			  writer.write("    } while (0);\r\n");
        			  writer.write("\r\n");
        			  writer.write("    return ret;\r\n");
        			  writer.write("}\r\n");
        			  writer.write("\r\n");
        			  
        /**
         *  device dispose function
         */ 
        writer.write(String.format("static void %s_Dispose(%s *thiz) {\r\n", devName, devName));
            	      writer.write("    RETURN_IF_FAIL(thiz);\r\n");
            	      writer.write("\r\n");
        for (Service s : device.getServices().values()) {
        	String serviceName = s.getType().getName();
        writer.write(String.format("    if (thiz->_%s != NULL) {\r\n", serviceName));
        writer.write(String.format("        %s_Delete(thiz->_%s);\r\n", serviceName, serviceName));
        		      writer.write("    }\r\n");
        }
                      writer.write("}\r\n");
                      writer.write("\r\n");

	   /**
	    *  device dispose function
	    */ 
       writer.write(String.format("void %s_Delete(%s *thiz) {\r\n", devName, devName));
       		         writer.write("    RETURN_IF_FAIL(thiz);\r\n");
       		         writer.write("\r\n");
       writer.write(String.format("    %s_Dispose(thiz);\r\n", devName));
       			     writer.write("    tiny_free(thiz);\r\n");
       			     writer.write("}\r\n");
       			     writer.write("\r\n");

	   /**
	    *  Get DeviceType function
	    */ 
       writer.write(String.format("const char * %s_GetDeviceType(%s *thiz) {\r\n", devName, devName));
                     writer.write("    RETURN_VAL_IF_FAIL(thiz, NULL);\r\n");
                     writer.write("\r\n");
       writer.write(String.format("    return %s_DEVICE_TYPE;\r\n", devNameUpperCase));
		             writer.write("}\r\n");
		             writer.write("\r\n");

  	   /**
  	    *  Get Services function
  	    */
       for (Service s : device.getServices().values()) {
    	   String serviceName = s.getType().getName();
    	   writer.write(String.format("%s * %s_Get%s(%s *thiz) {\r\n", serviceName, devName, serviceName, devName));
     	                 writer.write("    RETURN_VAL_IF_FAIL(thiz, NULL);\r\n");
     	                 writer.write("\r\n");
     	   writer.write(String.format("    return thiz->_%s;\r\n", serviceName));
     	                 writer.write("}\r\n");
     	                 writer.write("\r\n");
       }
    }
    
    private void genDeviceCFile(String folder, Device device, String pkgName) throws IOException {
        String devName = device.getDeviceType().getName();
        String fileName = folder + "/" + devName + ".c";
        Log.d(TAG, "generateControlDeviceCFile: " + fileName);
        
        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);
        
        genDeviceDeclaration(writer, device);
        genDeviceImplement(writer, device);
       
        writer.flush();
        writer.close();
    }
    
    private void generateServiceFiles(String folder, Service service, String pkgName) throws IOException {
    	genServiceHeadFile(folder, service, pkgName);
    	genServiceCFile(folder, service, pkgName);
    }
    
    private String genArgType(PropertyDefinition def) {
        String argType;
        //TODO: This is hard code
        if (def.getAllowedValueList() != null) {
            argType = "char *";
        } else {
        	argType = def.getDataType().getCDataType();
        }
        return argType;
    }

    private void genServiceHeadBegin(OutputStreamWriter writer, Service service) throws IOException {
    	String svcNameUpperCase = service.getType().getName().toUpperCase();

        genComment(writer);

        writer.write(String.format("#ifndef __%s_H__\r\n", svcNameUpperCase));
        writer.write(String.format("#define __%s_H__\r\n", svcNameUpperCase));
        writer.write("\r\n");
    }
    
    private void genServiceHeadInclude(OutputStreamWriter writer, Service service) throws IOException {
        writer.write("#include \"tiny_base.h\"\r\n");
        writer.write("#include \"UpnpService.h\"\r\n");
        writer.write("#include \"UpnpRuntime.h\"\r\n");
        writer.write("\r\n");
    }

    private void genServiceHeadDeclaration(OutputStreamWriter writer, Service service) throws IOException {
        String svcName = service.getType().getName();

        writer.write("TINY_BEGIN_DECLS\r\n");
        writer.write("\r\n");
        writer.write(String.format("struct _%s;\r\n", svcName));
        writer.write(String.format("typedef struct _%s %s;\r\n", svcName, svcName));
        writer.write("\r\n");
        writer.write(String.format("%s * %s_Create(UpnpService *service, UpnpRuntime *runtime);\r\n", svcName, svcName));
        writer.write(String.format("void %s_Delete(%s *thiz);\r\n", svcName, svcName));
        writer.write("\r\n");
        writer.write(String.format("/*------------------------------------------------------------------------\r\n"));
        writer.write(String.format(" * Actions \r\n"));
        writer.write(String.format(" *------------------------------------------------------------------------*/\r\n"));
        writer.write("\r\n");

        for (Action action : service.getActions().values()) {
        	String actionName = action.getName();
        	writer.write("/**\r\n");
        	writer.write(String.format("* %s\r\n", actionName));
        	writer.write("*/\r\n");
        	
            for (Argument arg : action.getArguments()) {
            	if (arg.getDirection() == Direction.OUT) {
            		writer.write(String.format("typedef struct _%s_%sResult {\r\n", svcName, actionName));
            		writer.write(String.format("    bool the%s;\r\n", arg.getName()));
            		writer.write(String.format("} %s_%sResult;\r\n", svcName, actionName));
            		writer.write("\r\n");
            	}
            }
            
            writer.write(String.format("TinyRet %s_%s(%s *thiz,", svcName, actionName, svcName));
            for (Argument arg : action.getArguments()) {
            	if (arg.getDirection() != Direction.IN) {
            		continue;
            	}

                PropertyDefinition p = service.getPropertyDefinition(arg.getRelatedProperty());
                if (p == null) {
                    Log.d(TAG, String.format("RelatedProperty not found: %s", arg.getRelatedProperty()));
                    break;
                }
                
                writer.write(String.format(" %s %s,", genArgType(p), arg.getName()));
            }
            
            for (Argument arg : action.getArguments()) {
            	if (arg.getDirection() == Direction.OUT) {
            	    writer.write(String.format(" %s_%sResult *result,", svcName, actionName));
            		break;
            	}
            }
            
            writer.write("UpnpError *error);\r\n");
            writer.write("\r\n");
        }

        writer.write(String.format("/*------------------------------------------------------------------------\r\n"));
        writer.write(String.format(" * Event \r\n"));
        writer.write(String.format(" *------------------------------------------------------------------------*/\r\n"));
        writer.write("\r\n");

        writer.write(String.format("typedef void(*%s_SubscriptionExpired)(void *ctx);\r\n", svcName));
        for (Property p : service.getProperties()) {
            PropertyDefinition def = p.getDefinition();
            if (def.isSendEvents()) {
            	writer.write(String.format("typedef void(*%s_%sChanged)(", svcName, def.getName()));
                writer.write(String.format("%s currentValue,", genArgType(def)));
                writer.write(" void *ctx);\r\n");
            }
        }
        writer.write("\r\n");
        
        writer.write(String.format("typedef struct _%s_EventListener {\r\n", svcName));
        writer.write(String.format("    %s_SubscriptionExpired     onSubscriptionExpired;\r\n", svcName));
        for (Property p : service.getProperties()) {
            PropertyDefinition def = p.getDefinition();
            if (def.isSendEvents()) {
            	 writer.write(String.format("    %s_%sChanged     on%sChanged;\r\n", svcName, def.getName(), def.getName()));
            }
        }
        writer.write(String.format("} %s_EventListener;\r\n", svcName));
        writer.write("\r\n");

        writer.write(String.format("TinyRet %s_Subscribe(%s *thiz,\r\n", svcName, svcName));
        writer.write(String.format("    %s_SubscriptionExpired onSubscriptionExpired,\r\n", svcName, svcName));
        for (Property p : service.getProperties()) {
            PropertyDefinition def = p.getDefinition();
            if (def.isSendEvents()) {
            	 writer.write(String.format("    %s_%sChanged on%sChanged,\r\n", svcName, def.getName(), def.getName()));
            }
        }
        writer.write("    UpnpError *error,\r\n");
        writer.write("    void *ctx);\r\n");
        writer.write("\r\n");
        
        writer.write(String.format("TinyRet %s_Unsubscribe(%s *thiz, UpnpError *error);\r\n", svcName, svcName));
        writer.write("\r\n");
        
        writer.write("TINY_END_DECLS\r\n");
        writer.write("\r\n");
    }
    
    private void genServiceHeadEnd(OutputStreamWriter writer, Service service) throws IOException {
        String svcNameUpperCase = service.getType().getName().toUpperCase();
    	writer.write(String.format("#endif /* __%s_H__ */", svcNameUpperCase));
    }

    private void genServiceHeadFile(String folder, Service service, String pkgName) throws IOException {
        String svcName = service.getType().getName();
        String fileName = folder + "/" + svcName + ".h";
        Log.d(TAG, "genControlServiceHeadFile: " + fileName);
        
        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);
        
        genServiceHeadBegin(writer, service);
        genServiceHeadInclude(writer, service);
        genServiceHeadDeclaration(writer, service);
        genServiceHeadEnd(writer, service);
        
        writer.flush();
        writer.close();
    }
    
    private void genServiceActionNames(OutputStreamWriter writer, Service s) throws IOException {
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        writer.write(String.format("// Action Names (%d)\r\n", s.getActions().size()));
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        for (Action action : s.getActions().values()) {
            writer.write(String.format("static const char * ACTION_%s = \"%s\";\r\n", action.getName(), action.getName()));
            
            for (Argument arg : action.getArguments()) {
                writer.write(String.format("static const char * _%s_ARG_%s = \"%s\";\r\n", action.getName(), arg.getName(), arg.getName()));
            }
        }
        writer.write("\r\n");
    }

    private void genServicePropertyNames(OutputStreamWriter writer, Service s) throws IOException {
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        writer.write(String.format("// Property Name (%d)\r\n", s.getProperties().size()));
        writer.write(String.format("//-------------------------------------------------------\r\n"));
        for (Property p : s.getProperties()) {
            PropertyDefinition d = p.getDefinition();
            writer.write(String.format("static const char * PROPERTY_%s = \"%s\";\r\n", d.getName(), d.getName()));
        }
        writer.write("\r\n");
    }

    private void genServicePropertyValueDefined(OutputStreamWriter writer, Service s) throws IOException {
        int count = 0;
        for (Property p : s.getProperties()) {
            PropertyDefinition definition = p.getDefinition();
            AllowedValueList list = definition.getAllowedValueList();
            if (list != null) {
                count++;
            }
        }

        writer.write(String.format("//-------------------------------------------------------\r\n"));
        writer.write(String.format("// Property value defined (%d)\r\n", count));
        writer.write(String.format("//-------------------------------------------------------\r\n"));

        for (Property p : s.getProperties()) {
            PropertyDefinition def = p.getDefinition();
            AllowedValueList list = def.getAllowedValueList();
            if (list == null) {
                continue;
            }
            
            for (Object value : list.getAllowedValues()) {
            	writer.write(String.format("static const char * PROPERTY_%s_V_%s = \"%s_%s\";\r\n", def.getName(), value, def.getName(), value));
            }
        }
        writer.write("\r\n");
    }
    
    private String genInternalValueName(PropertyDefinition def) {
		String argType;
		//TODO: This is hard code
		if (def.getAllowedValueList() != null) {
		    argType = "stringValue";
		} else {
			argType = def.getDataType().getCInternalValueName();
		}
		return argType;
    }
    
    private String genDataTypeTransformFunc(PropertyDefinition def) {
        String funcName = def.getDataType().getCDataTypeTransformFuncName();
        String funcCall;
        //TODO: This is hard code
        if (def.getAllowedValueList() != null || funcName.equals("Default")) {
        	funcCall = String.format("_%s", def.getName().toLowerCase());
        } else {
        	funcCall = String.format("%s(_%s)", funcName, def.getName().toLowerCase());
        }
        return funcCall;
    }

    private void genServiceDeclaration(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();
    	
        genComment(writer);
        writer.write(String.format("#include \"%s.h\"\r\n", svcName));
                      writer.write("#include \"tiny_memory.h\"\r\n");
                      writer.write("#include \"tiny_str_equal.h\"\r\n");
                      writer.write("#include \"tiny_log.h\"\r\n");
                      writer.write("#include \"UpnpCode.h\"\r\n");
                      writer.write("#include \"UpnpEvent.h\"\r\n");
        writer.write("\r\n");

        writer.write(String.format("#define TAG             \"%s\"\r\n", svcName));
        writer.write("\r\n");

        writer.write(String.format("static const char * _SERVICE_TYPE = \"%s\";\r\n", service.getType()));
        writer.write("\r\n");
    }

    private void genServiceEventDefined(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();
        writer.write("static void event_listener(UpnpEvent *event, void *ctx);\r\n");
        writer.write("\r\n");
        
        writer.write(String.format("struct _%s {\r\n", svcName));
                      writer.write("    UpnpService *service;\r\n");
                      writer.write("    UpnpRuntime *runtime;\r\n");
                      writer.write("    char subscriptionId[UPNP_UUID_LEN];\r\n");
        writer.write(String.format("    %s_SubscriptionExpired onSubscriptionExpired;\r\n", svcName));
        for (Property p : service.getProperties()) {
            PropertyDefinition def = p.getDefinition();
            if (def.isSendEvents()) {
            	 writer.write(String.format("    %s_%sChanged  on%sChanged;\r\n", svcName, def.getName(), def.getName()));
            }
        }
        writer.write("    void *ctx;\r\n");
        writer.write("};\r\n");
        writer.write("\r\n");
    }
    
    private void genServiceImplement(OutputStreamWriter writer, Service service) throws IOException {
    	String svcName = service.getType().getName();

 	    /**
 	     *  Service create function
 	     */ 
        writer.write(String.format("%s * %s_Create(UpnpService *service, UpnpRuntime *runtime) {\r\n", svcName, svcName));
        writer.write(String.format("    %s * thiz = NULL;\r\n", svcName));
                      writer.write("\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(service, NULL);\r\n");
                      writer.write("    RETURN_VAL_IF_FAIL(runtime, NULL);\r\n");
                      writer.write("\r\n");
                      writer.write("    do {\r\n");
        writer.write(String.format("        thiz = (%s *)tiny_malloc(sizeof(%s));\r\n", svcName, svcName));
                      writer.write("        if (thiz == NULL) {\r\n");
                      writer.write("            LOG_E(TAG, \"OUT OF MEMORY!\");\r\n");
                      writer.write("            break;\r\n");
                      writer.write("        }\r\n");
                      writer.write("\r\n");
        writer.write(String.format("        memset(thiz, 0, sizeof(%s));\r\n", svcName));
                      writer.write("        thiz->service = service;\r\n");
                      writer.write("        thiz->runtime = runtime;\r\n");
                      writer.write("\r\n");
                      writer.write("        if (!STR_EQUAL(_SERVICE_TYPE, UpnpService_GetServiceType(service))) {\r\n");
        writer.write(String.format("            LOG_E(TAG, \"SERVICE_TYPE invalid: %%s\", UpnpService_GetServiceType(service));\r\n"));
        writer.write(String.format("            %s_Delete(thiz);\r\n", svcName));
                      writer.write("            thiz = NULL;\r\n");
                      writer.write("            break;\r\n");
        		      writer.write("        }\r\n");
                      writer.write("    } while (0);\r\n");
                      writer.write("\r\n");
                      writer.write("    return thiz;\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");
        
   	    /**
   	     *  Service delete function
   	     */    
        writer.write(String.format("void %s_Delete(%s *thiz) {\r\n", svcName, svcName)); 
                      writer.write("    RETURN_IF_FAIL(thiz);\r\n");
                      writer.write("    tiny_free(thiz);\r\n");
                      writer.write("}\r\n");
                      writer.write("\r\n");

 	     /**
 	      *  Service action functions
 	      */   
         for (Action action : service.getActions().values()) {
		      String actionName = action.getName();
		      boolean isHaveResult = false;
              
              writer.write(String.format("TinyRet %s_%s(%s *thiz,", svcName, actionName, svcName));
              for (Argument arg : action.getArguments()) {
              	  if (arg.getDirection() != Direction.IN) {
              		  continue;
              	  }

                  PropertyDefinition p = service.getPropertyDefinition(arg.getRelatedProperty());
                  if (p == null) {
                      Log.d(TAG, String.format("RelatedProperty not found: %s", arg.getRelatedProperty()));
                      break;
                  }
                  
                  writer.write(String.format(" %s %s,", genArgType(p), arg.getName()));
              }
              
              for (Argument arg : action.getArguments()) {
              	  if (arg.getDirection() == Direction.OUT) {
              		 writer.write(String.format(" %s_%sResult *result,", svcName, actionName));
              		 isHaveResult = true;
              		 break;
              	  }
              }
              
              writer.write("UpnpError *error) {\r\n");
              writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
              writer.write("\r\n");
              writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
              writer.write("    RETURN_VAL_IF_FAIL(error, TINY_RET_E_ARG_NULL);\r\n");
              if (isHaveResult) {
              writer.write("    RETURN_VAL_IF_FAIL(result, TINY_RET_E_ARG_NULL);\r\n");
              }
              writer.write("\r\n");

              writer.write("    do {\r\n");
writer.write(String.format("        UpnpAction *action = UpnpService_GetAction(thiz->service, ACTION_%s);\r\n", actionName));
              writer.write("        if (action == NULL) {\r\n");
              writer.write("            ret = TINY_RET_E_UPNP_ACTION_NOT_FOUND;\r\n");
              writer.write("            break;\r\n");
              writer.write("        }\r\n");
              writer.write("\r\n");
          
          for (Argument arg : action.getArguments()) {
          	  if (arg.getDirection() != Direction.IN) {
          		  continue;
          	  }
writer.write(String.format("        UpnpStateVariable * _%s = UpnpService_GetStateVariable(thiz->service, UpnpAction_GetArgumentRelatedStateVariable(action, _%s_ARG_%s));\r\n", arg.getName(), actionName, arg.getName()));
writer.write(String.format("        if (_%s == NULL) {\r\n", arg.getName()));
writer.write(String.format("            LOG_E(TAG, \"Result invalid: %%s NOT FOUND!\", _%s_ARG_%s);\r\n", actionName, arg.getName()));
              writer.write("            break;\r\n");
              writer.write("        }\r\n");
              writer.write("\r\n");
              PropertyDefinition p = service.getPropertyDefinition(arg.getRelatedProperty());
              if (p == null) {
                  Log.d(TAG, String.format("RelatedProperty not found: %s", arg.getRelatedProperty()));
                  break;
              }
writer.write(String.format("        _%s->value.internalValue.%s = %s;\r\n", arg.getName(), genInternalValueName(p), arg.getName()));
          }
              writer.write("\r\n");
              writer.write("        ret = UpnpRuntime_Invoke(thiz->runtime, action, error);\r\n");
              writer.write("        if (ret != TINY_RET_OK) {\r\n");
              writer.write("            break;\r\n");
              writer.write("        }\r\n");
              writer.write("\r\n");
              writer.write("        if (error->code != UPNP_SUCCESS) {\r\n");
              writer.write("            break;\r\n");
              writer.write("        }\r\n");

          for (Argument arg : action.getArguments()) {
          	  if (arg.getDirection() != Direction.OUT) {
          		  continue;
          	  }
writer.write(String.format("        UpnpStateVariable * _%s = UpnpService_GetStateVariable(thiz->service, UpnpAction_GetArgumentRelatedStateVariable(action, _%s_ARG_%s));\r\n", arg.getName(), actionName, arg.getName()));
writer.write(String.format("        if (_%s == NULL) {\r\n", arg.getName()));
writer.write(String.format("            LOG_E(TAG, \"Result invalid: %%s NOT FOUND!\", _%s_ARG_%s);\r\n", actionName, arg.getName()));
              writer.write("            break;\r\n");
              writer.write("        }\r\n");
              writer.write("\r\n");
              PropertyDefinition p = service.getPropertyDefinition(arg.getRelatedProperty());
              if (p == null) {
                  Log.d(TAG, String.format("RelatedProperty not found: %s", arg.getRelatedProperty()));
                  break;
              }
writer.write(String.format("        result->the%s = _%s->value.internalValue.%s;\r\n", arg.getName(), arg.getName(), genInternalValueName(p)));
          }
              writer.write("    } while (0);\r\n");
              writer.write("\r\n");
              writer.write("    return ret;\r\n");
              writer.write("}\r\n");
              writer.write("\r\n");
         }
         
 	     /**
 	      *  Service subscribe functions
 	      */
         writer.write(String.format("TinyRet %s_Subscribe(%s *thiz,\r\n", svcName, svcName));  
         writer.write(String.format("    %s_SubscriptionExpired onSubscriptionExpired,\r\n", svcName));
         for (Property p : service.getProperties()) {
             PropertyDefinition def = p.getDefinition();
             if (def.isSendEvents()) {
             	 writer.write(String.format("    %s_%sChanged on%sChanged,\r\n", svcName, def.getName(), def.getName()));
             }
         }
         writer.write("    UpnpError *error,\r\n");
         writer.write("    void *ctx) {\r\n");
         writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
         writer.write("\r\n");
         writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
         writer.write("    RETURN_VAL_IF_FAIL(error, TINY_RET_E_ARG_NULL);\r\n");
         writer.write("\r\n");
         writer.write("    do {\r\n");
         writer.write("        thiz->ctx = ctx;\r\n");
         writer.write("        thiz->onSubscriptionExpired = onSubscriptionExpired;\r\n");
         for (Property p : service.getProperties()) {
             PropertyDefinition def = p.getDefinition();
             if (def.isSendEvents()) {
             	 writer.write(String.format("        thiz->on%sChanged = on%sChanged;\r\n", def.getName(), def.getName()));
             }
         }
         writer.write("        thiz->ctx = ctx;\r\n");
         writer.write("\r\n");
         writer.write("        ret = UpnpRuntime_Subscribe(thiz->runtime, thiz->service, 0, event_listener, thiz, error);\r\n");
         writer.write("        if (RET_FAILED(ret)) {\r\n");
         writer.write("            break;\r\n");
         writer.write("        }\r\n");
         writer.write("    } while (0);\r\n");
         writer.write("\r\n");
         writer.write("    return ret;\r\n");
         writer.write("}\r\n");
         writer.write("\r\n");

 	     /**
 	      *  Service unsubscribe functions
 	      */
         writer.write(String.format("TinyRet %s_Unsubscribe(%s *thiz, UpnpError *error) {\r\n", svcName, svcName));
         writer.write("    TinyRet ret = TINY_RET_OK;\r\n");
         writer.write("\r\n");
         writer.write("    RETURN_VAL_IF_FAIL(thiz, TINY_RET_E_ARG_NULL);\r\n");
         writer.write("    RETURN_VAL_IF_FAIL(error, TINY_RET_E_ARG_NULL);\r\n");
         writer.write("\r\n");
         writer.write("    ret = UpnpRuntime_Unsubscribe(thiz->runtime, thiz->service, error);\r\n");
         writer.write("    if (RET_SUCCEEDED(ret)) {\r\n");
         writer.write("        thiz->onSubscriptionExpired = NULL;\r\n");
         for (Property p : service.getProperties()) {
             PropertyDefinition def = p.getDefinition();
             if (def.isSendEvents()) {
             	 writer.write(String.format("        thiz->on%sChanged = NULL;\r\n", def.getName()));
             }
         }
         writer.write("        thiz->ctx = NULL;\r\n");
         writer.write("    }\r\n");
         writer.write("\r\n");
         writer.write("    return ret;\r\n");
         writer.write("}\r\n");
         writer.write("\r\n");

 	     /**
 	      *  Service event_listener functions
 	      */
         writer.write("static void event_listener(UpnpEvent *event, void *ctx) {\r\n");
         writer.write(String.format("    %s *thiz = (%s *)ctx;\r\n", svcName, svcName));
         writer.write("\r\n");
         writer.write("    LOG_D(TAG, \"event_listener\");\r\n");
         writer.write("\r\n");
         writer.write("    do {\r\n");

         for (Property p : service.getProperties()) {
             PropertyDefinition def = p.getDefinition();
             if (def.isSendEvents()) {
            	 String name = def.getName();
            	 String lowerName = def.getName().toLowerCase();
                 writer.write(String.format("        const char * _%s = UpnpEvent_GetArgumentValue(event, PROPERTY_%s);\r\n", lowerName, name));
                 writer.write(String.format("        if (_%s != NULL) {\r\n", lowerName));
             	 writer.write(String.format("            if (thiz->on%sChanged != NULL) {\r\n", name));
             	 writer.write(String.format("                thiz->on%sChanged(%s, thiz->ctx);\r\n", name, genDataTypeTransformFunc(def)));
             	               writer.write("            }\r\n");
             	               writer.write("        }\r\n");
             }
         }

         writer.write("    } while (0);\r\n");
         writer.write("}\r\n");
         writer.write("\r\n");
    }

    private void genServiceCFile(String folder, Service service, String pkgName) throws IOException {
        String svcName = service.getType().getName();
        String fileName = folder + "/" + svcName + ".c";

        Log.d(TAG, "genControlServiceCFile: " + fileName);
        
        OutputStream outputStream = new FileOutputStream(fileName);
        OutputStreamWriter writer = new OutputStreamWriter(outputStream);

        genServiceDeclaration(writer, service);
        genServiceActionNames(writer, service);
        genServicePropertyNames(writer, service);
        genServicePropertyValueDefined(writer, service);
        genServiceEventDefined(writer, service);
        genServiceImplement(writer, service);

        writer.flush();
        writer.close();
    }
}